/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp"];
/******/ 	window["webpackJsonp"] = function webpackJsonpCallback(chunkIds, moreModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, callbacks = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId])
/******/ 				callbacks.push.apply(callbacks, installedChunks[chunkId]);
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			modules[moduleId] = moreModules[moduleId];
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);
/******/ 		while(callbacks.length)
/******/ 			callbacks.shift().call(null, __webpack_require__);
/******/
/******/ 	};
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// "0" means "already loaded"
/******/ 	// Array means "loading", array contains callbacks
/******/ 	var installedChunks = {
/******/ 		0:0
/******/ 	};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId, callback) {
/******/ 		// "0" is the signal for "already loaded"
/******/ 		if(installedChunks[chunkId] === 0)
/******/ 			return callback.call(null, __webpack_require__);
/******/
/******/ 		// an array means "currently loading".
/******/ 		if(installedChunks[chunkId] !== undefined) {
/******/ 			installedChunks[chunkId].push(callback);
/******/ 		} else {
/******/ 			// start chunk loading
/******/ 			installedChunks[chunkId] = [callback];
/******/ 			var head = document.getElementsByTagName('head')[0];
/******/ 			var script = document.createElement('script');
/******/ 			script.type = 'text/javascript';
/******/ 			script.charset = 'utf-8';
/******/ 			script.async = true;
/******/ 			script.src = __webpack_require__.p + "" + chunkId + ".index.js";
/******/ 			head.appendChild(script);
/******/ 		}
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(4);
	__webpack_require__(11);
	__webpack_require__.e/* require */(1, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(2), __webpack_require__(3), __webpack_require__(12), __webpack_require__(13), __webpack_require__(14), __webpack_require__(15), __webpack_require__(16), __webpack_require__(17), __webpack_require__(18), __webpack_require__(19), __webpack_require__(20), __webpack_require__(21), __webpack_require__(22), __webpack_require__(23), __webpack_require__(24), __webpack_require__(25), __webpack_require__(26), __webpack_require__(27), __webpack_require__(28), __webpack_require__(29), __webpack_require__(1)]; (function($, P) {
	  'use strict';
	  $.circuitboard.plugin(['tile-skin', 'tile-click-to-open', 'tile-grow-when-open', 'tile-middleclick-to-maximize', 'tile-spacing', 'tile-active', 'three-d', 'proteins']);
	  var getFmaModels = __webpack_require__(30);
	  $('#circuitboard').circuitboard({
	    model: getFmaModels(['24tile:60000000'])[0],
	    tileSpacing: 1,
	    tilemapMargin: 0,
	    weightWhenOpen: 8,
	    threeDCanvasElement: $('#three-d-canvas')
	  }).circuitboard('instance').then(function(circuitboard) {
	    console.info('circuitboard loaded');
	  });
	}.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));});
	
	//# sourceMappingURL=<compileOutput>


/***/ },

/***/ 2:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(global, factory) {
	  if (typeof module === "object" && typeof module.exports === "object") {
	    module.exports = global.document ? factory(global, true) : function(w) {
	      if (!w.document) {
	        throw new Error("jQuery requires a window with a document");
	      }
	      return factory(w);
	    };
	  } else {
	    factory(global);
	  }
	}(typeof window !== "undefined" ? window : this, function(window, noGlobal) {
	  var arr = [];
	  var slice = arr.slice;
	  var concat = arr.concat;
	  var push = arr.push;
	  var indexOf = arr.indexOf;
	  var class2type = {};
	  var toString = class2type.toString;
	  var hasOwn = class2type.hasOwnProperty;
	  var support = {};
	  var document = window.document,
	      version = "2.1.1",
	      jQuery = function(selector, context) {
	        return new jQuery.fn.init(selector, context);
	      },
	      rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
	      rmsPrefix = /^-ms-/,
	      rdashAlpha = /-([\da-z])/gi,
	      fcamelCase = function(all, letter) {
	        return letter.toUpperCase();
	      };
	  jQuery.fn = jQuery.prototype = {
	    jquery: version,
	    constructor: jQuery,
	    selector: "",
	    length: 0,
	    toArray: function() {
	      return slice.call(this);
	    },
	    get: function(num) {
	      return num != null ? (num < 0 ? this[num + this.length] : this[num]) : slice.call(this);
	    },
	    pushStack: function(elems) {
	      var ret = jQuery.merge(this.constructor(), elems);
	      ret.prevObject = this;
	      ret.context = this.context;
	      return ret;
	    },
	    each: function(callback, args) {
	      return jQuery.each(this, callback, args);
	    },
	    map: function(callback) {
	      return this.pushStack(jQuery.map(this, function(elem, i) {
	        return callback.call(elem, i, elem);
	      }));
	    },
	    slice: function() {
	      return this.pushStack(slice.apply(this, arguments));
	    },
	    first: function() {
	      return this.eq(0);
	    },
	    last: function() {
	      return this.eq(-1);
	    },
	    eq: function(i) {
	      var len = this.length,
	          j = +i + (i < 0 ? len : 0);
	      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
	    },
	    end: function() {
	      return this.prevObject || this.constructor(null);
	    },
	    push: push,
	    sort: arr.sort,
	    splice: arr.splice
	  };
	  jQuery.extend = jQuery.fn.extend = function() {
	    var options,
	        name,
	        src,
	        copy,
	        copyIsArray,
	        clone,
	        target = arguments[0] || {},
	        i = 1,
	        length = arguments.length,
	        deep = false;
	    if (typeof target === "boolean") {
	      deep = target;
	      target = arguments[i] || {};
	      i++;
	    }
	    if (typeof target !== "object" && !jQuery.isFunction(target)) {
	      target = {};
	    }
	    if (i === length) {
	      target = this;
	      i--;
	    }
	    for (; i < length; i++) {
	      if ((options = arguments[i]) != null) {
	        for (name in options) {
	          src = target[name];
	          copy = options[name];
	          if (target === copy) {
	            continue;
	          }
	          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
	            if (copyIsArray) {
	              copyIsArray = false;
	              clone = src && jQuery.isArray(src) ? src : [];
	            } else {
	              clone = src && jQuery.isPlainObject(src) ? src : {};
	            }
	            target[name] = jQuery.extend(deep, clone, copy);
	          } else if (copy !== undefined) {
	            target[name] = copy;
	          }
	        }
	      }
	    }
	    return target;
	  };
	  jQuery.extend({
	    expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
	    isReady: true,
	    error: function(msg) {
	      throw new Error(msg);
	    },
	    noop: function() {},
	    isFunction: function(obj) {
	      return jQuery.type(obj) === "function";
	    },
	    isArray: Array.isArray,
	    isWindow: function(obj) {
	      return obj != null && obj === obj.window;
	    },
	    isNumeric: function(obj) {
	      return !jQuery.isArray(obj) && obj - parseFloat(obj) >= 0;
	    },
	    isPlainObject: function(obj) {
	      if (jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
	        return false;
	      }
	      if (obj.constructor && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
	        return false;
	      }
	      return true;
	    },
	    isEmptyObject: function(obj) {
	      var name;
	      for (name in obj) {
	        return false;
	      }
	      return true;
	    },
	    type: function(obj) {
	      if (obj == null) {
	        return obj + "";
	      }
	      return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;
	    },
	    globalEval: function(code) {
	      var script,
	          indirect = eval;
	      code = jQuery.trim(code);
	      if (code) {
	        if (code.indexOf("use strict") === 1) {
	          script = document.createElement("script");
	          script.text = code;
	          document.head.appendChild(script).parentNode.removeChild(script);
	        } else {
	          indirect(code);
	        }
	      }
	    },
	    camelCase: function(string) {
	      return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
	    },
	    nodeName: function(elem, name) {
	      return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	    },
	    each: function(obj, callback, args) {
	      var value,
	          i = 0,
	          length = obj.length,
	          isArray = isArraylike(obj);
	      if (args) {
	        if (isArray) {
	          for (; i < length; i++) {
	            value = callback.apply(obj[i], args);
	            if (value === false) {
	              break;
	            }
	          }
	        } else {
	          for (i in obj) {
	            value = callback.apply(obj[i], args);
	            if (value === false) {
	              break;
	            }
	          }
	        }
	      } else {
	        if (isArray) {
	          for (; i < length; i++) {
	            value = callback.call(obj[i], i, obj[i]);
	            if (value === false) {
	              break;
	            }
	          }
	        } else {
	          for (i in obj) {
	            value = callback.call(obj[i], i, obj[i]);
	            if (value === false) {
	              break;
	            }
	          }
	        }
	      }
	      return obj;
	    },
	    trim: function(text) {
	      return text == null ? "" : (text + "").replace(rtrim, "");
	    },
	    makeArray: function(arr, results) {
	      var ret = results || [];
	      if (arr != null) {
	        if (isArraylike(Object(arr))) {
	          jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
	        } else {
	          push.call(ret, arr);
	        }
	      }
	      return ret;
	    },
	    inArray: function(elem, arr, i) {
	      return arr == null ? -1 : indexOf.call(arr, elem, i);
	    },
	    merge: function(first, second) {
	      var len = +second.length,
	          j = 0,
	          i = first.length;
	      for (; j < len; j++) {
	        first[i++] = second[j];
	      }
	      first.length = i;
	      return first;
	    },
	    grep: function(elems, callback, invert) {
	      var callbackInverse,
	          matches = [],
	          i = 0,
	          length = elems.length,
	          callbackExpect = !invert;
	      for (; i < length; i++) {
	        callbackInverse = !callback(elems[i], i);
	        if (callbackInverse !== callbackExpect) {
	          matches.push(elems[i]);
	        }
	      }
	      return matches;
	    },
	    map: function(elems, callback, arg) {
	      var value,
	          i = 0,
	          length = elems.length,
	          isArray = isArraylike(elems),
	          ret = [];
	      if (isArray) {
	        for (; i < length; i++) {
	          value = callback(elems[i], i, arg);
	          if (value != null) {
	            ret.push(value);
	          }
	        }
	      } else {
	        for (i in elems) {
	          value = callback(elems[i], i, arg);
	          if (value != null) {
	            ret.push(value);
	          }
	        }
	      }
	      return concat.apply([], ret);
	    },
	    guid: 1,
	    proxy: function(fn, context) {
	      var tmp,
	          args,
	          proxy;
	      if (typeof context === "string") {
	        tmp = fn[context];
	        context = fn;
	        fn = tmp;
	      }
	      if (!jQuery.isFunction(fn)) {
	        return undefined;
	      }
	      args = slice.call(arguments, 2);
	      proxy = function() {
	        return fn.apply(context || this, args.concat(slice.call(arguments)));
	      };
	      proxy.guid = fn.guid = fn.guid || jQuery.guid++;
	      return proxy;
	    },
	    now: Date.now,
	    support: support
	  });
	  jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	    class2type["[object " + name + "]"] = name.toLowerCase();
	  });
	  function isArraylike(obj) {
	    var length = obj.length,
	        type = jQuery.type(obj);
	    if (type === "function" || jQuery.isWindow(obj)) {
	      return false;
	    }
	    if (obj.nodeType === 1 && length) {
	      return true;
	    }
	    return type === "array" || length === 0 || typeof length === "number" && length > 0 && (length - 1) in obj;
	  }
	  var Sizzle = (function(window) {
	    var i,
	        support,
	        Expr,
	        getText,
	        isXML,
	        tokenize,
	        compile,
	        select,
	        outermostContext,
	        sortInput,
	        hasDuplicate,
	        setDocument,
	        document,
	        docElem,
	        documentIsHTML,
	        rbuggyQSA,
	        rbuggyMatches,
	        matches,
	        contains,
	        expando = "sizzle" + -(new Date()),
	        preferredDoc = window.document,
	        dirruns = 0,
	        done = 0,
	        classCache = createCache(),
	        tokenCache = createCache(),
	        compilerCache = createCache(),
	        sortOrder = function(a, b) {
	          if (a === b) {
	            hasDuplicate = true;
	          }
	          return 0;
	        },
	        strundefined = typeof undefined,
	        MAX_NEGATIVE = 1 << 31,
	        hasOwn = ({}).hasOwnProperty,
	        arr = [],
	        pop = arr.pop,
	        push_native = arr.push,
	        push = arr.push,
	        slice = arr.slice,
	        indexOf = arr.indexOf || function(elem) {
	          var i = 0,
	              len = this.length;
	          for (; i < len; i++) {
	            if (this[i] === elem) {
	              return i;
	            }
	          }
	          return -1;
	        },
	        booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
	        whitespace = "[\\x20\\t\\r\\n\\f]",
	        characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
	        identifier = characterEncoding.replace("w", "w#"),
	        attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace + "*([*^$|!~]?=)" + whitespace + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
	        pseudos = ":(" + characterEncoding + ")(?:\\((" + "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + ".*" + ")\\)|)",
	        rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
	        rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
	        rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
	        rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
	        rpseudo = new RegExp(pseudos),
	        ridentifier = new RegExp("^" + identifier + "$"),
	        matchExpr = {
	          "ID": new RegExp("^#(" + characterEncoding + ")"),
	          "CLASS": new RegExp("^\\.(" + characterEncoding + ")"),
	          "TAG": new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
	          "ATTR": new RegExp("^" + attributes),
	          "PSEUDO": new RegExp("^" + pseudos),
	          "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
	          "bool": new RegExp("^(?:" + booleans + ")$", "i"),
	          "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
	        },
	        rinputs = /^(?:input|select|textarea|button)$/i,
	        rheader = /^h\d$/i,
	        rnative = /^[^{]+\{\s*\[native \w/,
	        rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
	        rsibling = /[+~]/,
	        rescape = /'|\\/g,
	        runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
	        funescape = function(_, escaped, escapedWhitespace) {
	          var high = "0x" + escaped - 0x10000;
	          return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 0x10000) : String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
	        };
	    try {
	      push.apply((arr = slice.call(preferredDoc.childNodes)), preferredDoc.childNodes);
	      arr[preferredDoc.childNodes.length].nodeType;
	    } catch (e) {
	      push = {apply: arr.length ? function(target, els) {
	          push_native.apply(target, slice.call(els));
	        } : function(target, els) {
	          var j = target.length,
	              i = 0;
	          while ((target[j++] = els[i++])) {}
	          target.length = j - 1;
	        }};
	    }
	    function Sizzle(selector, context, results, seed) {
	      var match,
	          elem,
	          m,
	          nodeType,
	          i,
	          groups,
	          old,
	          nid,
	          newContext,
	          newSelector;
	      if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
	        setDocument(context);
	      }
	      context = context || document;
	      results = results || [];
	      if (!selector || typeof selector !== "string") {
	        return results;
	      }
	      if ((nodeType = context.nodeType) !== 1 && nodeType !== 9) {
	        return [];
	      }
	      if (documentIsHTML && !seed) {
	        if ((match = rquickExpr.exec(selector))) {
	          if ((m = match[1])) {
	            if (nodeType === 9) {
	              elem = context.getElementById(m);
	              if (elem && elem.parentNode) {
	                if (elem.id === m) {
	                  results.push(elem);
	                  return results;
	                }
	              } else {
	                return results;
	              }
	            } else {
	              if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
	                results.push(elem);
	                return results;
	              }
	            }
	          } else if (match[2]) {
	            push.apply(results, context.getElementsByTagName(selector));
	            return results;
	          } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
	            push.apply(results, context.getElementsByClassName(m));
	            return results;
	          }
	        }
	        if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
	          nid = old = expando;
	          newContext = context;
	          newSelector = nodeType === 9 && selector;
	          if (nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
	            groups = tokenize(selector);
	            if ((old = context.getAttribute("id"))) {
	              nid = old.replace(rescape, "\\$&");
	            } else {
	              context.setAttribute("id", nid);
	            }
	            nid = "[id='" + nid + "'] ";
	            i = groups.length;
	            while (i--) {
	              groups[i] = nid + toSelector(groups[i]);
	            }
	            newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
	            newSelector = groups.join(",");
	          }
	          if (newSelector) {
	            try {
	              push.apply(results, newContext.querySelectorAll(newSelector));
	              return results;
	            } catch (qsaError) {} finally {
	              if (!old) {
	                context.removeAttribute("id");
	              }
	            }
	          }
	        }
	      }
	      return select(selector.replace(rtrim, "$1"), context, results, seed);
	    }
	    function createCache() {
	      var keys = [];
	      function cache(key, value) {
	        if (keys.push(key + " ") > Expr.cacheLength) {
	          delete cache[keys.shift()];
	        }
	        return (cache[key + " "] = value);
	      }
	      return cache;
	    }
	    function markFunction(fn) {
	      fn[expando] = true;
	      return fn;
	    }
	    function assert(fn) {
	      var div = document.createElement("div");
	      try {
	        return !!fn(div);
	      } catch (e) {
	        return false;
	      } finally {
	        if (div.parentNode) {
	          div.parentNode.removeChild(div);
	        }
	        div = null;
	      }
	    }
	    function addHandle(attrs, handler) {
	      var arr = attrs.split("|"),
	          i = attrs.length;
	      while (i--) {
	        Expr.attrHandle[arr[i]] = handler;
	      }
	    }
	    function siblingCheck(a, b) {
	      var cur = b && a,
	          diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);
	      if (diff) {
	        return diff;
	      }
	      if (cur) {
	        while ((cur = cur.nextSibling)) {
	          if (cur === b) {
	            return -1;
	          }
	        }
	      }
	      return a ? 1 : -1;
	    }
	    function createInputPseudo(type) {
	      return function(elem) {
	        var name = elem.nodeName.toLowerCase();
	        return name === "input" && elem.type === type;
	      };
	    }
	    function createButtonPseudo(type) {
	      return function(elem) {
	        var name = elem.nodeName.toLowerCase();
	        return (name === "input" || name === "button") && elem.type === type;
	      };
	    }
	    function createPositionalPseudo(fn) {
	      return markFunction(function(argument) {
	        argument = +argument;
	        return markFunction(function(seed, matches) {
	          var j,
	              matchIndexes = fn([], seed.length, argument),
	              i = matchIndexes.length;
	          while (i--) {
	            if (seed[(j = matchIndexes[i])]) {
	              seed[j] = !(matches[j] = seed[j]);
	            }
	          }
	        });
	      });
	    }
	    function testContext(context) {
	      return context && typeof context.getElementsByTagName !== strundefined && context;
	    }
	    support = Sizzle.support = {};
	    isXML = Sizzle.isXML = function(elem) {
	      var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	      return documentElement ? documentElement.nodeName !== "HTML" : false;
	    };
	    setDocument = Sizzle.setDocument = function(node) {
	      var hasCompare,
	          doc = node ? node.ownerDocument || node : preferredDoc,
	          parent = doc.defaultView;
	      if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
	        return document;
	      }
	      document = doc;
	      docElem = doc.documentElement;
	      documentIsHTML = !isXML(doc);
	      if (parent && parent !== parent.top) {
	        if (parent.addEventListener) {
	          parent.addEventListener("unload", function() {
	            setDocument();
	          }, false);
	        } else if (parent.attachEvent) {
	          parent.attachEvent("onunload", function() {
	            setDocument();
	          });
	        }
	      }
	      support.attributes = assert(function(div) {
	        div.className = "i";
	        return !div.getAttribute("className");
	      });
	      support.getElementsByTagName = assert(function(div) {
	        div.appendChild(doc.createComment(""));
	        return !div.getElementsByTagName("*").length;
	      });
	      support.getElementsByClassName = rnative.test(doc.getElementsByClassName) && assert(function(div) {
	        div.innerHTML = "<div class='a'></div><div class='a i'></div>";
	        div.firstChild.className = "i";
	        return div.getElementsByClassName("i").length === 2;
	      });
	      support.getById = assert(function(div) {
	        docElem.appendChild(div).id = expando;
	        return !doc.getElementsByName || !doc.getElementsByName(expando).length;
	      });
	      if (support.getById) {
	        Expr.find["ID"] = function(id, context) {
	          if (typeof context.getElementById !== strundefined && documentIsHTML) {
	            var m = context.getElementById(id);
	            return m && m.parentNode ? [m] : [];
	          }
	        };
	        Expr.filter["ID"] = function(id) {
	          var attrId = id.replace(runescape, funescape);
	          return function(elem) {
	            return elem.getAttribute("id") === attrId;
	          };
	        };
	      } else {
	        delete Expr.find["ID"];
	        Expr.filter["ID"] = function(id) {
	          var attrId = id.replace(runescape, funescape);
	          return function(elem) {
	            var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
	            return node && node.value === attrId;
	          };
	        };
	      }
	      Expr.find["TAG"] = support.getElementsByTagName ? function(tag, context) {
	        if (typeof context.getElementsByTagName !== strundefined) {
	          return context.getElementsByTagName(tag);
	        }
	      } : function(tag, context) {
	        var elem,
	            tmp = [],
	            i = 0,
	            results = context.getElementsByTagName(tag);
	        if (tag === "*") {
	          while ((elem = results[i++])) {
	            if (elem.nodeType === 1) {
	              tmp.push(elem);
	            }
	          }
	          return tmp;
	        }
	        return results;
	      };
	      Expr.find["CLASS"] = support.getElementsByClassName && function(className, context) {
	        if (typeof context.getElementsByClassName !== strundefined && documentIsHTML) {
	          return context.getElementsByClassName(className);
	        }
	      };
	      rbuggyMatches = [];
	      rbuggyQSA = [];
	      if ((support.qsa = rnative.test(doc.querySelectorAll))) {
	        assert(function(div) {
	          div.innerHTML = "<select msallowclip=''><option selected=''></option></select>";
	          if (div.querySelectorAll("[msallowclip^='']").length) {
	            rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
	          }
	          if (!div.querySelectorAll("[selected]").length) {
	            rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
	          }
	          if (!div.querySelectorAll(":checked").length) {
	            rbuggyQSA.push(":checked");
	          }
	        });
	        assert(function(div) {
	          var input = doc.createElement("input");
	          input.setAttribute("type", "hidden");
	          div.appendChild(input).setAttribute("name", "D");
	          if (div.querySelectorAll("[name=d]").length) {
	            rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
	          }
	          if (!div.querySelectorAll(":enabled").length) {
	            rbuggyQSA.push(":enabled", ":disabled");
	          }
	          div.querySelectorAll("*,:x");
	          rbuggyQSA.push(",.*:");
	        });
	      }
	      if ((support.matchesSelector = rnative.test((matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)))) {
	        assert(function(div) {
	          support.disconnectedMatch = matches.call(div, "div");
	          matches.call(div, "[s!='']:x");
	          rbuggyMatches.push("!=", pseudos);
	        });
	      }
	      rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
	      rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
	      hasCompare = rnative.test(docElem.compareDocumentPosition);
	      contains = hasCompare || rnative.test(docElem.contains) ? function(a, b) {
	        var adown = a.nodeType === 9 ? a.documentElement : a,
	            bup = b && b.parentNode;
	        return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
	      } : function(a, b) {
	        if (b) {
	          while ((b = b.parentNode)) {
	            if (b === a) {
	              return true;
	            }
	          }
	        }
	        return false;
	      };
	      sortOrder = hasCompare ? function(a, b) {
	        if (a === b) {
	          hasDuplicate = true;
	          return 0;
	        }
	        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
	        if (compare) {
	          return compare;
	        }
	        compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
	        if (compare & 1 || (!support.sortDetached && b.compareDocumentPosition(a) === compare)) {
	          if (a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
	            return -1;
	          }
	          if (b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
	            return 1;
	          }
	          return sortInput ? (indexOf.call(sortInput, a) - indexOf.call(sortInput, b)) : 0;
	        }
	        return compare & 4 ? -1 : 1;
	      } : function(a, b) {
	        if (a === b) {
	          hasDuplicate = true;
	          return 0;
	        }
	        var cur,
	            i = 0,
	            aup = a.parentNode,
	            bup = b.parentNode,
	            ap = [a],
	            bp = [b];
	        if (!aup || !bup) {
	          return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? (indexOf.call(sortInput, a) - indexOf.call(sortInput, b)) : 0;
	        } else if (aup === bup) {
	          return siblingCheck(a, b);
	        }
	        cur = a;
	        while ((cur = cur.parentNode)) {
	          ap.unshift(cur);
	        }
	        cur = b;
	        while ((cur = cur.parentNode)) {
	          bp.unshift(cur);
	        }
	        while (ap[i] === bp[i]) {
	          i++;
	        }
	        return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
	      };
	      return doc;
	    };
	    Sizzle.matches = function(expr, elements) {
	      return Sizzle(expr, null, null, elements);
	    };
	    Sizzle.matchesSelector = function(elem, expr) {
	      if ((elem.ownerDocument || elem) !== document) {
	        setDocument(elem);
	      }
	      expr = expr.replace(rattributeQuotes, "='$1']");
	      if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
	        try {
	          var ret = matches.call(elem, expr);
	          if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
	            return ret;
	          }
	        } catch (e) {}
	      }
	      return Sizzle(expr, document, null, [elem]).length > 0;
	    };
	    Sizzle.contains = function(context, elem) {
	      if ((context.ownerDocument || context) !== document) {
	        setDocument(context);
	      }
	      return contains(context, elem);
	    };
	    Sizzle.attr = function(elem, name) {
	      if ((elem.ownerDocument || elem) !== document) {
	        setDocument(elem);
	      }
	      var fn = Expr.attrHandle[name.toLowerCase()],
	          val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
	      return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
	    };
	    Sizzle.error = function(msg) {
	      throw new Error("Syntax error, unrecognized expression: " + msg);
	    };
	    Sizzle.uniqueSort = function(results) {
	      var elem,
	          duplicates = [],
	          j = 0,
	          i = 0;
	      hasDuplicate = !support.detectDuplicates;
	      sortInput = !support.sortStable && results.slice(0);
	      results.sort(sortOrder);
	      if (hasDuplicate) {
	        while ((elem = results[i++])) {
	          if (elem === results[i]) {
	            j = duplicates.push(i);
	          }
	        }
	        while (j--) {
	          results.splice(duplicates[j], 1);
	        }
	      }
	      sortInput = null;
	      return results;
	    };
	    getText = Sizzle.getText = function(elem) {
	      var node,
	          ret = "",
	          i = 0,
	          nodeType = elem.nodeType;
	      if (!nodeType) {
	        while ((node = elem[i++])) {
	          ret += getText(node);
	        }
	      } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
	        if (typeof elem.textContent === "string") {
	          return elem.textContent;
	        } else {
	          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
	            ret += getText(elem);
	          }
	        }
	      } else if (nodeType === 3 || nodeType === 4) {
	        return elem.nodeValue;
	      }
	      return ret;
	    };
	    Expr = Sizzle.selectors = {
	      cacheLength: 50,
	      createPseudo: markFunction,
	      match: matchExpr,
	      attrHandle: {},
	      find: {},
	      relative: {
	        ">": {
	          dir: "parentNode",
	          first: true
	        },
	        " ": {dir: "parentNode"},
	        "+": {
	          dir: "previousSibling",
	          first: true
	        },
	        "~": {dir: "previousSibling"}
	      },
	      preFilter: {
	        "ATTR": function(match) {
	          match[1] = match[1].replace(runescape, funescape);
	          match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
	          if (match[2] === "~=") {
	            match[3] = " " + match[3] + " ";
	          }
	          return match.slice(0, 4);
	        },
	        "CHILD": function(match) {
	          match[1] = match[1].toLowerCase();
	          if (match[1].slice(0, 3) === "nth") {
	            if (!match[3]) {
	              Sizzle.error(match[0]);
	            }
	            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
	            match[5] = +((match[7] + match[8]) || match[3] === "odd");
	          } else if (match[3]) {
	            Sizzle.error(match[0]);
	          }
	          return match;
	        },
	        "PSEUDO": function(match) {
	          var excess,
	              unquoted = !match[6] && match[2];
	          if (matchExpr["CHILD"].test(match[0])) {
	            return null;
	          }
	          if (match[3]) {
	            match[2] = match[4] || match[5] || "";
	          } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
	            match[0] = match[0].slice(0, excess);
	            match[2] = unquoted.slice(0, excess);
	          }
	          return match.slice(0, 3);
	        }
	      },
	      filter: {
	        "TAG": function(nodeNameSelector) {
	          var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
	          return nodeNameSelector === "*" ? function() {
	            return true;
	          } : function(elem) {
	            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
	          };
	        },
	        "CLASS": function(className) {
	          var pattern = classCache[className + " "];
	          return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
	            return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "");
	          });
	        },
	        "ATTR": function(name, operator, check) {
	          return function(elem) {
	            var result = Sizzle.attr(elem, name);
	            if (result == null) {
	              return operator === "!=";
	            }
	            if (!operator) {
	              return true;
	            }
	            result += "";
	            return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
	          };
	        },
	        "CHILD": function(type, what, argument, first, last) {
	          var simple = type.slice(0, 3) !== "nth",
	              forward = type.slice(-4) !== "last",
	              ofType = what === "of-type";
	          return first === 1 && last === 0 ? function(elem) {
	            return !!elem.parentNode;
	          } : function(elem, context, xml) {
	            var cache,
	                outerCache,
	                node,
	                diff,
	                nodeIndex,
	                start,
	                dir = simple !== forward ? "nextSibling" : "previousSibling",
	                parent = elem.parentNode,
	                name = ofType && elem.nodeName.toLowerCase(),
	                useCache = !xml && !ofType;
	            if (parent) {
	              if (simple) {
	                while (dir) {
	                  node = elem;
	                  while ((node = node[dir])) {
	                    if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
	                      return false;
	                    }
	                  }
	                  start = dir = type === "only" && !start && "nextSibling";
	                }
	                return true;
	              }
	              start = [forward ? parent.firstChild : parent.lastChild];
	              if (forward && useCache) {
	                outerCache = parent[expando] || (parent[expando] = {});
	                cache = outerCache[type] || [];
	                nodeIndex = cache[0] === dirruns && cache[1];
	                diff = cache[0] === dirruns && cache[2];
	                node = nodeIndex && parent.childNodes[nodeIndex];
	                while ((node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop())) {
	                  if (node.nodeType === 1 && ++diff && node === elem) {
	                    outerCache[type] = [dirruns, nodeIndex, diff];
	                    break;
	                  }
	                }
	              } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
	                diff = cache[1];
	              } else {
	                while ((node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop())) {
	                  if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
	                    if (useCache) {
	                      (node[expando] || (node[expando] = {}))[type] = [dirruns, diff];
	                    }
	                    if (node === elem) {
	                      break;
	                    }
	                  }
	                }
	              }
	              diff -= last;
	              return diff === first || (diff % first === 0 && diff / first >= 0);
	            }
	          };
	        },
	        "PSEUDO": function(pseudo, argument) {
	          var args,
	              fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);
	          if (fn[expando]) {
	            return fn(argument);
	          }
	          if (fn.length > 1) {
	            args = [pseudo, pseudo, "", argument];
	            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches) {
	              var idx,
	                  matched = fn(seed, argument),
	                  i = matched.length;
	              while (i--) {
	                idx = indexOf.call(seed, matched[i]);
	                seed[idx] = !(matches[idx] = matched[i]);
	              }
	            }) : function(elem) {
	              return fn(elem, 0, args);
	            };
	          }
	          return fn;
	        }
	      },
	      pseudos: {
	        "not": markFunction(function(selector) {
	          var input = [],
	              results = [],
	              matcher = compile(selector.replace(rtrim, "$1"));
	          return matcher[expando] ? markFunction(function(seed, matches, context, xml) {
	            var elem,
	                unmatched = matcher(seed, null, xml, []),
	                i = seed.length;
	            while (i--) {
	              if ((elem = unmatched[i])) {
	                seed[i] = !(matches[i] = elem);
	              }
	            }
	          }) : function(elem, context, xml) {
	            input[0] = elem;
	            matcher(input, null, xml, results);
	            return !results.pop();
	          };
	        }),
	        "has": markFunction(function(selector) {
	          return function(elem) {
	            return Sizzle(selector, elem).length > 0;
	          };
	        }),
	        "contains": markFunction(function(text) {
	          return function(elem) {
	            return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
	          };
	        }),
	        "lang": markFunction(function(lang) {
	          if (!ridentifier.test(lang || "")) {
	            Sizzle.error("unsupported lang: " + lang);
	          }
	          lang = lang.replace(runescape, funescape).toLowerCase();
	          return function(elem) {
	            var elemLang;
	            do {
	              if ((elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang"))) {
	                elemLang = elemLang.toLowerCase();
	                return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
	              }
	            } while ((elem = elem.parentNode) && elem.nodeType === 1);
	            return false;
	          };
	        }),
	        "target": function(elem) {
	          var hash = window.location && window.location.hash;
	          return hash && hash.slice(1) === elem.id;
	        },
	        "root": function(elem) {
	          return elem === docElem;
	        },
	        "focus": function(elem) {
	          return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
	        },
	        "enabled": function(elem) {
	          return elem.disabled === false;
	        },
	        "disabled": function(elem) {
	          return elem.disabled === true;
	        },
	        "checked": function(elem) {
	          var nodeName = elem.nodeName.toLowerCase();
	          return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
	        },
	        "selected": function(elem) {
	          if (elem.parentNode) {
	            elem.parentNode.selectedIndex;
	          }
	          return elem.selected === true;
	        },
	        "empty": function(elem) {
	          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
	            if (elem.nodeType < 6) {
	              return false;
	            }
	          }
	          return true;
	        },
	        "parent": function(elem) {
	          return !Expr.pseudos["empty"](elem);
	        },
	        "header": function(elem) {
	          return rheader.test(elem.nodeName);
	        },
	        "input": function(elem) {
	          return rinputs.test(elem.nodeName);
	        },
	        "button": function(elem) {
	          var name = elem.nodeName.toLowerCase();
	          return name === "input" && elem.type === "button" || name === "button";
	        },
	        "text": function(elem) {
	          var attr;
	          return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
	        },
	        "first": createPositionalPseudo(function() {
	          return [0];
	        }),
	        "last": createPositionalPseudo(function(matchIndexes, length) {
	          return [length - 1];
	        }),
	        "eq": createPositionalPseudo(function(matchIndexes, length, argument) {
	          return [argument < 0 ? argument + length : argument];
	        }),
	        "even": createPositionalPseudo(function(matchIndexes, length) {
	          var i = 0;
	          for (; i < length; i += 2) {
	            matchIndexes.push(i);
	          }
	          return matchIndexes;
	        }),
	        "odd": createPositionalPseudo(function(matchIndexes, length) {
	          var i = 1;
	          for (; i < length; i += 2) {
	            matchIndexes.push(i);
	          }
	          return matchIndexes;
	        }),
	        "lt": createPositionalPseudo(function(matchIndexes, length, argument) {
	          var i = argument < 0 ? argument + length : argument;
	          for (; --i >= 0; ) {
	            matchIndexes.push(i);
	          }
	          return matchIndexes;
	        }),
	        "gt": createPositionalPseudo(function(matchIndexes, length, argument) {
	          var i = argument < 0 ? argument + length : argument;
	          for (; ++i < length; ) {
	            matchIndexes.push(i);
	          }
	          return matchIndexes;
	        })
	      }
	    };
	    Expr.pseudos["nth"] = Expr.pseudos["eq"];
	    for (i in {
	      radio: true,
	      checkbox: true,
	      file: true,
	      password: true,
	      image: true
	    }) {
	      Expr.pseudos[i] = createInputPseudo(i);
	    }
	    for (i in {
	      submit: true,
	      reset: true
	    }) {
	      Expr.pseudos[i] = createButtonPseudo(i);
	    }
	    function setFilters() {}
	    setFilters.prototype = Expr.filters = Expr.pseudos;
	    Expr.setFilters = new setFilters();
	    tokenize = Sizzle.tokenize = function(selector, parseOnly) {
	      var matched,
	          match,
	          tokens,
	          type,
	          soFar,
	          groups,
	          preFilters,
	          cached = tokenCache[selector + " "];
	      if (cached) {
	        return parseOnly ? 0 : cached.slice(0);
	      }
	      soFar = selector;
	      groups = [];
	      preFilters = Expr.preFilter;
	      while (soFar) {
	        if (!matched || (match = rcomma.exec(soFar))) {
	          if (match) {
	            soFar = soFar.slice(match[0].length) || soFar;
	          }
	          groups.push((tokens = []));
	        }
	        matched = false;
	        if ((match = rcombinators.exec(soFar))) {
	          matched = match.shift();
	          tokens.push({
	            value: matched,
	            type: match[0].replace(rtrim, " ")
	          });
	          soFar = soFar.slice(matched.length);
	        }
	        for (type in Expr.filter) {
	          if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
	            matched = match.shift();
	            tokens.push({
	              value: matched,
	              type: type,
	              matches: match
	            });
	            soFar = soFar.slice(matched.length);
	          }
	        }
	        if (!matched) {
	          break;
	        }
	      }
	      return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
	    };
	    function toSelector(tokens) {
	      var i = 0,
	          len = tokens.length,
	          selector = "";
	      for (; i < len; i++) {
	        selector += tokens[i].value;
	      }
	      return selector;
	    }
	    function addCombinator(matcher, combinator, base) {
	      var dir = combinator.dir,
	          checkNonElements = base && dir === "parentNode",
	          doneName = done++;
	      return combinator.first ? function(elem, context, xml) {
	        while ((elem = elem[dir])) {
	          if (elem.nodeType === 1 || checkNonElements) {
	            return matcher(elem, context, xml);
	          }
	        }
	      } : function(elem, context, xml) {
	        var oldCache,
	            outerCache,
	            newCache = [dirruns, doneName];
	        if (xml) {
	          while ((elem = elem[dir])) {
	            if (elem.nodeType === 1 || checkNonElements) {
	              if (matcher(elem, context, xml)) {
	                return true;
	              }
	            }
	          }
	        } else {
	          while ((elem = elem[dir])) {
	            if (elem.nodeType === 1 || checkNonElements) {
	              outerCache = elem[expando] || (elem[expando] = {});
	              if ((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
	                return (newCache[2] = oldCache[2]);
	              } else {
	                outerCache[dir] = newCache;
	                if ((newCache[2] = matcher(elem, context, xml))) {
	                  return true;
	                }
	              }
	            }
	          }
	        }
	      };
	    }
	    function elementMatcher(matchers) {
	      return matchers.length > 1 ? function(elem, context, xml) {
	        var i = matchers.length;
	        while (i--) {
	          if (!matchers[i](elem, context, xml)) {
	            return false;
	          }
	        }
	        return true;
	      } : matchers[0];
	    }
	    function multipleContexts(selector, contexts, results) {
	      var i = 0,
	          len = contexts.length;
	      for (; i < len; i++) {
	        Sizzle(selector, contexts[i], results);
	      }
	      return results;
	    }
	    function condense(unmatched, map, filter, context, xml) {
	      var elem,
	          newUnmatched = [],
	          i = 0,
	          len = unmatched.length,
	          mapped = map != null;
	      for (; i < len; i++) {
	        if ((elem = unmatched[i])) {
	          if (!filter || filter(elem, context, xml)) {
	            newUnmatched.push(elem);
	            if (mapped) {
	              map.push(i);
	            }
	          }
	        }
	      }
	      return newUnmatched;
	    }
	    function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
	      if (postFilter && !postFilter[expando]) {
	        postFilter = setMatcher(postFilter);
	      }
	      if (postFinder && !postFinder[expando]) {
	        postFinder = setMatcher(postFinder, postSelector);
	      }
	      return markFunction(function(seed, results, context, xml) {
	        var temp,
	            i,
	            elem,
	            preMap = [],
	            postMap = [],
	            preexisting = results.length,
	            elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
	            matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
	            matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
	        if (matcher) {
	          matcher(matcherIn, matcherOut, context, xml);
	        }
	        if (postFilter) {
	          temp = condense(matcherOut, postMap);
	          postFilter(temp, [], context, xml);
	          i = temp.length;
	          while (i--) {
	            if ((elem = temp[i])) {
	              matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
	            }
	          }
	        }
	        if (seed) {
	          if (postFinder || preFilter) {
	            if (postFinder) {
	              temp = [];
	              i = matcherOut.length;
	              while (i--) {
	                if ((elem = matcherOut[i])) {
	                  temp.push((matcherIn[i] = elem));
	                }
	              }
	              postFinder(null, (matcherOut = []), temp, xml);
	            }
	            i = matcherOut.length;
	            while (i--) {
	              if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) {
	                seed[temp] = !(results[temp] = elem);
	              }
	            }
	          }
	        } else {
	          matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
	          if (postFinder) {
	            postFinder(null, results, matcherOut, xml);
	          } else {
	            push.apply(results, matcherOut);
	          }
	        }
	      });
	    }
	    function matcherFromTokens(tokens) {
	      var checkContext,
	          matcher,
	          j,
	          len = tokens.length,
	          leadingRelative = Expr.relative[tokens[0].type],
	          implicitRelative = leadingRelative || Expr.relative[" "],
	          i = leadingRelative ? 1 : 0,
	          matchContext = addCombinator(function(elem) {
	            return elem === checkContext;
	          }, implicitRelative, true),
	          matchAnyContext = addCombinator(function(elem) {
	            return indexOf.call(checkContext, elem) > -1;
	          }, implicitRelative, true),
	          matchers = [function(elem, context, xml) {
	            return (!leadingRelative && (xml || context !== outermostContext)) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
	          }];
	      for (; i < len; i++) {
	        if ((matcher = Expr.relative[tokens[i].type])) {
	          matchers = [addCombinator(elementMatcher(matchers), matcher)];
	        } else {
	          matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
	          if (matcher[expando]) {
	            j = ++i;
	            for (; j < len; j++) {
	              if (Expr.relative[tokens[j].type]) {
	                break;
	              }
	            }
	            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({value: tokens[i - 2].type === " " ? "*" : ""})).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens((tokens = tokens.slice(j))), j < len && toSelector(tokens));
	          }
	          matchers.push(matcher);
	        }
	      }
	      return elementMatcher(matchers);
	    }
	    function matcherFromGroupMatchers(elementMatchers, setMatchers) {
	      var bySet = setMatchers.length > 0,
	          byElement = elementMatchers.length > 0,
	          superMatcher = function(seed, context, xml, results, outermost) {
	            var elem,
	                j,
	                matcher,
	                matchedCount = 0,
	                i = "0",
	                unmatched = seed && [],
	                setMatched = [],
	                contextBackup = outermostContext,
	                elems = seed || byElement && Expr.find["TAG"]("*", outermost),
	                dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
	                len = elems.length;
	            if (outermost) {
	              outermostContext = context !== document && context;
	            }
	            for (; i !== len && (elem = elems[i]) != null; i++) {
	              if (byElement && elem) {
	                j = 0;
	                while ((matcher = elementMatchers[j++])) {
	                  if (matcher(elem, context, xml)) {
	                    results.push(elem);
	                    break;
	                  }
	                }
	                if (outermost) {
	                  dirruns = dirrunsUnique;
	                }
	              }
	              if (bySet) {
	                if ((elem = !matcher && elem)) {
	                  matchedCount--;
	                }
	                if (seed) {
	                  unmatched.push(elem);
	                }
	              }
	            }
	            matchedCount += i;
	            if (bySet && i !== matchedCount) {
	              j = 0;
	              while ((matcher = setMatchers[j++])) {
	                matcher(unmatched, setMatched, context, xml);
	              }
	              if (seed) {
	                if (matchedCount > 0) {
	                  while (i--) {
	                    if (!(unmatched[i] || setMatched[i])) {
	                      setMatched[i] = pop.call(results);
	                    }
	                  }
	                }
	                setMatched = condense(setMatched);
	              }
	              push.apply(results, setMatched);
	              if (outermost && !seed && setMatched.length > 0 && (matchedCount + setMatchers.length) > 1) {
	                Sizzle.uniqueSort(results);
	              }
	            }
	            if (outermost) {
	              dirruns = dirrunsUnique;
	              outermostContext = contextBackup;
	            }
	            return unmatched;
	          };
	      return bySet ? markFunction(superMatcher) : superMatcher;
	    }
	    compile = Sizzle.compile = function(selector, match) {
	      var i,
	          setMatchers = [],
	          elementMatchers = [],
	          cached = compilerCache[selector + " "];
	      if (!cached) {
	        if (!match) {
	          match = tokenize(selector);
	        }
	        i = match.length;
	        while (i--) {
	          cached = matcherFromTokens(match[i]);
	          if (cached[expando]) {
	            setMatchers.push(cached);
	          } else {
	            elementMatchers.push(cached);
	          }
	        }
	        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
	        cached.selector = selector;
	      }
	      return cached;
	    };
	    select = Sizzle.select = function(selector, context, results, seed) {
	      var i,
	          tokens,
	          token,
	          type,
	          find,
	          compiled = typeof selector === "function" && selector,
	          match = !seed && tokenize((selector = compiled.selector || selector));
	      results = results || [];
	      if (match.length === 1) {
	        tokens = match[0] = match[0].slice(0);
	        if (tokens.length > 2 && (token = tokens[0]).type === "ID" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
	          context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
	          if (!context) {
	            return results;
	          } else if (compiled) {
	            context = context.parentNode;
	          }
	          selector = selector.slice(tokens.shift().value.length);
	        }
	        i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
	        while (i--) {
	          token = tokens[i];
	          if (Expr.relative[(type = token.type)]) {
	            break;
	          }
	          if ((find = Expr.find[type])) {
	            if ((seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context))) {
	              tokens.splice(i, 1);
	              selector = seed.length && toSelector(tokens);
	              if (!selector) {
	                push.apply(results, seed);
	                return results;
	              }
	              break;
	            }
	          }
	        }
	      }
	      (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);
	      return results;
	    };
	    support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
	    support.detectDuplicates = !!hasDuplicate;
	    setDocument();
	    support.sortDetached = assert(function(div1) {
	      return div1.compareDocumentPosition(document.createElement("div")) & 1;
	    });
	    if (!assert(function(div) {
	      div.innerHTML = "<a href='#'></a>";
	      return div.firstChild.getAttribute("href") === "#";
	    })) {
	      addHandle("type|href|height|width", function(elem, name, isXML) {
	        if (!isXML) {
	          return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
	        }
	      });
	    }
	    if (!support.attributes || !assert(function(div) {
	      div.innerHTML = "<input/>";
	      div.firstChild.setAttribute("value", "");
	      return div.firstChild.getAttribute("value") === "";
	    })) {
	      addHandle("value", function(elem, name, isXML) {
	        if (!isXML && elem.nodeName.toLowerCase() === "input") {
	          return elem.defaultValue;
	        }
	      });
	    }
	    if (!assert(function(div) {
	      return div.getAttribute("disabled") == null;
	    })) {
	      addHandle(booleans, function(elem, name, isXML) {
	        var val;
	        if (!isXML) {
	          return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
	        }
	      });
	    }
	    return Sizzle;
	  })(window);
	  jQuery.find = Sizzle;
	  jQuery.expr = Sizzle.selectors;
	  jQuery.expr[":"] = jQuery.expr.pseudos;
	  jQuery.unique = Sizzle.uniqueSort;
	  jQuery.text = Sizzle.getText;
	  jQuery.isXMLDoc = Sizzle.isXML;
	  jQuery.contains = Sizzle.contains;
	  var rneedsContext = jQuery.expr.match.needsContext;
	  var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);
	  var risSimple = /^.[^:#\[\.,]*$/;
	  function winnow(elements, qualifier, not) {
	    if (jQuery.isFunction(qualifier)) {
	      return jQuery.grep(elements, function(elem, i) {
	        return !!qualifier.call(elem, i, elem) !== not;
	      });
	    }
	    if (qualifier.nodeType) {
	      return jQuery.grep(elements, function(elem) {
	        return (elem === qualifier) !== not;
	      });
	    }
	    if (typeof qualifier === "string") {
	      if (risSimple.test(qualifier)) {
	        return jQuery.filter(qualifier, elements, not);
	      }
	      qualifier = jQuery.filter(qualifier, elements);
	    }
	    return jQuery.grep(elements, function(elem) {
	      return (indexOf.call(qualifier, elem) >= 0) !== not;
	    });
	  }
	  jQuery.filter = function(expr, elems, not) {
	    var elem = elems[0];
	    if (not) {
	      expr = ":not(" + expr + ")";
	    }
	    return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function(elem) {
	      return elem.nodeType === 1;
	    }));
	  };
	  jQuery.fn.extend({
	    find: function(selector) {
	      var i,
	          len = this.length,
	          ret = [],
	          self = this;
	      if (typeof selector !== "string") {
	        return this.pushStack(jQuery(selector).filter(function() {
	          for (i = 0; i < len; i++) {
	            if (jQuery.contains(self[i], this)) {
	              return true;
	            }
	          }
	        }));
	      }
	      for (i = 0; i < len; i++) {
	        jQuery.find(selector, self[i], ret);
	      }
	      ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
	      ret.selector = this.selector ? this.selector + " " + selector : selector;
	      return ret;
	    },
	    filter: function(selector) {
	      return this.pushStack(winnow(this, selector || [], false));
	    },
	    not: function(selector) {
	      return this.pushStack(winnow(this, selector || [], true));
	    },
	    is: function(selector) {
	      return !!winnow(this, typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
	    }
	  });
	  var rootjQuery,
	      rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
	      init = jQuery.fn.init = function(selector, context) {
	        var match,
	            elem;
	        if (!selector) {
	          return this;
	        }
	        if (typeof selector === "string") {
	          if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
	            match = [null, selector, null];
	          } else {
	            match = rquickExpr.exec(selector);
	          }
	          if (match && (match[1] || !context)) {
	            if (match[1]) {
	              context = context instanceof jQuery ? context[0] : context;
	              jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
	              if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
	                for (match in context) {
	                  if (jQuery.isFunction(this[match])) {
	                    this[match](context[match]);
	                  } else {
	                    this.attr(match, context[match]);
	                  }
	                }
	              }
	              return this;
	            } else {
	              elem = document.getElementById(match[2]);
	              if (elem && elem.parentNode) {
	                this.length = 1;
	                this[0] = elem;
	              }
	              this.context = document;
	              this.selector = selector;
	              return this;
	            }
	          } else if (!context || context.jquery) {
	            return (context || rootjQuery).find(selector);
	          } else {
	            return this.constructor(context).find(selector);
	          }
	        } else if (selector.nodeType) {
	          this.context = this[0] = selector;
	          this.length = 1;
	          return this;
	        } else if (jQuery.isFunction(selector)) {
	          return typeof rootjQuery.ready !== "undefined" ? rootjQuery.ready(selector) : selector(jQuery);
	        }
	        if (selector.selector !== undefined) {
	          this.selector = selector.selector;
	          this.context = selector.context;
	        }
	        return jQuery.makeArray(selector, this);
	      };
	  init.prototype = jQuery.fn;
	  rootjQuery = jQuery(document);
	  var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	      guaranteedUnique = {
	        children: true,
	        contents: true,
	        next: true,
	        prev: true
	      };
	  jQuery.extend({
	    dir: function(elem, dir, until) {
	      var matched = [],
	          truncate = until !== undefined;
	      while ((elem = elem[dir]) && elem.nodeType !== 9) {
	        if (elem.nodeType === 1) {
	          if (truncate && jQuery(elem).is(until)) {
	            break;
	          }
	          matched.push(elem);
	        }
	      }
	      return matched;
	    },
	    sibling: function(n, elem) {
	      var matched = [];
	      for (; n; n = n.nextSibling) {
	        if (n.nodeType === 1 && n !== elem) {
	          matched.push(n);
	        }
	      }
	      return matched;
	    }
	  });
	  jQuery.fn.extend({
	    has: function(target) {
	      var targets = jQuery(target, this),
	          l = targets.length;
	      return this.filter(function() {
	        var i = 0;
	        for (; i < l; i++) {
	          if (jQuery.contains(this, targets[i])) {
	            return true;
	          }
	        }
	      });
	    },
	    closest: function(selectors, context) {
	      var cur,
	          i = 0,
	          l = this.length,
	          matched = [],
	          pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;
	      for (; i < l; i++) {
	        for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
	          if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
	            matched.push(cur);
	            break;
	          }
	        }
	      }
	      return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);
	    },
	    index: function(elem) {
	      if (!elem) {
	        return (this[0] && this[0].parentNode) ? this.first().prevAll().length : -1;
	      }
	      if (typeof elem === "string") {
	        return indexOf.call(jQuery(elem), this[0]);
	      }
	      return indexOf.call(this, elem.jquery ? elem[0] : elem);
	    },
	    add: function(selector, context) {
	      return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))));
	    },
	    addBack: function(selector) {
	      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
	    }
	  });
	  function sibling(cur, dir) {
	    while ((cur = cur[dir]) && cur.nodeType !== 1) {}
	    return cur;
	  }
	  jQuery.each({
	    parent: function(elem) {
	      var parent = elem.parentNode;
	      return parent && parent.nodeType !== 11 ? parent : null;
	    },
	    parents: function(elem) {
	      return jQuery.dir(elem, "parentNode");
	    },
	    parentsUntil: function(elem, i, until) {
	      return jQuery.dir(elem, "parentNode", until);
	    },
	    next: function(elem) {
	      return sibling(elem, "nextSibling");
	    },
	    prev: function(elem) {
	      return sibling(elem, "previousSibling");
	    },
	    nextAll: function(elem) {
	      return jQuery.dir(elem, "nextSibling");
	    },
	    prevAll: function(elem) {
	      return jQuery.dir(elem, "previousSibling");
	    },
	    nextUntil: function(elem, i, until) {
	      return jQuery.dir(elem, "nextSibling", until);
	    },
	    prevUntil: function(elem, i, until) {
	      return jQuery.dir(elem, "previousSibling", until);
	    },
	    siblings: function(elem) {
	      return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
	    },
	    children: function(elem) {
	      return jQuery.sibling(elem.firstChild);
	    },
	    contents: function(elem) {
	      return elem.contentDocument || jQuery.merge([], elem.childNodes);
	    }
	  }, function(name, fn) {
	    jQuery.fn[name] = function(until, selector) {
	      var matched = jQuery.map(this, fn, until);
	      if (name.slice(-5) !== "Until") {
	        selector = until;
	      }
	      if (selector && typeof selector === "string") {
	        matched = jQuery.filter(selector, matched);
	      }
	      if (this.length > 1) {
	        if (!guaranteedUnique[name]) {
	          jQuery.unique(matched);
	        }
	        if (rparentsprev.test(name)) {
	          matched.reverse();
	        }
	      }
	      return this.pushStack(matched);
	    };
	  });
	  var rnotwhite = (/\S+/g);
	  var optionsCache = {};
	  function createOptions(options) {
	    var object = optionsCache[options] = {};
	    jQuery.each(options.match(rnotwhite) || [], function(_, flag) {
	      object[flag] = true;
	    });
	    return object;
	  }
	  jQuery.Callbacks = function(options) {
	    options = typeof options === "string" ? (optionsCache[options] || createOptions(options)) : jQuery.extend({}, options);
	    var memory,
	        fired,
	        firing,
	        firingStart,
	        firingLength,
	        firingIndex,
	        list = [],
	        stack = !options.once && [],
	        fire = function(data) {
	          memory = options.memory && data;
	          fired = true;
	          firingIndex = firingStart || 0;
	          firingStart = 0;
	          firingLength = list.length;
	          firing = true;
	          for (; list && firingIndex < firingLength; firingIndex++) {
	            if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
	              memory = false;
	              break;
	            }
	          }
	          firing = false;
	          if (list) {
	            if (stack) {
	              if (stack.length) {
	                fire(stack.shift());
	              }
	            } else if (memory) {
	              list = [];
	            } else {
	              self.disable();
	            }
	          }
	        },
	        self = {
	          add: function() {
	            if (list) {
	              var start = list.length;
	              (function add(args) {
	                jQuery.each(args, function(_, arg) {
	                  var type = jQuery.type(arg);
	                  if (type === "function") {
	                    if (!options.unique || !self.has(arg)) {
	                      list.push(arg);
	                    }
	                  } else if (arg && arg.length && type !== "string") {
	                    add(arg);
	                  }
	                });
	              })(arguments);
	              if (firing) {
	                firingLength = list.length;
	              } else if (memory) {
	                firingStart = start;
	                fire(memory);
	              }
	            }
	            return this;
	          },
	          remove: function() {
	            if (list) {
	              jQuery.each(arguments, function(_, arg) {
	                var index;
	                while ((index = jQuery.inArray(arg, list, index)) > -1) {
	                  list.splice(index, 1);
	                  if (firing) {
	                    if (index <= firingLength) {
	                      firingLength--;
	                    }
	                    if (index <= firingIndex) {
	                      firingIndex--;
	                    }
	                  }
	                }
	              });
	            }
	            return this;
	          },
	          has: function(fn) {
	            return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
	          },
	          empty: function() {
	            list = [];
	            firingLength = 0;
	            return this;
	          },
	          disable: function() {
	            list = stack = memory = undefined;
	            return this;
	          },
	          disabled: function() {
	            return !list;
	          },
	          lock: function() {
	            stack = undefined;
	            if (!memory) {
	              self.disable();
	            }
	            return this;
	          },
	          locked: function() {
	            return !stack;
	          },
	          fireWith: function(context, args) {
	            if (list && (!fired || stack)) {
	              args = args || [];
	              args = [context, args.slice ? args.slice() : args];
	              if (firing) {
	                stack.push(args);
	              } else {
	                fire(args);
	              }
	            }
	            return this;
	          },
	          fire: function() {
	            self.fireWith(this, arguments);
	            return this;
	          },
	          fired: function() {
	            return !!fired;
	          }
	        };
	    return self;
	  };
	  jQuery.extend({
	    Deferred: function(func) {
	      var tuples = [["resolve", "done", jQuery.Callbacks("once memory"), "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"], ["notify", "progress", jQuery.Callbacks("memory")]],
	          state = "pending",
	          promise = {
	            state: function() {
	              return state;
	            },
	            always: function() {
	              deferred.done(arguments).fail(arguments);
	              return this;
	            },
	            then: function() {
	              var fns = arguments;
	              return jQuery.Deferred(function(newDefer) {
	                jQuery.each(tuples, function(i, tuple) {
	                  var fn = jQuery.isFunction(fns[i]) && fns[i];
	                  deferred[tuple[1]](function() {
	                    var returned = fn && fn.apply(this, arguments);
	                    if (returned && jQuery.isFunction(returned.promise)) {
	                      returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
	                    } else {
	                      newDefer[tuple[0] + "With"](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);
	                    }
	                  });
	                });
	                fns = null;
	              }).promise();
	            },
	            promise: function(obj) {
	              return obj != null ? jQuery.extend(obj, promise) : promise;
	            }
	          },
	          deferred = {};
	      promise.pipe = promise.then;
	      jQuery.each(tuples, function(i, tuple) {
	        var list = tuple[2],
	            stateString = tuple[3];
	        promise[tuple[1]] = list.add;
	        if (stateString) {
	          list.add(function() {
	            state = stateString;
	          }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
	        }
	        deferred[tuple[0]] = function() {
	          deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments);
	          return this;
	        };
	        deferred[tuple[0] + "With"] = list.fireWith;
	      });
	      promise.promise(deferred);
	      if (func) {
	        func.call(deferred, deferred);
	      }
	      return deferred;
	    },
	    when: function(subordinate) {
	      var i = 0,
	          resolveValues = slice.call(arguments),
	          length = resolveValues.length,
	          remaining = length !== 1 || (subordinate && jQuery.isFunction(subordinate.promise)) ? length : 0,
	          deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
	          updateFunc = function(i, contexts, values) {
	            return function(value) {
	              contexts[i] = this;
	              values[i] = arguments.length > 1 ? slice.call(arguments) : value;
	              if (values === progressValues) {
	                deferred.notifyWith(contexts, values);
	              } else if (!(--remaining)) {
	                deferred.resolveWith(contexts, values);
	              }
	            };
	          },
	          progressValues,
	          progressContexts,
	          resolveContexts;
	      if (length > 1) {
	        progressValues = new Array(length);
	        progressContexts = new Array(length);
	        resolveContexts = new Array(length);
	        for (; i < length; i++) {
	          if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
	            resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));
	          } else {
	            --remaining;
	          }
	        }
	      }
	      if (!remaining) {
	        deferred.resolveWith(resolveContexts, resolveValues);
	      }
	      return deferred.promise();
	    }
	  });
	  var readyList;
	  jQuery.fn.ready = function(fn) {
	    jQuery.ready.promise().done(fn);
	    return this;
	  };
	  jQuery.extend({
	    isReady: false,
	    readyWait: 1,
	    holdReady: function(hold) {
	      if (hold) {
	        jQuery.readyWait++;
	      } else {
	        jQuery.ready(true);
	      }
	    },
	    ready: function(wait) {
	      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
	        return;
	      }
	      jQuery.isReady = true;
	      if (wait !== true && --jQuery.readyWait > 0) {
	        return;
	      }
	      readyList.resolveWith(document, [jQuery]);
	      if (jQuery.fn.triggerHandler) {
	        jQuery(document).triggerHandler("ready");
	        jQuery(document).off("ready");
	      }
	    }
	  });
	  function completed() {
	    document.removeEventListener("DOMContentLoaded", completed, false);
	    window.removeEventListener("load", completed, false);
	    jQuery.ready();
	  }
	  jQuery.ready.promise = function(obj) {
	    if (!readyList) {
	      readyList = jQuery.Deferred();
	      if (document.readyState === "complete") {
	        setTimeout(jQuery.ready);
	      } else {
	        document.addEventListener("DOMContentLoaded", completed, false);
	        window.addEventListener("load", completed, false);
	      }
	    }
	    return readyList.promise(obj);
	  };
	  jQuery.ready.promise();
	  var access = jQuery.access = function(elems, fn, key, value, chainable, emptyGet, raw) {
	    var i = 0,
	        len = elems.length,
	        bulk = key == null;
	    if (jQuery.type(key) === "object") {
	      chainable = true;
	      for (i in key) {
	        jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
	      }
	    } else if (value !== undefined) {
	      chainable = true;
	      if (!jQuery.isFunction(value)) {
	        raw = true;
	      }
	      if (bulk) {
	        if (raw) {
	          fn.call(elems, value);
	          fn = null;
	        } else {
	          bulk = fn;
	          fn = function(elem, key, value) {
	            return bulk.call(jQuery(elem), value);
	          };
	        }
	      }
	      if (fn) {
	        for (; i < len; i++) {
	          fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
	        }
	      }
	    }
	    return chainable ? elems : bulk ? fn.call(elems) : len ? fn(elems[0], key) : emptyGet;
	  };
	  jQuery.acceptData = function(owner) {
	    return owner.nodeType === 1 || owner.nodeType === 9 || !(+owner.nodeType);
	  };
	  function Data() {
	    Object.defineProperty(this.cache = {}, 0, {get: function() {
	        return {};
	      }});
	    this.expando = jQuery.expando + Math.random();
	  }
	  Data.uid = 1;
	  Data.accepts = jQuery.acceptData;
	  Data.prototype = {
	    key: function(owner) {
	      if (!Data.accepts(owner)) {
	        return 0;
	      }
	      var descriptor = {},
	          unlock = owner[this.expando];
	      if (!unlock) {
	        unlock = Data.uid++;
	        try {
	          descriptor[this.expando] = {value: unlock};
	          Object.defineProperties(owner, descriptor);
	        } catch (e) {
	          descriptor[this.expando] = unlock;
	          jQuery.extend(owner, descriptor);
	        }
	      }
	      if (!this.cache[unlock]) {
	        this.cache[unlock] = {};
	      }
	      return unlock;
	    },
	    set: function(owner, data, value) {
	      var prop,
	          unlock = this.key(owner),
	          cache = this.cache[unlock];
	      if (typeof data === "string") {
	        cache[data] = value;
	      } else {
	        if (jQuery.isEmptyObject(cache)) {
	          jQuery.extend(this.cache[unlock], data);
	        } else {
	          for (prop in data) {
	            cache[prop] = data[prop];
	          }
	        }
	      }
	      return cache;
	    },
	    get: function(owner, key) {
	      var cache = this.cache[this.key(owner)];
	      return key === undefined ? cache : cache[key];
	    },
	    access: function(owner, key, value) {
	      var stored;
	      if (key === undefined || ((key && typeof key === "string") && value === undefined)) {
	        stored = this.get(owner, key);
	        return stored !== undefined ? stored : this.get(owner, jQuery.camelCase(key));
	      }
	      this.set(owner, key, value);
	      return value !== undefined ? value : key;
	    },
	    remove: function(owner, key) {
	      var i,
	          name,
	          camel,
	          unlock = this.key(owner),
	          cache = this.cache[unlock];
	      if (key === undefined) {
	        this.cache[unlock] = {};
	      } else {
	        if (jQuery.isArray(key)) {
	          name = key.concat(key.map(jQuery.camelCase));
	        } else {
	          camel = jQuery.camelCase(key);
	          if (key in cache) {
	            name = [key, camel];
	          } else {
	            name = camel;
	            name = name in cache ? [name] : (name.match(rnotwhite) || []);
	          }
	        }
	        i = name.length;
	        while (i--) {
	          delete cache[name[i]];
	        }
	      }
	    },
	    hasData: function(owner) {
	      return !jQuery.isEmptyObject(this.cache[owner[this.expando]] || {});
	    },
	    discard: function(owner) {
	      if (owner[this.expando]) {
	        delete this.cache[owner[this.expando]];
	      }
	    }
	  };
	  var data_priv = new Data();
	  var data_user = new Data();
	  var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	      rmultiDash = /([A-Z])/g;
	  function dataAttr(elem, key, data) {
	    var name;
	    if (data === undefined && elem.nodeType === 1) {
	      name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
	      data = elem.getAttribute(name);
	      if (typeof data === "string") {
	        try {
	          data = data === "true" ? true : data === "false" ? false : data === "null" ? null : +data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
	        } catch (e) {}
	        data_user.set(elem, key, data);
	      } else {
	        data = undefined;
	      }
	    }
	    return data;
	  }
	  jQuery.extend({
	    hasData: function(elem) {
	      return data_user.hasData(elem) || data_priv.hasData(elem);
	    },
	    data: function(elem, name, data) {
	      return data_user.access(elem, name, data);
	    },
	    removeData: function(elem, name) {
	      data_user.remove(elem, name);
	    },
	    _data: function(elem, name, data) {
	      return data_priv.access(elem, name, data);
	    },
	    _removeData: function(elem, name) {
	      data_priv.remove(elem, name);
	    }
	  });
	  jQuery.fn.extend({
	    data: function(key, value) {
	      var i,
	          name,
	          data,
	          elem = this[0],
	          attrs = elem && elem.attributes;
	      if (key === undefined) {
	        if (this.length) {
	          data = data_user.get(elem);
	          if (elem.nodeType === 1 && !data_priv.get(elem, "hasDataAttrs")) {
	            i = attrs.length;
	            while (i--) {
	              if (attrs[i]) {
	                name = attrs[i].name;
	                if (name.indexOf("data-") === 0) {
	                  name = jQuery.camelCase(name.slice(5));
	                  dataAttr(elem, name, data[name]);
	                }
	              }
	            }
	            data_priv.set(elem, "hasDataAttrs", true);
	          }
	        }
	        return data;
	      }
	      if (typeof key === "object") {
	        return this.each(function() {
	          data_user.set(this, key);
	        });
	      }
	      return access(this, function(value) {
	        var data,
	            camelKey = jQuery.camelCase(key);
	        if (elem && value === undefined) {
	          data = data_user.get(elem, key);
	          if (data !== undefined) {
	            return data;
	          }
	          data = data_user.get(elem, camelKey);
	          if (data !== undefined) {
	            return data;
	          }
	          data = dataAttr(elem, camelKey, undefined);
	          if (data !== undefined) {
	            return data;
	          }
	          return;
	        }
	        this.each(function() {
	          var data = data_user.get(this, camelKey);
	          data_user.set(this, camelKey, value);
	          if (key.indexOf("-") !== -1 && data !== undefined) {
	            data_user.set(this, key, value);
	          }
	        });
	      }, null, value, arguments.length > 1, null, true);
	    },
	    removeData: function(key) {
	      return this.each(function() {
	        data_user.remove(this, key);
	      });
	    }
	  });
	  jQuery.extend({
	    queue: function(elem, type, data) {
	      var queue;
	      if (elem) {
	        type = (type || "fx") + "queue";
	        queue = data_priv.get(elem, type);
	        if (data) {
	          if (!queue || jQuery.isArray(data)) {
	            queue = data_priv.access(elem, type, jQuery.makeArray(data));
	          } else {
	            queue.push(data);
	          }
	        }
	        return queue || [];
	      }
	    },
	    dequeue: function(elem, type) {
	      type = type || "fx";
	      var queue = jQuery.queue(elem, type),
	          startLength = queue.length,
	          fn = queue.shift(),
	          hooks = jQuery._queueHooks(elem, type),
	          next = function() {
	            jQuery.dequeue(elem, type);
	          };
	      if (fn === "inprogress") {
	        fn = queue.shift();
	        startLength--;
	      }
	      if (fn) {
	        if (type === "fx") {
	          queue.unshift("inprogress");
	        }
	        delete hooks.stop;
	        fn.call(elem, next, hooks);
	      }
	      if (!startLength && hooks) {
	        hooks.empty.fire();
	      }
	    },
	    _queueHooks: function(elem, type) {
	      var key = type + "queueHooks";
	      return data_priv.get(elem, key) || data_priv.access(elem, key, {empty: jQuery.Callbacks("once memory").add(function() {
	          data_priv.remove(elem, [type + "queue", key]);
	        })});
	    }
	  });
	  jQuery.fn.extend({
	    queue: function(type, data) {
	      var setter = 2;
	      if (typeof type !== "string") {
	        data = type;
	        type = "fx";
	        setter--;
	      }
	      if (arguments.length < setter) {
	        return jQuery.queue(this[0], type);
	      }
	      return data === undefined ? this : this.each(function() {
	        var queue = jQuery.queue(this, type, data);
	        jQuery._queueHooks(this, type);
	        if (type === "fx" && queue[0] !== "inprogress") {
	          jQuery.dequeue(this, type);
	        }
	      });
	    },
	    dequeue: function(type) {
	      return this.each(function() {
	        jQuery.dequeue(this, type);
	      });
	    },
	    clearQueue: function(type) {
	      return this.queue(type || "fx", []);
	    },
	    promise: function(type, obj) {
	      var tmp,
	          count = 1,
	          defer = jQuery.Deferred(),
	          elements = this,
	          i = this.length,
	          resolve = function() {
	            if (!(--count)) {
	              defer.resolveWith(elements, [elements]);
	            }
	          };
	      if (typeof type !== "string") {
	        obj = type;
	        type = undefined;
	      }
	      type = type || "fx";
	      while (i--) {
	        tmp = data_priv.get(elements[i], type + "queueHooks");
	        if (tmp && tmp.empty) {
	          count++;
	          tmp.empty.add(resolve);
	        }
	      }
	      resolve();
	      return defer.promise(obj);
	    }
	  });
	  var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;
	  var cssExpand = ["Top", "Right", "Bottom", "Left"];
	  var isHidden = function(elem, el) {
	    elem = el || elem;
	    return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem);
	  };
	  var rcheckableType = (/^(?:checkbox|radio)$/i);
	  (function() {
	    var fragment = document.createDocumentFragment(),
	        div = fragment.appendChild(document.createElement("div")),
	        input = document.createElement("input");
	    input.setAttribute("type", "radio");
	    input.setAttribute("checked", "checked");
	    input.setAttribute("name", "t");
	    div.appendChild(input);
	    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
	    div.innerHTML = "<textarea>x</textarea>";
	    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
	  })();
	  var strundefined = typeof undefined;
	  support.focusinBubbles = "onfocusin" in window;
	  var rkeyEvent = /^key/,
	      rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
	      rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	      rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;
	  function returnTrue() {
	    return true;
	  }
	  function returnFalse() {
	    return false;
	  }
	  function safeActiveElement() {
	    try {
	      return document.activeElement;
	    } catch (err) {}
	  }
	  jQuery.event = {
	    global: {},
	    add: function(elem, types, handler, data, selector) {
	      var handleObjIn,
	          eventHandle,
	          tmp,
	          events,
	          t,
	          handleObj,
	          special,
	          handlers,
	          type,
	          namespaces,
	          origType,
	          elemData = data_priv.get(elem);
	      if (!elemData) {
	        return;
	      }
	      if (handler.handler) {
	        handleObjIn = handler;
	        handler = handleObjIn.handler;
	        selector = handleObjIn.selector;
	      }
	      if (!handler.guid) {
	        handler.guid = jQuery.guid++;
	      }
	      if (!(events = elemData.events)) {
	        events = elemData.events = {};
	      }
	      if (!(eventHandle = elemData.handle)) {
	        eventHandle = elemData.handle = function(e) {
	          return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
	        };
	      }
	      types = (types || "").match(rnotwhite) || [""];
	      t = types.length;
	      while (t--) {
	        tmp = rtypenamespace.exec(types[t]) || [];
	        type = origType = tmp[1];
	        namespaces = (tmp[2] || "").split(".").sort();
	        if (!type) {
	          continue;
	        }
	        special = jQuery.event.special[type] || {};
	        type = (selector ? special.delegateType : special.bindType) || type;
	        special = jQuery.event.special[type] || {};
	        handleObj = jQuery.extend({
	          type: type,
	          origType: origType,
	          data: data,
	          handler: handler,
	          guid: handler.guid,
	          selector: selector,
	          needsContext: selector && jQuery.expr.match.needsContext.test(selector),
	          namespace: namespaces.join(".")
	        }, handleObjIn);
	        if (!(handlers = events[type])) {
	          handlers = events[type] = [];
	          handlers.delegateCount = 0;
	          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
	            if (elem.addEventListener) {
	              elem.addEventListener(type, eventHandle, false);
	            }
	          }
	        }
	        if (special.add) {
	          special.add.call(elem, handleObj);
	          if (!handleObj.handler.guid) {
	            handleObj.handler.guid = handler.guid;
	          }
	        }
	        if (selector) {
	          handlers.splice(handlers.delegateCount++, 0, handleObj);
	        } else {
	          handlers.push(handleObj);
	        }
	        jQuery.event.global[type] = true;
	      }
	    },
	    remove: function(elem, types, handler, selector, mappedTypes) {
	      var j,
	          origCount,
	          tmp,
	          events,
	          t,
	          handleObj,
	          special,
	          handlers,
	          type,
	          namespaces,
	          origType,
	          elemData = data_priv.hasData(elem) && data_priv.get(elem);
	      if (!elemData || !(events = elemData.events)) {
	        return;
	      }
	      types = (types || "").match(rnotwhite) || [""];
	      t = types.length;
	      while (t--) {
	        tmp = rtypenamespace.exec(types[t]) || [];
	        type = origType = tmp[1];
	        namespaces = (tmp[2] || "").split(".").sort();
	        if (!type) {
	          for (type in events) {
	            jQuery.event.remove(elem, type + types[t], handler, selector, true);
	          }
	          continue;
	        }
	        special = jQuery.event.special[type] || {};
	        type = (selector ? special.delegateType : special.bindType) || type;
	        handlers = events[type] || [];
	        tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
	        origCount = j = handlers.length;
	        while (j--) {
	          handleObj = handlers[j];
	          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
	            handlers.splice(j, 1);
	            if (handleObj.selector) {
	              handlers.delegateCount--;
	            }
	            if (special.remove) {
	              special.remove.call(elem, handleObj);
	            }
	          }
	        }
	        if (origCount && !handlers.length) {
	          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
	            jQuery.removeEvent(elem, type, elemData.handle);
	          }
	          delete events[type];
	        }
	      }
	      if (jQuery.isEmptyObject(events)) {
	        delete elemData.handle;
	        data_priv.remove(elem, "events");
	      }
	    },
	    trigger: function(event, data, elem, onlyHandlers) {
	      var i,
	          cur,
	          tmp,
	          bubbleType,
	          ontype,
	          handle,
	          special,
	          eventPath = [elem || document],
	          type = hasOwn.call(event, "type") ? event.type : event,
	          namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
	      cur = tmp = elem = elem || document;
	      if (elem.nodeType === 3 || elem.nodeType === 8) {
	        return;
	      }
	      if (rfocusMorph.test(type + jQuery.event.triggered)) {
	        return;
	      }
	      if (type.indexOf(".") >= 0) {
	        namespaces = type.split(".");
	        type = namespaces.shift();
	        namespaces.sort();
	      }
	      ontype = type.indexOf(":") < 0 && "on" + type;
	      event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);
	      event.isTrigger = onlyHandlers ? 2 : 3;
	      event.namespace = namespaces.join(".");
	      event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
	      event.result = undefined;
	      if (!event.target) {
	        event.target = elem;
	      }
	      data = data == null ? [event] : jQuery.makeArray(data, [event]);
	      special = jQuery.event.special[type] || {};
	      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
	        return;
	      }
	      if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
	        bubbleType = special.delegateType || type;
	        if (!rfocusMorph.test(bubbleType + type)) {
	          cur = cur.parentNode;
	        }
	        for (; cur; cur = cur.parentNode) {
	          eventPath.push(cur);
	          tmp = cur;
	        }
	        if (tmp === (elem.ownerDocument || document)) {
	          eventPath.push(tmp.defaultView || tmp.parentWindow || window);
	        }
	      }
	      i = 0;
	      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
	        event.type = i > 1 ? bubbleType : special.bindType || type;
	        handle = (data_priv.get(cur, "events") || {})[event.type] && data_priv.get(cur, "handle");
	        if (handle) {
	          handle.apply(cur, data);
	        }
	        handle = ontype && cur[ontype];
	        if (handle && handle.apply && jQuery.acceptData(cur)) {
	          event.result = handle.apply(cur, data);
	          if (event.result === false) {
	            event.preventDefault();
	          }
	        }
	      }
	      event.type = type;
	      if (!onlyHandlers && !event.isDefaultPrevented()) {
	        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {
	          if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {
	            tmp = elem[ontype];
	            if (tmp) {
	              elem[ontype] = null;
	            }
	            jQuery.event.triggered = type;
	            elem[type]();
	            jQuery.event.triggered = undefined;
	            if (tmp) {
	              elem[ontype] = tmp;
	            }
	          }
	        }
	      }
	      return event.result;
	    },
	    dispatch: function(event) {
	      event = jQuery.event.fix(event);
	      var i,
	          j,
	          ret,
	          matched,
	          handleObj,
	          handlerQueue = [],
	          args = slice.call(arguments),
	          handlers = (data_priv.get(this, "events") || {})[event.type] || [],
	          special = jQuery.event.special[event.type] || {};
	      args[0] = event;
	      event.delegateTarget = this;
	      if (special.preDispatch && special.preDispatch.call(this, event) === false) {
	        return;
	      }
	      handlerQueue = jQuery.event.handlers.call(this, event, handlers);
	      i = 0;
	      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
	        event.currentTarget = matched.elem;
	        j = 0;
	        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
	          if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
	            event.handleObj = handleObj;
	            event.data = handleObj.data;
	            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
	            if (ret !== undefined) {
	              if ((event.result = ret) === false) {
	                event.preventDefault();
	                event.stopPropagation();
	              }
	            }
	          }
	        }
	      }
	      if (special.postDispatch) {
	        special.postDispatch.call(this, event);
	      }
	      return event.result;
	    },
	    handlers: function(event, handlers) {
	      var i,
	          matches,
	          sel,
	          handleObj,
	          handlerQueue = [],
	          delegateCount = handlers.delegateCount,
	          cur = event.target;
	      if (delegateCount && cur.nodeType && (!event.button || event.type !== "click")) {
	        for (; cur !== this; cur = cur.parentNode || this) {
	          if (cur.disabled !== true || event.type !== "click") {
	            matches = [];
	            for (i = 0; i < delegateCount; i++) {
	              handleObj = handlers[i];
	              sel = handleObj.selector + " ";
	              if (matches[sel] === undefined) {
	                matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length;
	              }
	              if (matches[sel]) {
	                matches.push(handleObj);
	              }
	            }
	            if (matches.length) {
	              handlerQueue.push({
	                elem: cur,
	                handlers: matches
	              });
	            }
	          }
	        }
	      }
	      if (delegateCount < handlers.length) {
	        handlerQueue.push({
	          elem: this,
	          handlers: handlers.slice(delegateCount)
	        });
	      }
	      return handlerQueue;
	    },
	    props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
	    fixHooks: {},
	    keyHooks: {
	      props: "char charCode key keyCode".split(" "),
	      filter: function(event, original) {
	        if (event.which == null) {
	          event.which = original.charCode != null ? original.charCode : original.keyCode;
	        }
	        return event;
	      }
	    },
	    mouseHooks: {
	      props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
	      filter: function(event, original) {
	        var eventDoc,
	            doc,
	            body,
	            button = original.button;
	        if (event.pageX == null && original.clientX != null) {
	          eventDoc = event.target.ownerDocument || document;
	          doc = eventDoc.documentElement;
	          body = eventDoc.body;
	          event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
	          event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
	        }
	        if (!event.which && button !== undefined) {
	          event.which = (button & 1 ? 1 : (button & 2 ? 3 : (button & 4 ? 2 : 0)));
	        }
	        return event;
	      }
	    },
	    fix: function(event) {
	      if (event[jQuery.expando]) {
	        return event;
	      }
	      var i,
	          prop,
	          copy,
	          type = event.type,
	          originalEvent = event,
	          fixHook = this.fixHooks[type];
	      if (!fixHook) {
	        this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
	      }
	      copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
	      event = new jQuery.Event(originalEvent);
	      i = copy.length;
	      while (i--) {
	        prop = copy[i];
	        event[prop] = originalEvent[prop];
	      }
	      if (!event.target) {
	        event.target = document;
	      }
	      if (event.target.nodeType === 3) {
	        event.target = event.target.parentNode;
	      }
	      return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
	    },
	    special: {
	      load: {noBubble: true},
	      focus: {
	        trigger: function() {
	          if (this !== safeActiveElement() && this.focus) {
	            this.focus();
	            return false;
	          }
	        },
	        delegateType: "focusin"
	      },
	      blur: {
	        trigger: function() {
	          if (this === safeActiveElement() && this.blur) {
	            this.blur();
	            return false;
	          }
	        },
	        delegateType: "focusout"
	      },
	      click: {
	        trigger: function() {
	          if (this.type === "checkbox" && this.click && jQuery.nodeName(this, "input")) {
	            this.click();
	            return false;
	          }
	        },
	        _default: function(event) {
	          return jQuery.nodeName(event.target, "a");
	        }
	      },
	      beforeunload: {postDispatch: function(event) {
	          if (event.result !== undefined && event.originalEvent) {
	            event.originalEvent.returnValue = event.result;
	          }
	        }}
	    },
	    simulate: function(type, elem, event, bubble) {
	      var e = jQuery.extend(new jQuery.Event(), event, {
	        type: type,
	        isSimulated: true,
	        originalEvent: {}
	      });
	      if (bubble) {
	        jQuery.event.trigger(e, null, elem);
	      } else {
	        jQuery.event.dispatch.call(elem, e);
	      }
	      if (e.isDefaultPrevented()) {
	        event.preventDefault();
	      }
	    }
	  };
	  jQuery.removeEvent = function(elem, type, handle) {
	    if (elem.removeEventListener) {
	      elem.removeEventListener(type, handle, false);
	    }
	  };
	  jQuery.Event = function(src, props) {
	    if (!(this instanceof jQuery.Event)) {
	      return new jQuery.Event(src, props);
	    }
	    if (src && src.type) {
	      this.originalEvent = src;
	      this.type = src.type;
	      this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && src.returnValue === false ? returnTrue : returnFalse;
	    } else {
	      this.type = src;
	    }
	    if (props) {
	      jQuery.extend(this, props);
	    }
	    this.timeStamp = src && src.timeStamp || jQuery.now();
	    this[jQuery.expando] = true;
	  };
	  jQuery.Event.prototype = {
	    isDefaultPrevented: returnFalse,
	    isPropagationStopped: returnFalse,
	    isImmediatePropagationStopped: returnFalse,
	    preventDefault: function() {
	      var e = this.originalEvent;
	      this.isDefaultPrevented = returnTrue;
	      if (e && e.preventDefault) {
	        e.preventDefault();
	      }
	    },
	    stopPropagation: function() {
	      var e = this.originalEvent;
	      this.isPropagationStopped = returnTrue;
	      if (e && e.stopPropagation) {
	        e.stopPropagation();
	      }
	    },
	    stopImmediatePropagation: function() {
	      var e = this.originalEvent;
	      this.isImmediatePropagationStopped = returnTrue;
	      if (e && e.stopImmediatePropagation) {
	        e.stopImmediatePropagation();
	      }
	      this.stopPropagation();
	    }
	  };
	  jQuery.each({
	    mouseenter: "mouseover",
	    mouseleave: "mouseout",
	    pointerenter: "pointerover",
	    pointerleave: "pointerout"
	  }, function(orig, fix) {
	    jQuery.event.special[orig] = {
	      delegateType: fix,
	      bindType: fix,
	      handle: function(event) {
	        var ret,
	            target = this,
	            related = event.relatedTarget,
	            handleObj = event.handleObj;
	        if (!related || (related !== target && !jQuery.contains(target, related))) {
	          event.type = handleObj.origType;
	          ret = handleObj.handler.apply(this, arguments);
	          event.type = fix;
	        }
	        return ret;
	      }
	    };
	  });
	  if (!support.focusinBubbles) {
	    jQuery.each({
	      focus: "focusin",
	      blur: "focusout"
	    }, function(orig, fix) {
	      var handler = function(event) {
	        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
	      };
	      jQuery.event.special[fix] = {
	        setup: function() {
	          var doc = this.ownerDocument || this,
	              attaches = data_priv.access(doc, fix);
	          if (!attaches) {
	            doc.addEventListener(orig, handler, true);
	          }
	          data_priv.access(doc, fix, (attaches || 0) + 1);
	        },
	        teardown: function() {
	          var doc = this.ownerDocument || this,
	              attaches = data_priv.access(doc, fix) - 1;
	          if (!attaches) {
	            doc.removeEventListener(orig, handler, true);
	            data_priv.remove(doc, fix);
	          } else {
	            data_priv.access(doc, fix, attaches);
	          }
	        }
	      };
	    });
	  }
	  jQuery.fn.extend({
	    on: function(types, selector, data, fn, one) {
	      var origFn,
	          type;
	      if (typeof types === "object") {
	        if (typeof selector !== "string") {
	          data = data || selector;
	          selector = undefined;
	        }
	        for (type in types) {
	          this.on(type, selector, data, types[type], one);
	        }
	        return this;
	      }
	      if (data == null && fn == null) {
	        fn = selector;
	        data = selector = undefined;
	      } else if (fn == null) {
	        if (typeof selector === "string") {
	          fn = data;
	          data = undefined;
	        } else {
	          fn = data;
	          data = selector;
	          selector = undefined;
	        }
	      }
	      if (fn === false) {
	        fn = returnFalse;
	      } else if (!fn) {
	        return this;
	      }
	      if (one === 1) {
	        origFn = fn;
	        fn = function(event) {
	          jQuery().off(event);
	          return origFn.apply(this, arguments);
	        };
	        fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
	      }
	      return this.each(function() {
	        jQuery.event.add(this, types, fn, data, selector);
	      });
	    },
	    one: function(types, selector, data, fn) {
	      return this.on(types, selector, data, fn, 1);
	    },
	    off: function(types, selector, fn) {
	      var handleObj,
	          type;
	      if (types && types.preventDefault && types.handleObj) {
	        handleObj = types.handleObj;
	        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
	        return this;
	      }
	      if (typeof types === "object") {
	        for (type in types) {
	          this.off(type, selector, types[type]);
	        }
	        return this;
	      }
	      if (selector === false || typeof selector === "function") {
	        fn = selector;
	        selector = undefined;
	      }
	      if (fn === false) {
	        fn = returnFalse;
	      }
	      return this.each(function() {
	        jQuery.event.remove(this, types, fn, selector);
	      });
	    },
	    trigger: function(type, data) {
	      return this.each(function() {
	        jQuery.event.trigger(type, data, this);
	      });
	    },
	    triggerHandler: function(type, data) {
	      var elem = this[0];
	      if (elem) {
	        return jQuery.event.trigger(type, data, elem, true);
	      }
	    }
	  });
	  var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	      rtagName = /<([\w:]+)/,
	      rhtml = /<|&#?\w+;/,
	      rnoInnerhtml = /<(?:script|style|link)/i,
	      rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	      rscriptType = /^$|\/(?:java|ecma)script/i,
	      rscriptTypeMasked = /^true\/(.*)/,
	      rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
	      wrapMap = {
	        option: [1, "<select multiple='multiple'>", "</select>"],
	        thead: [1, "<table>", "</table>"],
	        col: [2, "<table><colgroup>", "</colgroup></table>"],
	        tr: [2, "<table><tbody>", "</tbody></table>"],
	        td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
	        _default: [0, "", ""]
	      };
	  wrapMap.optgroup = wrapMap.option;
	  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	  wrapMap.th = wrapMap.td;
	  function manipulationTarget(elem, content) {
	    return jQuery.nodeName(elem, "table") && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
	  }
	  function disableScript(elem) {
	    elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
	    return elem;
	  }
	  function restoreScript(elem) {
	    var match = rscriptTypeMasked.exec(elem.type);
	    if (match) {
	      elem.type = match[1];
	    } else {
	      elem.removeAttribute("type");
	    }
	    return elem;
	  }
	  function setGlobalEval(elems, refElements) {
	    var i = 0,
	        l = elems.length;
	    for (; i < l; i++) {
	      data_priv.set(elems[i], "globalEval", !refElements || data_priv.get(refElements[i], "globalEval"));
	    }
	  }
	  function cloneCopyEvent(src, dest) {
	    var i,
	        l,
	        type,
	        pdataOld,
	        pdataCur,
	        udataOld,
	        udataCur,
	        events;
	    if (dest.nodeType !== 1) {
	      return;
	    }
	    if (data_priv.hasData(src)) {
	      pdataOld = data_priv.access(src);
	      pdataCur = data_priv.set(dest, pdataOld);
	      events = pdataOld.events;
	      if (events) {
	        delete pdataCur.handle;
	        pdataCur.events = {};
	        for (type in events) {
	          for (i = 0, l = events[type].length; i < l; i++) {
	            jQuery.event.add(dest, type, events[type][i]);
	          }
	        }
	      }
	    }
	    if (data_user.hasData(src)) {
	      udataOld = data_user.access(src);
	      udataCur = jQuery.extend({}, udataOld);
	      data_user.set(dest, udataCur);
	    }
	  }
	  function getAll(context, tag) {
	    var ret = context.getElementsByTagName ? context.getElementsByTagName(tag || "*") : context.querySelectorAll ? context.querySelectorAll(tag || "*") : [];
	    return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret;
	  }
	  function fixInput(src, dest) {
	    var nodeName = dest.nodeName.toLowerCase();
	    if (nodeName === "input" && rcheckableType.test(src.type)) {
	      dest.checked = src.checked;
	    } else if (nodeName === "input" || nodeName === "textarea") {
	      dest.defaultValue = src.defaultValue;
	    }
	  }
	  jQuery.extend({
	    clone: function(elem, dataAndEvents, deepDataAndEvents) {
	      var i,
	          l,
	          srcElements,
	          destElements,
	          clone = elem.cloneNode(true),
	          inPage = jQuery.contains(elem.ownerDocument, elem);
	      if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
	        destElements = getAll(clone);
	        srcElements = getAll(elem);
	        for (i = 0, l = srcElements.length; i < l; i++) {
	          fixInput(srcElements[i], destElements[i]);
	        }
	      }
	      if (dataAndEvents) {
	        if (deepDataAndEvents) {
	          srcElements = srcElements || getAll(elem);
	          destElements = destElements || getAll(clone);
	          for (i = 0, l = srcElements.length; i < l; i++) {
	            cloneCopyEvent(srcElements[i], destElements[i]);
	          }
	        } else {
	          cloneCopyEvent(elem, clone);
	        }
	      }
	      destElements = getAll(clone, "script");
	      if (destElements.length > 0) {
	        setGlobalEval(destElements, !inPage && getAll(elem, "script"));
	      }
	      return clone;
	    },
	    buildFragment: function(elems, context, scripts, selection) {
	      var elem,
	          tmp,
	          tag,
	          wrap,
	          contains,
	          j,
	          fragment = context.createDocumentFragment(),
	          nodes = [],
	          i = 0,
	          l = elems.length;
	      for (; i < l; i++) {
	        elem = elems[i];
	        if (elem || elem === 0) {
	          if (jQuery.type(elem) === "object") {
	            jQuery.merge(nodes, elem.nodeType ? [elem] : elem);
	          } else if (!rhtml.test(elem)) {
	            nodes.push(context.createTextNode(elem));
	          } else {
	            tmp = tmp || fragment.appendChild(context.createElement("div"));
	            tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
	            wrap = wrapMap[tag] || wrapMap._default;
	            tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];
	            j = wrap[0];
	            while (j--) {
	              tmp = tmp.lastChild;
	            }
	            jQuery.merge(nodes, tmp.childNodes);
	            tmp = fragment.firstChild;
	            tmp.textContent = "";
	          }
	        }
	      }
	      fragment.textContent = "";
	      i = 0;
	      while ((elem = nodes[i++])) {
	        if (selection && jQuery.inArray(elem, selection) !== -1) {
	          continue;
	        }
	        contains = jQuery.contains(elem.ownerDocument, elem);
	        tmp = getAll(fragment.appendChild(elem), "script");
	        if (contains) {
	          setGlobalEval(tmp);
	        }
	        if (scripts) {
	          j = 0;
	          while ((elem = tmp[j++])) {
	            if (rscriptType.test(elem.type || "")) {
	              scripts.push(elem);
	            }
	          }
	        }
	      }
	      return fragment;
	    },
	    cleanData: function(elems) {
	      var data,
	          elem,
	          type,
	          key,
	          special = jQuery.event.special,
	          i = 0;
	      for (; (elem = elems[i]) !== undefined; i++) {
	        if (jQuery.acceptData(elem)) {
	          key = elem[data_priv.expando];
	          if (key && (data = data_priv.cache[key])) {
	            if (data.events) {
	              for (type in data.events) {
	                if (special[type]) {
	                  jQuery.event.remove(elem, type);
	                } else {
	                  jQuery.removeEvent(elem, type, data.handle);
	                }
	              }
	            }
	            if (data_priv.cache[key]) {
	              delete data_priv.cache[key];
	            }
	          }
	        }
	        delete data_user.cache[elem[data_user.expando]];
	      }
	    }
	  });
	  jQuery.fn.extend({
	    text: function(value) {
	      return access(this, function(value) {
	        return value === undefined ? jQuery.text(this) : this.empty().each(function() {
	          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
	            this.textContent = value;
	          }
	        });
	      }, null, value, arguments.length);
	    },
	    append: function() {
	      return this.domManip(arguments, function(elem) {
	        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
	          var target = manipulationTarget(this, elem);
	          target.appendChild(elem);
	        }
	      });
	    },
	    prepend: function() {
	      return this.domManip(arguments, function(elem) {
	        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
	          var target = manipulationTarget(this, elem);
	          target.insertBefore(elem, target.firstChild);
	        }
	      });
	    },
	    before: function() {
	      return this.domManip(arguments, function(elem) {
	        if (this.parentNode) {
	          this.parentNode.insertBefore(elem, this);
	        }
	      });
	    },
	    after: function() {
	      return this.domManip(arguments, function(elem) {
	        if (this.parentNode) {
	          this.parentNode.insertBefore(elem, this.nextSibling);
	        }
	      });
	    },
	    remove: function(selector, keepData) {
	      var elem,
	          elems = selector ? jQuery.filter(selector, this) : this,
	          i = 0;
	      for (; (elem = elems[i]) != null; i++) {
	        if (!keepData && elem.nodeType === 1) {
	          jQuery.cleanData(getAll(elem));
	        }
	        if (elem.parentNode) {
	          if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
	            setGlobalEval(getAll(elem, "script"));
	          }
	          elem.parentNode.removeChild(elem);
	        }
	      }
	      return this;
	    },
	    empty: function() {
	      var elem,
	          i = 0;
	      for (; (elem = this[i]) != null; i++) {
	        if (elem.nodeType === 1) {
	          jQuery.cleanData(getAll(elem, false));
	          elem.textContent = "";
	        }
	      }
	      return this;
	    },
	    clone: function(dataAndEvents, deepDataAndEvents) {
	      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
	      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
	      return this.map(function() {
	        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
	      });
	    },
	    html: function(value) {
	      return access(this, function(value) {
	        var elem = this[0] || {},
	            i = 0,
	            l = this.length;
	        if (value === undefined && elem.nodeType === 1) {
	          return elem.innerHTML;
	        }
	        if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
	          value = value.replace(rxhtmlTag, "<$1></$2>");
	          try {
	            for (; i < l; i++) {
	              elem = this[i] || {};
	              if (elem.nodeType === 1) {
	                jQuery.cleanData(getAll(elem, false));
	                elem.innerHTML = value;
	              }
	            }
	            elem = 0;
	          } catch (e) {}
	        }
	        if (elem) {
	          this.empty().append(value);
	        }
	      }, null, value, arguments.length);
	    },
	    replaceWith: function() {
	      var arg = arguments[0];
	      this.domManip(arguments, function(elem) {
	        arg = this.parentNode;
	        jQuery.cleanData(getAll(this));
	        if (arg) {
	          arg.replaceChild(elem, this);
	        }
	      });
	      return arg && (arg.length || arg.nodeType) ? this : this.remove();
	    },
	    detach: function(selector) {
	      return this.remove(selector, true);
	    },
	    domManip: function(args, callback) {
	      args = concat.apply([], args);
	      var fragment,
	          first,
	          scripts,
	          hasScripts,
	          node,
	          doc,
	          i = 0,
	          l = this.length,
	          set = this,
	          iNoClone = l - 1,
	          value = args[0],
	          isFunction = jQuery.isFunction(value);
	      if (isFunction || (l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value))) {
	        return this.each(function(index) {
	          var self = set.eq(index);
	          if (isFunction) {
	            args[0] = value.call(this, index, self.html());
	          }
	          self.domManip(args, callback);
	        });
	      }
	      if (l) {
	        fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);
	        first = fragment.firstChild;
	        if (fragment.childNodes.length === 1) {
	          fragment = first;
	        }
	        if (first) {
	          scripts = jQuery.map(getAll(fragment, "script"), disableScript);
	          hasScripts = scripts.length;
	          for (; i < l; i++) {
	            node = fragment;
	            if (i !== iNoClone) {
	              node = jQuery.clone(node, true, true);
	              if (hasScripts) {
	                jQuery.merge(scripts, getAll(node, "script"));
	              }
	            }
	            callback.call(this[i], node, i);
	          }
	          if (hasScripts) {
	            doc = scripts[scripts.length - 1].ownerDocument;
	            jQuery.map(scripts, restoreScript);
	            for (i = 0; i < hasScripts; i++) {
	              node = scripts[i];
	              if (rscriptType.test(node.type || "") && !data_priv.access(node, "globalEval") && jQuery.contains(doc, node)) {
	                if (node.src) {
	                  if (jQuery._evalUrl) {
	                    jQuery._evalUrl(node.src);
	                  }
	                } else {
	                  jQuery.globalEval(node.textContent.replace(rcleanScript, ""));
	                }
	              }
	            }
	          }
	        }
	      }
	      return this;
	    }
	  });
	  jQuery.each({
	    appendTo: "append",
	    prependTo: "prepend",
	    insertBefore: "before",
	    insertAfter: "after",
	    replaceAll: "replaceWith"
	  }, function(name, original) {
	    jQuery.fn[name] = function(selector) {
	      var elems,
	          ret = [],
	          insert = jQuery(selector),
	          last = insert.length - 1,
	          i = 0;
	      for (; i <= last; i++) {
	        elems = i === last ? this : this.clone(true);
	        jQuery(insert[i])[original](elems);
	        push.apply(ret, elems.get());
	      }
	      return this.pushStack(ret);
	    };
	  });
	  var iframe,
	      elemdisplay = {};
	  function actualDisplay(name, doc) {
	    var style,
	        elem = jQuery(doc.createElement(name)).appendTo(doc.body),
	        display = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ? style.display : jQuery.css(elem[0], "display");
	    elem.detach();
	    return display;
	  }
	  function defaultDisplay(nodeName) {
	    var doc = document,
	        display = elemdisplay[nodeName];
	    if (!display) {
	      display = actualDisplay(nodeName, doc);
	      if (display === "none" || !display) {
	        iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement);
	        doc = iframe[0].contentDocument;
	        doc.write();
	        doc.close();
	        display = actualDisplay(nodeName, doc);
	        iframe.detach();
	      }
	      elemdisplay[nodeName] = display;
	    }
	    return display;
	  }
	  var rmargin = (/^margin/);
	  var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
	  var getStyles = function(elem) {
	    return elem.ownerDocument.defaultView.getComputedStyle(elem, null);
	  };
	  function curCSS(elem, name, computed) {
	    var width,
	        minWidth,
	        maxWidth,
	        ret,
	        style = elem.style;
	    computed = computed || getStyles(elem);
	    if (computed) {
	      ret = computed.getPropertyValue(name) || computed[name];
	    }
	    if (computed) {
	      if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
	        ret = jQuery.style(elem, name);
	      }
	      if (rnumnonpx.test(ret) && rmargin.test(name)) {
	        width = style.width;
	        minWidth = style.minWidth;
	        maxWidth = style.maxWidth;
	        style.minWidth = style.maxWidth = style.width = ret;
	        ret = computed.width;
	        style.width = width;
	        style.minWidth = minWidth;
	        style.maxWidth = maxWidth;
	      }
	    }
	    return ret !== undefined ? ret + "" : ret;
	  }
	  function addGetHookIf(conditionFn, hookFn) {
	    return {get: function() {
	        if (conditionFn()) {
	          delete this.get;
	          return;
	        }
	        return (this.get = hookFn).apply(this, arguments);
	      }};
	  }
	  (function() {
	    var pixelPositionVal,
	        boxSizingReliableVal,
	        docElem = document.documentElement,
	        container = document.createElement("div"),
	        div = document.createElement("div");
	    if (!div.style) {
	      return;
	    }
	    div.style.backgroundClip = "content-box";
	    div.cloneNode(true).style.backgroundClip = "";
	    support.clearCloneStyle = div.style.backgroundClip === "content-box";
	    container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" + "position:absolute";
	    container.appendChild(div);
	    function computePixelPositionAndBoxSizingReliable() {
	      div.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" + "box-sizing:border-box;display:block;margin-top:1%;top:1%;" + "border:1px;padding:1px;width:4px;position:absolute";
	      div.innerHTML = "";
	      docElem.appendChild(container);
	      var divStyle = window.getComputedStyle(div, null);
	      pixelPositionVal = divStyle.top !== "1%";
	      boxSizingReliableVal = divStyle.width === "4px";
	      docElem.removeChild(container);
	    }
	    if (window.getComputedStyle) {
	      jQuery.extend(support, {
	        pixelPosition: function() {
	          computePixelPositionAndBoxSizingReliable();
	          return pixelPositionVal;
	        },
	        boxSizingReliable: function() {
	          if (boxSizingReliableVal == null) {
	            computePixelPositionAndBoxSizingReliable();
	          }
	          return boxSizingReliableVal;
	        },
	        reliableMarginRight: function() {
	          var ret,
	              marginDiv = div.appendChild(document.createElement("div"));
	          marginDiv.style.cssText = div.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + "box-sizing:content-box;display:block;margin:0;border:0;padding:0";
	          marginDiv.style.marginRight = marginDiv.style.width = "0";
	          div.style.width = "1px";
	          docElem.appendChild(container);
	          ret = !parseFloat(window.getComputedStyle(marginDiv, null).marginRight);
	          docElem.removeChild(container);
	          return ret;
	        }
	      });
	    }
	  })();
	  jQuery.swap = function(elem, options, callback, args) {
	    var ret,
	        name,
	        old = {};
	    for (name in options) {
	      old[name] = elem.style[name];
	      elem.style[name] = options[name];
	    }
	    ret = callback.apply(elem, args || []);
	    for (name in options) {
	      elem.style[name] = old[name];
	    }
	    return ret;
	  };
	  var rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	      rnumsplit = new RegExp("^(" + pnum + ")(.*)$", "i"),
	      rrelNum = new RegExp("^([+-])=(" + pnum + ")", "i"),
	      cssShow = {
	        position: "absolute",
	        visibility: "hidden",
	        display: "block"
	      },
	      cssNormalTransform = {
	        letterSpacing: "0",
	        fontWeight: "400"
	      },
	      cssPrefixes = ["Webkit", "O", "Moz", "ms"];
	  function vendorPropName(style, name) {
	    if (name in style) {
	      return name;
	    }
	    var capName = name[0].toUpperCase() + name.slice(1),
	        origName = name,
	        i = cssPrefixes.length;
	    while (i--) {
	      name = cssPrefixes[i] + capName;
	      if (name in style) {
	        return name;
	      }
	    }
	    return origName;
	  }
	  function setPositiveNumber(elem, value, subtract) {
	    var matches = rnumsplit.exec(value);
	    return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value;
	  }
	  function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
	    var i = extra === (isBorderBox ? "border" : "content") ? 4 : name === "width" ? 1 : 0,
	        val = 0;
	    for (; i < 4; i += 2) {
	      if (extra === "margin") {
	        val += jQuery.css(elem, extra + cssExpand[i], true, styles);
	      }
	      if (isBorderBox) {
	        if (extra === "content") {
	          val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
	        }
	        if (extra !== "margin") {
	          val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
	        }
	      } else {
	        val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);
	        if (extra !== "padding") {
	          val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
	        }
	      }
	    }
	    return val;
	  }
	  function getWidthOrHeight(elem, name, extra) {
	    var valueIsBorderBox = true,
	        val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
	        styles = getStyles(elem),
	        isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";
	    if (val <= 0 || val == null) {
	      val = curCSS(elem, name, styles);
	      if (val < 0 || val == null) {
	        val = elem.style[name];
	      }
	      if (rnumnonpx.test(val)) {
	        return val;
	      }
	      valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);
	      val = parseFloat(val) || 0;
	    }
	    return (val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles)) + "px";
	  }
	  function showHide(elements, show) {
	    var display,
	        elem,
	        hidden,
	        values = [],
	        index = 0,
	        length = elements.length;
	    for (; index < length; index++) {
	      elem = elements[index];
	      if (!elem.style) {
	        continue;
	      }
	      values[index] = data_priv.get(elem, "olddisplay");
	      display = elem.style.display;
	      if (show) {
	        if (!values[index] && display === "none") {
	          elem.style.display = "";
	        }
	        if (elem.style.display === "" && isHidden(elem)) {
	          values[index] = data_priv.access(elem, "olddisplay", defaultDisplay(elem.nodeName));
	        }
	      } else {
	        hidden = isHidden(elem);
	        if (display !== "none" || !hidden) {
	          data_priv.set(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
	        }
	      }
	    }
	    for (index = 0; index < length; index++) {
	      elem = elements[index];
	      if (!elem.style) {
	        continue;
	      }
	      if (!show || elem.style.display === "none" || elem.style.display === "") {
	        elem.style.display = show ? values[index] || "" : "none";
	      }
	    }
	    return elements;
	  }
	  jQuery.extend({
	    cssHooks: {opacity: {get: function(elem, computed) {
	          if (computed) {
	            var ret = curCSS(elem, "opacity");
	            return ret === "" ? "1" : ret;
	          }
	        }}},
	    cssNumber: {
	      "columnCount": true,
	      "fillOpacity": true,
	      "flexGrow": true,
	      "flexShrink": true,
	      "fontWeight": true,
	      "lineHeight": true,
	      "opacity": true,
	      "order": true,
	      "orphans": true,
	      "widows": true,
	      "zIndex": true,
	      "zoom": true
	    },
	    cssProps: {"float": "cssFloat"},
	    style: function(elem, name, value, extra) {
	      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
	        return;
	      }
	      var ret,
	          type,
	          hooks,
	          origName = jQuery.camelCase(name),
	          style = elem.style;
	      name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
	      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
	      if (value !== undefined) {
	        type = typeof value;
	        if (type === "string" && (ret = rrelNum.exec(value))) {
	          value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
	          type = "number";
	        }
	        if (value == null || value !== value) {
	          return;
	        }
	        if (type === "number" && !jQuery.cssNumber[origName]) {
	          value += "px";
	        }
	        if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
	          style[name] = "inherit";
	        }
	        if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
	          style[name] = value;
	        }
	      } else {
	        if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
	          return ret;
	        }
	        return style[name];
	      }
	    },
	    css: function(elem, name, extra, styles) {
	      var val,
	          num,
	          hooks,
	          origName = jQuery.camelCase(name);
	      name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
	      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
	      if (hooks && "get" in hooks) {
	        val = hooks.get(elem, true, extra);
	      }
	      if (val === undefined) {
	        val = curCSS(elem, name, styles);
	      }
	      if (val === "normal" && name in cssNormalTransform) {
	        val = cssNormalTransform[name];
	      }
	      if (extra === "" || extra) {
	        num = parseFloat(val);
	        return extra === true || jQuery.isNumeric(num) ? num || 0 : val;
	      }
	      return val;
	    }
	  });
	  jQuery.each(["height", "width"], function(i, name) {
	    jQuery.cssHooks[name] = {
	      get: function(elem, computed, extra) {
	        if (computed) {
	          return rdisplayswap.test(jQuery.css(elem, "display")) && elem.offsetWidth === 0 ? jQuery.swap(elem, cssShow, function() {
	            return getWidthOrHeight(elem, name, extra);
	          }) : getWidthOrHeight(elem, name, extra);
	        }
	      },
	      set: function(elem, value, extra) {
	        var styles = extra && getStyles(elem);
	        return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles) : 0);
	      }
	    };
	  });
	  jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function(elem, computed) {
	    if (computed) {
	      return jQuery.swap(elem, {"display": "inline-block"}, curCSS, [elem, "marginRight"]);
	    }
	  });
	  jQuery.each({
	    margin: "",
	    padding: "",
	    border: "Width"
	  }, function(prefix, suffix) {
	    jQuery.cssHooks[prefix + suffix] = {expand: function(value) {
	        var i = 0,
	            expanded = {},
	            parts = typeof value === "string" ? value.split(" ") : [value];
	        for (; i < 4; i++) {
	          expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
	        }
	        return expanded;
	      }};
	    if (!rmargin.test(prefix)) {
	      jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
	    }
	  });
	  jQuery.fn.extend({
	    css: function(name, value) {
	      return access(this, function(elem, name, value) {
	        var styles,
	            len,
	            map = {},
	            i = 0;
	        if (jQuery.isArray(name)) {
	          styles = getStyles(elem);
	          len = name.length;
	          for (; i < len; i++) {
	            map[name[i]] = jQuery.css(elem, name[i], false, styles);
	          }
	          return map;
	        }
	        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
	      }, name, value, arguments.length > 1);
	    },
	    show: function() {
	      return showHide(this, true);
	    },
	    hide: function() {
	      return showHide(this);
	    },
	    toggle: function(state) {
	      if (typeof state === "boolean") {
	        return state ? this.show() : this.hide();
	      }
	      return this.each(function() {
	        if (isHidden(this)) {
	          jQuery(this).show();
	        } else {
	          jQuery(this).hide();
	        }
	      });
	    }
	  });
	  function Tween(elem, options, prop, end, easing) {
	    return new Tween.prototype.init(elem, options, prop, end, easing);
	  }
	  jQuery.Tween = Tween;
	  Tween.prototype = {
	    constructor: Tween,
	    init: function(elem, options, prop, end, easing, unit) {
	      this.elem = elem;
	      this.prop = prop;
	      this.easing = easing || "swing";
	      this.options = options;
	      this.start = this.now = this.cur();
	      this.end = end;
	      this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
	    },
	    cur: function() {
	      var hooks = Tween.propHooks[this.prop];
	      return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
	    },
	    run: function(percent) {
	      var eased,
	          hooks = Tween.propHooks[this.prop];
	      if (this.options.duration) {
	        this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
	      } else {
	        this.pos = eased = percent;
	      }
	      this.now = (this.end - this.start) * eased + this.start;
	      if (this.options.step) {
	        this.options.step.call(this.elem, this.now, this);
	      }
	      if (hooks && hooks.set) {
	        hooks.set(this);
	      } else {
	        Tween.propHooks._default.set(this);
	      }
	      return this;
	    }
	  };
	  Tween.prototype.init.prototype = Tween.prototype;
	  Tween.propHooks = {_default: {
	      get: function(tween) {
	        var result;
	        if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
	          return tween.elem[tween.prop];
	        }
	        result = jQuery.css(tween.elem, tween.prop, "");
	        return !result || result === "auto" ? 0 : result;
	      },
	      set: function(tween) {
	        if (jQuery.fx.step[tween.prop]) {
	          jQuery.fx.step[tween.prop](tween);
	        } else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
	          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
	        } else {
	          tween.elem[tween.prop] = tween.now;
	        }
	      }
	    }};
	  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {set: function(tween) {
	      if (tween.elem.nodeType && tween.elem.parentNode) {
	        tween.elem[tween.prop] = tween.now;
	      }
	    }};
	  jQuery.easing = {
	    linear: function(p) {
	      return p;
	    },
	    swing: function(p) {
	      return 0.5 - Math.cos(p * Math.PI) / 2;
	    }
	  };
	  jQuery.fx = Tween.prototype.init;
	  jQuery.fx.step = {};
	  var fxNow,
	      timerId,
	      rfxtypes = /^(?:toggle|show|hide)$/,
	      rfxnum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i"),
	      rrun = /queueHooks$/,
	      animationPrefilters = [defaultPrefilter],
	      tweeners = {"*": [function(prop, value) {
	          var tween = this.createTween(prop, value),
	              target = tween.cur(),
	              parts = rfxnum.exec(value),
	              unit = parts && parts[3] || (jQuery.cssNumber[prop] ? "" : "px"),
	              start = (jQuery.cssNumber[prop] || unit !== "px" && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)),
	              scale = 1,
	              maxIterations = 20;
	          if (start && start[3] !== unit) {
	            unit = unit || start[3];
	            parts = parts || [];
	            start = +target || 1;
	            do {
	              scale = scale || ".5";
	              start = start / scale;
	              jQuery.style(tween.elem, prop, start + unit);
	            } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
	          }
	          if (parts) {
	            start = tween.start = +start || +target || 0;
	            tween.unit = unit;
	            tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];
	          }
	          return tween;
	        }]};
	  function createFxNow() {
	    setTimeout(function() {
	      fxNow = undefined;
	    });
	    return (fxNow = jQuery.now());
	  }
	  function genFx(type, includeWidth) {
	    var which,
	        i = 0,
	        attrs = {height: type};
	    includeWidth = includeWidth ? 1 : 0;
	    for (; i < 4; i += 2 - includeWidth) {
	      which = cssExpand[i];
	      attrs["margin" + which] = attrs["padding" + which] = type;
	    }
	    if (includeWidth) {
	      attrs.opacity = attrs.width = type;
	    }
	    return attrs;
	  }
	  function createTween(value, prop, animation) {
	    var tween,
	        collection = (tweeners[prop] || []).concat(tweeners["*"]),
	        index = 0,
	        length = collection.length;
	    for (; index < length; index++) {
	      if ((tween = collection[index].call(animation, prop, value))) {
	        return tween;
	      }
	    }
	  }
	  function defaultPrefilter(elem, props, opts) {
	    var prop,
	        value,
	        toggle,
	        tween,
	        hooks,
	        oldfire,
	        display,
	        checkDisplay,
	        anim = this,
	        orig = {},
	        style = elem.style,
	        hidden = elem.nodeType && isHidden(elem),
	        dataShow = data_priv.get(elem, "fxshow");
	    if (!opts.queue) {
	      hooks = jQuery._queueHooks(elem, "fx");
	      if (hooks.unqueued == null) {
	        hooks.unqueued = 0;
	        oldfire = hooks.empty.fire;
	        hooks.empty.fire = function() {
	          if (!hooks.unqueued) {
	            oldfire();
	          }
	        };
	      }
	      hooks.unqueued++;
	      anim.always(function() {
	        anim.always(function() {
	          hooks.unqueued--;
	          if (!jQuery.queue(elem, "fx").length) {
	            hooks.empty.fire();
	          }
	        });
	      });
	    }
	    if (elem.nodeType === 1 && ("height" in props || "width" in props)) {
	      opts.overflow = [style.overflow, style.overflowX, style.overflowY];
	      display = jQuery.css(elem, "display");
	      checkDisplay = display === "none" ? data_priv.get(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;
	      if (checkDisplay === "inline" && jQuery.css(elem, "float") === "none") {
	        style.display = "inline-block";
	      }
	    }
	    if (opts.overflow) {
	      style.overflow = "hidden";
	      anim.always(function() {
	        style.overflow = opts.overflow[0];
	        style.overflowX = opts.overflow[1];
	        style.overflowY = opts.overflow[2];
	      });
	    }
	    for (prop in props) {
	      value = props[prop];
	      if (rfxtypes.exec(value)) {
	        delete props[prop];
	        toggle = toggle || value === "toggle";
	        if (value === (hidden ? "hide" : "show")) {
	          if (value === "show" && dataShow && dataShow[prop] !== undefined) {
	            hidden = true;
	          } else {
	            continue;
	          }
	        }
	        orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
	      } else {
	        display = undefined;
	      }
	    }
	    if (!jQuery.isEmptyObject(orig)) {
	      if (dataShow) {
	        if ("hidden" in dataShow) {
	          hidden = dataShow.hidden;
	        }
	      } else {
	        dataShow = data_priv.access(elem, "fxshow", {});
	      }
	      if (toggle) {
	        dataShow.hidden = !hidden;
	      }
	      if (hidden) {
	        jQuery(elem).show();
	      } else {
	        anim.done(function() {
	          jQuery(elem).hide();
	        });
	      }
	      anim.done(function() {
	        var prop;
	        data_priv.remove(elem, "fxshow");
	        for (prop in orig) {
	          jQuery.style(elem, prop, orig[prop]);
	        }
	      });
	      for (prop in orig) {
	        tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
	        if (!(prop in dataShow)) {
	          dataShow[prop] = tween.start;
	          if (hidden) {
	            tween.end = tween.start;
	            tween.start = prop === "width" || prop === "height" ? 1 : 0;
	          }
	        }
	      }
	    } else if ((display === "none" ? defaultDisplay(elem.nodeName) : display) === "inline") {
	      style.display = display;
	    }
	  }
	  function propFilter(props, specialEasing) {
	    var index,
	        name,
	        easing,
	        value,
	        hooks;
	    for (index in props) {
	      name = jQuery.camelCase(index);
	      easing = specialEasing[name];
	      value = props[index];
	      if (jQuery.isArray(value)) {
	        easing = value[1];
	        value = props[index] = value[0];
	      }
	      if (index !== name) {
	        props[name] = value;
	        delete props[index];
	      }
	      hooks = jQuery.cssHooks[name];
	      if (hooks && "expand" in hooks) {
	        value = hooks.expand(value);
	        delete props[name];
	        for (index in value) {
	          if (!(index in props)) {
	            props[index] = value[index];
	            specialEasing[index] = easing;
	          }
	        }
	      } else {
	        specialEasing[name] = easing;
	      }
	    }
	  }
	  function Animation(elem, properties, options) {
	    var result,
	        stopped,
	        index = 0,
	        length = animationPrefilters.length,
	        deferred = jQuery.Deferred().always(function() {
	          delete tick.elem;
	        }),
	        tick = function() {
	          if (stopped) {
	            return false;
	          }
	          var currentTime = fxNow || createFxNow(),
	              remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
	              temp = remaining / animation.duration || 0,
	              percent = 1 - temp,
	              index = 0,
	              length = animation.tweens.length;
	          for (; index < length; index++) {
	            animation.tweens[index].run(percent);
	          }
	          deferred.notifyWith(elem, [animation, percent, remaining]);
	          if (percent < 1 && length) {
	            return remaining;
	          } else {
	            deferred.resolveWith(elem, [animation]);
	            return false;
	          }
	        },
	        animation = deferred.promise({
	          elem: elem,
	          props: jQuery.extend({}, properties),
	          opts: jQuery.extend(true, {specialEasing: {}}, options),
	          originalProperties: properties,
	          originalOptions: options,
	          startTime: fxNow || createFxNow(),
	          duration: options.duration,
	          tweens: [],
	          createTween: function(prop, end) {
	            var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
	            animation.tweens.push(tween);
	            return tween;
	          },
	          stop: function(gotoEnd) {
	            var index = 0,
	                length = gotoEnd ? animation.tweens.length : 0;
	            if (stopped) {
	              return this;
	            }
	            stopped = true;
	            for (; index < length; index++) {
	              animation.tweens[index].run(1);
	            }
	            if (gotoEnd) {
	              deferred.resolveWith(elem, [animation, gotoEnd]);
	            } else {
	              deferred.rejectWith(elem, [animation, gotoEnd]);
	            }
	            return this;
	          }
	        }),
	        props = animation.props;
	    propFilter(props, animation.opts.specialEasing);
	    for (; index < length; index++) {
	      result = animationPrefilters[index].call(animation, elem, props, animation.opts);
	      if (result) {
	        return result;
	      }
	    }
	    jQuery.map(props, createTween, animation);
	    if (jQuery.isFunction(animation.opts.start)) {
	      animation.opts.start.call(elem, animation);
	    }
	    jQuery.fx.timer(jQuery.extend(tick, {
	      elem: elem,
	      anim: animation,
	      queue: animation.opts.queue
	    }));
	    return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
	  }
	  jQuery.Animation = jQuery.extend(Animation, {
	    tweener: function(props, callback) {
	      if (jQuery.isFunction(props)) {
	        callback = props;
	        props = ["*"];
	      } else {
	        props = props.split(" ");
	      }
	      var prop,
	          index = 0,
	          length = props.length;
	      for (; index < length; index++) {
	        prop = props[index];
	        tweeners[prop] = tweeners[prop] || [];
	        tweeners[prop].unshift(callback);
	      }
	    },
	    prefilter: function(callback, prepend) {
	      if (prepend) {
	        animationPrefilters.unshift(callback);
	      } else {
	        animationPrefilters.push(callback);
	      }
	    }
	  });
	  jQuery.speed = function(speed, easing, fn) {
	    var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
	      complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
	      duration: speed,
	      easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
	    };
	    opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
	    if (opt.queue == null || opt.queue === true) {
	      opt.queue = "fx";
	    }
	    opt.old = opt.complete;
	    opt.complete = function() {
	      if (jQuery.isFunction(opt.old)) {
	        opt.old.call(this);
	      }
	      if (opt.queue) {
	        jQuery.dequeue(this, opt.queue);
	      }
	    };
	    return opt;
	  };
	  jQuery.fn.extend({
	    fadeTo: function(speed, to, easing, callback) {
	      return this.filter(isHidden).css("opacity", 0).show().end().animate({opacity: to}, speed, easing, callback);
	    },
	    animate: function(prop, speed, easing, callback) {
	      var empty = jQuery.isEmptyObject(prop),
	          optall = jQuery.speed(speed, easing, callback),
	          doAnimation = function() {
	            var anim = Animation(this, jQuery.extend({}, prop), optall);
	            if (empty || data_priv.get(this, "finish")) {
	              anim.stop(true);
	            }
	          };
	      doAnimation.finish = doAnimation;
	      return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
	    },
	    stop: function(type, clearQueue, gotoEnd) {
	      var stopQueue = function(hooks) {
	        var stop = hooks.stop;
	        delete hooks.stop;
	        stop(gotoEnd);
	      };
	      if (typeof type !== "string") {
	        gotoEnd = clearQueue;
	        clearQueue = type;
	        type = undefined;
	      }
	      if (clearQueue && type !== false) {
	        this.queue(type || "fx", []);
	      }
	      return this.each(function() {
	        var dequeue = true,
	            index = type != null && type + "queueHooks",
	            timers = jQuery.timers,
	            data = data_priv.get(this);
	        if (index) {
	          if (data[index] && data[index].stop) {
	            stopQueue(data[index]);
	          }
	        } else {
	          for (index in data) {
	            if (data[index] && data[index].stop && rrun.test(index)) {
	              stopQueue(data[index]);
	            }
	          }
	        }
	        for (index = timers.length; index--; ) {
	          if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
	            timers[index].anim.stop(gotoEnd);
	            dequeue = false;
	            timers.splice(index, 1);
	          }
	        }
	        if (dequeue || !gotoEnd) {
	          jQuery.dequeue(this, type);
	        }
	      });
	    },
	    finish: function(type) {
	      if (type !== false) {
	        type = type || "fx";
	      }
	      return this.each(function() {
	        var index,
	            data = data_priv.get(this),
	            queue = data[type + "queue"],
	            hooks = data[type + "queueHooks"],
	            timers = jQuery.timers,
	            length = queue ? queue.length : 0;
	        data.finish = true;
	        jQuery.queue(this, type, []);
	        if (hooks && hooks.stop) {
	          hooks.stop.call(this, true);
	        }
	        for (index = timers.length; index--; ) {
	          if (timers[index].elem === this && timers[index].queue === type) {
	            timers[index].anim.stop(true);
	            timers.splice(index, 1);
	          }
	        }
	        for (index = 0; index < length; index++) {
	          if (queue[index] && queue[index].finish) {
	            queue[index].finish.call(this);
	          }
	        }
	        delete data.finish;
	      });
	    }
	  });
	  jQuery.each(["toggle", "show", "hide"], function(i, name) {
	    var cssFn = jQuery.fn[name];
	    jQuery.fn[name] = function(speed, easing, callback) {
	      return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
	    };
	  });
	  jQuery.each({
	    slideDown: genFx("show"),
	    slideUp: genFx("hide"),
	    slideToggle: genFx("toggle"),
	    fadeIn: {opacity: "show"},
	    fadeOut: {opacity: "hide"},
	    fadeToggle: {opacity: "toggle"}
	  }, function(name, props) {
	    jQuery.fn[name] = function(speed, easing, callback) {
	      return this.animate(props, speed, easing, callback);
	    };
	  });
	  jQuery.timers = [];
	  jQuery.fx.tick = function() {
	    var timer,
	        i = 0,
	        timers = jQuery.timers;
	    fxNow = jQuery.now();
	    for (; i < timers.length; i++) {
	      timer = timers[i];
	      if (!timer() && timers[i] === timer) {
	        timers.splice(i--, 1);
	      }
	    }
	    if (!timers.length) {
	      jQuery.fx.stop();
	    }
	    fxNow = undefined;
	  };
	  jQuery.fx.timer = function(timer) {
	    jQuery.timers.push(timer);
	    if (timer()) {
	      jQuery.fx.start();
	    } else {
	      jQuery.timers.pop();
	    }
	  };
	  jQuery.fx.interval = 13;
	  jQuery.fx.start = function() {
	    if (!timerId) {
	      timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
	    }
	  };
	  jQuery.fx.stop = function() {
	    clearInterval(timerId);
	    timerId = null;
	  };
	  jQuery.fx.speeds = {
	    slow: 600,
	    fast: 200,
	    _default: 400
	  };
	  jQuery.fn.delay = function(time, type) {
	    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
	    type = type || "fx";
	    return this.queue(type, function(next, hooks) {
	      var timeout = setTimeout(next, time);
	      hooks.stop = function() {
	        clearTimeout(timeout);
	      };
	    });
	  };
	  (function() {
	    var input = document.createElement("input"),
	        select = document.createElement("select"),
	        opt = select.appendChild(document.createElement("option"));
	    input.type = "checkbox";
	    support.checkOn = input.value !== "";
	    support.optSelected = opt.selected;
	    select.disabled = true;
	    support.optDisabled = !opt.disabled;
	    input = document.createElement("input");
	    input.value = "t";
	    input.type = "radio";
	    support.radioValue = input.value === "t";
	  })();
	  var nodeHook,
	      boolHook,
	      attrHandle = jQuery.expr.attrHandle;
	  jQuery.fn.extend({
	    attr: function(name, value) {
	      return access(this, jQuery.attr, name, value, arguments.length > 1);
	    },
	    removeAttr: function(name) {
	      return this.each(function() {
	        jQuery.removeAttr(this, name);
	      });
	    }
	  });
	  jQuery.extend({
	    attr: function(elem, name, value) {
	      var hooks,
	          ret,
	          nType = elem.nodeType;
	      if (!elem || nType === 3 || nType === 8 || nType === 2) {
	        return;
	      }
	      if (typeof elem.getAttribute === strundefined) {
	        return jQuery.prop(elem, name, value);
	      }
	      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
	        name = name.toLowerCase();
	        hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
	      }
	      if (value !== undefined) {
	        if (value === null) {
	          jQuery.removeAttr(elem, name);
	        } else if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
	          return ret;
	        } else {
	          elem.setAttribute(name, value + "");
	          return value;
	        }
	      } else if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
	        return ret;
	      } else {
	        ret = jQuery.find.attr(elem, name);
	        return ret == null ? undefined : ret;
	      }
	    },
	    removeAttr: function(elem, value) {
	      var name,
	          propName,
	          i = 0,
	          attrNames = value && value.match(rnotwhite);
	      if (attrNames && elem.nodeType === 1) {
	        while ((name = attrNames[i++])) {
	          propName = jQuery.propFix[name] || name;
	          if (jQuery.expr.match.bool.test(name)) {
	            elem[propName] = false;
	          }
	          elem.removeAttribute(name);
	        }
	      }
	    },
	    attrHooks: {type: {set: function(elem, value) {
	          if (!support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
	            var val = elem.value;
	            elem.setAttribute("type", value);
	            if (val) {
	              elem.value = val;
	            }
	            return value;
	          }
	        }}}
	  });
	  boolHook = {set: function(elem, value, name) {
	      if (value === false) {
	        jQuery.removeAttr(elem, name);
	      } else {
	        elem.setAttribute(name, name);
	      }
	      return name;
	    }};
	  jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(i, name) {
	    var getter = attrHandle[name] || jQuery.find.attr;
	    attrHandle[name] = function(elem, name, isXML) {
	      var ret,
	          handle;
	      if (!isXML) {
	        handle = attrHandle[name];
	        attrHandle[name] = ret;
	        ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
	        attrHandle[name] = handle;
	      }
	      return ret;
	    };
	  });
	  var rfocusable = /^(?:input|select|textarea|button)$/i;
	  jQuery.fn.extend({
	    prop: function(name, value) {
	      return access(this, jQuery.prop, name, value, arguments.length > 1);
	    },
	    removeProp: function(name) {
	      return this.each(function() {
	        delete this[jQuery.propFix[name] || name];
	      });
	    }
	  });
	  jQuery.extend({
	    propFix: {
	      "for": "htmlFor",
	      "class": "className"
	    },
	    prop: function(elem, name, value) {
	      var ret,
	          hooks,
	          notxml,
	          nType = elem.nodeType;
	      if (!elem || nType === 3 || nType === 8 || nType === 2) {
	        return;
	      }
	      notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
	      if (notxml) {
	        name = jQuery.propFix[name] || name;
	        hooks = jQuery.propHooks[name];
	      }
	      if (value !== undefined) {
	        return hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : (elem[name] = value);
	      } else {
	        return hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name];
	      }
	    },
	    propHooks: {tabIndex: {get: function(elem) {
	          return elem.hasAttribute("tabindex") || rfocusable.test(elem.nodeName) || elem.href ? elem.tabIndex : -1;
	        }}}
	  });
	  if (!support.optSelected) {
	    jQuery.propHooks.selected = {get: function(elem) {
	        var parent = elem.parentNode;
	        if (parent && parent.parentNode) {
	          parent.parentNode.selectedIndex;
	        }
	        return null;
	      }};
	  }
	  jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function() {
	    jQuery.propFix[this.toLowerCase()] = this;
	  });
	  var rclass = /[\t\r\n\f]/g;
	  jQuery.fn.extend({
	    addClass: function(value) {
	      var classes,
	          elem,
	          cur,
	          clazz,
	          j,
	          finalValue,
	          proceed = typeof value === "string" && value,
	          i = 0,
	          len = this.length;
	      if (jQuery.isFunction(value)) {
	        return this.each(function(j) {
	          jQuery(this).addClass(value.call(this, j, this.className));
	        });
	      }
	      if (proceed) {
	        classes = (value || "").match(rnotwhite) || [];
	        for (; i < len; i++) {
	          elem = this[i];
	          cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : " ");
	          if (cur) {
	            j = 0;
	            while ((clazz = classes[j++])) {
	              if (cur.indexOf(" " + clazz + " ") < 0) {
	                cur += clazz + " ";
	              }
	            }
	            finalValue = jQuery.trim(cur);
	            if (elem.className !== finalValue) {
	              elem.className = finalValue;
	            }
	          }
	        }
	      }
	      return this;
	    },
	    removeClass: function(value) {
	      var classes,
	          elem,
	          cur,
	          clazz,
	          j,
	          finalValue,
	          proceed = arguments.length === 0 || typeof value === "string" && value,
	          i = 0,
	          len = this.length;
	      if (jQuery.isFunction(value)) {
	        return this.each(function(j) {
	          jQuery(this).removeClass(value.call(this, j, this.className));
	        });
	      }
	      if (proceed) {
	        classes = (value || "").match(rnotwhite) || [];
	        for (; i < len; i++) {
	          elem = this[i];
	          cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "");
	          if (cur) {
	            j = 0;
	            while ((clazz = classes[j++])) {
	              while (cur.indexOf(" " + clazz + " ") >= 0) {
	                cur = cur.replace(" " + clazz + " ", " ");
	              }
	            }
	            finalValue = value ? jQuery.trim(cur) : "";
	            if (elem.className !== finalValue) {
	              elem.className = finalValue;
	            }
	          }
	        }
	      }
	      return this;
	    },
	    toggleClass: function(value, stateVal) {
	      var type = typeof value;
	      if (typeof stateVal === "boolean" && type === "string") {
	        return stateVal ? this.addClass(value) : this.removeClass(value);
	      }
	      if (jQuery.isFunction(value)) {
	        return this.each(function(i) {
	          jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
	        });
	      }
	      return this.each(function() {
	        if (type === "string") {
	          var className,
	              i = 0,
	              self = jQuery(this),
	              classNames = value.match(rnotwhite) || [];
	          while ((className = classNames[i++])) {
	            if (self.hasClass(className)) {
	              self.removeClass(className);
	            } else {
	              self.addClass(className);
	            }
	          }
	        } else if (type === strundefined || type === "boolean") {
	          if (this.className) {
	            data_priv.set(this, "__className__", this.className);
	          }
	          this.className = this.className || value === false ? "" : data_priv.get(this, "__className__") || "";
	        }
	      });
	    },
	    hasClass: function(selector) {
	      var className = " " + selector + " ",
	          i = 0,
	          l = this.length;
	      for (; i < l; i++) {
	        if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) {
	          return true;
	        }
	      }
	      return false;
	    }
	  });
	  var rreturn = /\r/g;
	  jQuery.fn.extend({val: function(value) {
	      var hooks,
	          ret,
	          isFunction,
	          elem = this[0];
	      if (!arguments.length) {
	        if (elem) {
	          hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
	          if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
	            return ret;
	          }
	          ret = elem.value;
	          return typeof ret === "string" ? ret.replace(rreturn, "") : ret == null ? "" : ret;
	        }
	        return;
	      }
	      isFunction = jQuery.isFunction(value);
	      return this.each(function(i) {
	        var val;
	        if (this.nodeType !== 1) {
	          return;
	        }
	        if (isFunction) {
	          val = value.call(this, i, jQuery(this).val());
	        } else {
	          val = value;
	        }
	        if (val == null) {
	          val = "";
	        } else if (typeof val === "number") {
	          val += "";
	        } else if (jQuery.isArray(val)) {
	          val = jQuery.map(val, function(value) {
	            return value == null ? "" : value + "";
	          });
	        }
	        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
	        if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
	          this.value = val;
	        }
	      });
	    }});
	  jQuery.extend({valHooks: {
	      option: {get: function(elem) {
	          var val = jQuery.find.attr(elem, "value");
	          return val != null ? val : jQuery.trim(jQuery.text(elem));
	        }},
	      select: {
	        get: function(elem) {
	          var value,
	              option,
	              options = elem.options,
	              index = elem.selectedIndex,
	              one = elem.type === "select-one" || index < 0,
	              values = one ? null : [],
	              max = one ? index + 1 : options.length,
	              i = index < 0 ? max : one ? index : 0;
	          for (; i < max; i++) {
	            option = options[i];
	            if ((option.selected || i === index) && (support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
	              value = jQuery(option).val();
	              if (one) {
	                return value;
	              }
	              values.push(value);
	            }
	          }
	          return values;
	        },
	        set: function(elem, value) {
	          var optionSet,
	              option,
	              options = elem.options,
	              values = jQuery.makeArray(value),
	              i = options.length;
	          while (i--) {
	            option = options[i];
	            if ((option.selected = jQuery.inArray(option.value, values) >= 0)) {
	              optionSet = true;
	            }
	          }
	          if (!optionSet) {
	            elem.selectedIndex = -1;
	          }
	          return values;
	        }
	      }
	    }});
	  jQuery.each(["radio", "checkbox"], function() {
	    jQuery.valHooks[this] = {set: function(elem, value) {
	        if (jQuery.isArray(value)) {
	          return (elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0);
	        }
	      }};
	    if (!support.checkOn) {
	      jQuery.valHooks[this].get = function(elem) {
	        return elem.getAttribute("value") === null ? "on" : elem.value;
	      };
	    }
	  });
	  jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function(i, name) {
	    jQuery.fn[name] = function(data, fn) {
	      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
	    };
	  });
	  jQuery.fn.extend({
	    hover: function(fnOver, fnOut) {
	      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
	    },
	    bind: function(types, data, fn) {
	      return this.on(types, null, data, fn);
	    },
	    unbind: function(types, fn) {
	      return this.off(types, null, fn);
	    },
	    delegate: function(selector, types, data, fn) {
	      return this.on(types, selector, data, fn);
	    },
	    undelegate: function(selector, types, fn) {
	      return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
	    }
	  });
	  var nonce = jQuery.now();
	  var rquery = (/\?/);
	  jQuery.parseJSON = function(data) {
	    return JSON.parse(data + "");
	  };
	  jQuery.parseXML = function(data) {
	    var xml,
	        tmp;
	    if (!data || typeof data !== "string") {
	      return null;
	    }
	    try {
	      tmp = new DOMParser();
	      xml = tmp.parseFromString(data, "text/xml");
	    } catch (e) {
	      xml = undefined;
	    }
	    if (!xml || xml.getElementsByTagName("parsererror").length) {
	      jQuery.error("Invalid XML: " + data);
	    }
	    return xml;
	  };
	  var ajaxLocParts,
	      ajaxLocation,
	      rhash = /#.*$/,
	      rts = /([?&])_=[^&]*/,
	      rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	      rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	      rnoContent = /^(?:GET|HEAD)$/,
	      rprotocol = /^\/\//,
	      rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,
	      prefilters = {},
	      transports = {},
	      allTypes = "*/".concat("*");
	  try {
	    ajaxLocation = location.href;
	  } catch (e) {
	    ajaxLocation = document.createElement("a");
	    ajaxLocation.href = "";
	    ajaxLocation = ajaxLocation.href;
	  }
	  ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];
	  function addToPrefiltersOrTransports(structure) {
	    return function(dataTypeExpression, func) {
	      if (typeof dataTypeExpression !== "string") {
	        func = dataTypeExpression;
	        dataTypeExpression = "*";
	      }
	      var dataType,
	          i = 0,
	          dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];
	      if (jQuery.isFunction(func)) {
	        while ((dataType = dataTypes[i++])) {
	          if (dataType[0] === "+") {
	            dataType = dataType.slice(1) || "*";
	            (structure[dataType] = structure[dataType] || []).unshift(func);
	          } else {
	            (structure[dataType] = structure[dataType] || []).push(func);
	          }
	        }
	      }
	    };
	  }
	  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
	    var inspected = {},
	        seekingTransport = (structure === transports);
	    function inspect(dataType) {
	      var selected;
	      inspected[dataType] = true;
	      jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
	        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
	        if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
	          options.dataTypes.unshift(dataTypeOrTransport);
	          inspect(dataTypeOrTransport);
	          return false;
	        } else if (seekingTransport) {
	          return !(selected = dataTypeOrTransport);
	        }
	      });
	      return selected;
	    }
	    return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
	  }
	  function ajaxExtend(target, src) {
	    var key,
	        deep,
	        flatOptions = jQuery.ajaxSettings.flatOptions || {};
	    for (key in src) {
	      if (src[key] !== undefined) {
	        (flatOptions[key] ? target : (deep || (deep = {})))[key] = src[key];
	      }
	    }
	    if (deep) {
	      jQuery.extend(true, target, deep);
	    }
	    return target;
	  }
	  function ajaxHandleResponses(s, jqXHR, responses) {
	    var ct,
	        type,
	        finalDataType,
	        firstDataType,
	        contents = s.contents,
	        dataTypes = s.dataTypes;
	    while (dataTypes[0] === "*") {
	      dataTypes.shift();
	      if (ct === undefined) {
	        ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
	      }
	    }
	    if (ct) {
	      for (type in contents) {
	        if (contents[type] && contents[type].test(ct)) {
	          dataTypes.unshift(type);
	          break;
	        }
	      }
	    }
	    if (dataTypes[0] in responses) {
	      finalDataType = dataTypes[0];
	    } else {
	      for (type in responses) {
	        if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
	          finalDataType = type;
	          break;
	        }
	        if (!firstDataType) {
	          firstDataType = type;
	        }
	      }
	      finalDataType = finalDataType || firstDataType;
	    }
	    if (finalDataType) {
	      if (finalDataType !== dataTypes[0]) {
	        dataTypes.unshift(finalDataType);
	      }
	      return responses[finalDataType];
	    }
	  }
	  function ajaxConvert(s, response, jqXHR, isSuccess) {
	    var conv2,
	        current,
	        conv,
	        tmp,
	        prev,
	        converters = {},
	        dataTypes = s.dataTypes.slice();
	    if (dataTypes[1]) {
	      for (conv in s.converters) {
	        converters[conv.toLowerCase()] = s.converters[conv];
	      }
	    }
	    current = dataTypes.shift();
	    while (current) {
	      if (s.responseFields[current]) {
	        jqXHR[s.responseFields[current]] = response;
	      }
	      if (!prev && isSuccess && s.dataFilter) {
	        response = s.dataFilter(response, s.dataType);
	      }
	      prev = current;
	      current = dataTypes.shift();
	      if (current) {
	        if (current === "*") {
	          current = prev;
	        } else if (prev !== "*" && prev !== current) {
	          conv = converters[prev + " " + current] || converters["* " + current];
	          if (!conv) {
	            for (conv2 in converters) {
	              tmp = conv2.split(" ");
	              if (tmp[1] === current) {
	                conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
	                if (conv) {
	                  if (conv === true) {
	                    conv = converters[conv2];
	                  } else if (converters[conv2] !== true) {
	                    current = tmp[0];
	                    dataTypes.unshift(tmp[1]);
	                  }
	                  break;
	                }
	              }
	            }
	          }
	          if (conv !== true) {
	            if (conv && s["throws"]) {
	              response = conv(response);
	            } else {
	              try {
	                response = conv(response);
	              } catch (e) {
	                return {
	                  state: "parsererror",
	                  error: conv ? e : "No conversion from " + prev + " to " + current
	                };
	              }
	            }
	          }
	        }
	      }
	    }
	    return {
	      state: "success",
	      data: response
	    };
	  }
	  jQuery.extend({
	    active: 0,
	    lastModified: {},
	    etag: {},
	    ajaxSettings: {
	      url: ajaxLocation,
	      type: "GET",
	      isLocal: rlocalProtocol.test(ajaxLocParts[1]),
	      global: true,
	      processData: true,
	      async: true,
	      contentType: "application/x-www-form-urlencoded; charset=UTF-8",
	      accepts: {
	        "*": allTypes,
	        text: "text/plain",
	        html: "text/html",
	        xml: "application/xml, text/xml",
	        json: "application/json, text/javascript"
	      },
	      contents: {
	        xml: /xml/,
	        html: /html/,
	        json: /json/
	      },
	      responseFields: {
	        xml: "responseXML",
	        text: "responseText",
	        json: "responseJSON"
	      },
	      converters: {
	        "* text": String,
	        "text html": true,
	        "text json": jQuery.parseJSON,
	        "text xml": jQuery.parseXML
	      },
	      flatOptions: {
	        url: true,
	        context: true
	      }
	    },
	    ajaxSetup: function(target, settings) {
	      return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
	    },
	    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
	    ajaxTransport: addToPrefiltersOrTransports(transports),
	    ajax: function(url, options) {
	      if (typeof url === "object") {
	        options = url;
	        url = undefined;
	      }
	      options = options || {};
	      var transport,
	          cacheURL,
	          responseHeadersString,
	          responseHeaders,
	          timeoutTimer,
	          parts,
	          fireGlobals,
	          i,
	          s = jQuery.ajaxSetup({}, options),
	          callbackContext = s.context || s,
	          globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
	          deferred = jQuery.Deferred(),
	          completeDeferred = jQuery.Callbacks("once memory"),
	          statusCode = s.statusCode || {},
	          requestHeaders = {},
	          requestHeadersNames = {},
	          state = 0,
	          strAbort = "canceled",
	          jqXHR = {
	            readyState: 0,
	            getResponseHeader: function(key) {
	              var match;
	              if (state === 2) {
	                if (!responseHeaders) {
	                  responseHeaders = {};
	                  while ((match = rheaders.exec(responseHeadersString))) {
	                    responseHeaders[match[1].toLowerCase()] = match[2];
	                  }
	                }
	                match = responseHeaders[key.toLowerCase()];
	              }
	              return match == null ? null : match;
	            },
	            getAllResponseHeaders: function() {
	              return state === 2 ? responseHeadersString : null;
	            },
	            setRequestHeader: function(name, value) {
	              var lname = name.toLowerCase();
	              if (!state) {
	                name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
	                requestHeaders[name] = value;
	              }
	              return this;
	            },
	            overrideMimeType: function(type) {
	              if (!state) {
	                s.mimeType = type;
	              }
	              return this;
	            },
	            statusCode: function(map) {
	              var code;
	              if (map) {
	                if (state < 2) {
	                  for (code in map) {
	                    statusCode[code] = [statusCode[code], map[code]];
	                  }
	                } else {
	                  jqXHR.always(map[jqXHR.status]);
	                }
	              }
	              return this;
	            },
	            abort: function(statusText) {
	              var finalText = statusText || strAbort;
	              if (transport) {
	                transport.abort(finalText);
	              }
	              done(0, finalText);
	              return this;
	            }
	          };
	      deferred.promise(jqXHR).complete = completeDeferred.add;
	      jqXHR.success = jqXHR.done;
	      jqXHR.error = jqXHR.fail;
	      s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");
	      s.type = options.method || options.type || s.method || s.type;
	      s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""];
	      if (s.crossDomain == null) {
	        parts = rurl.exec(s.url.toLowerCase());
	        s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? "80" : "443")) !== (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? "80" : "443"))));
	      }
	      if (s.data && s.processData && typeof s.data !== "string") {
	        s.data = jQuery.param(s.data, s.traditional);
	      }
	      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
	      if (state === 2) {
	        return jqXHR;
	      }
	      fireGlobals = s.global;
	      if (fireGlobals && jQuery.active++ === 0) {
	        jQuery.event.trigger("ajaxStart");
	      }
	      s.type = s.type.toUpperCase();
	      s.hasContent = !rnoContent.test(s.type);
	      cacheURL = s.url;
	      if (!s.hasContent) {
	        if (s.data) {
	          cacheURL = (s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data);
	          delete s.data;
	        }
	        if (s.cache === false) {
	          s.url = rts.test(cacheURL) ? cacheURL.replace(rts, "$1_=" + nonce++) : cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++;
	        }
	      }
	      if (s.ifModified) {
	        if (jQuery.lastModified[cacheURL]) {
	          jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
	        }
	        if (jQuery.etag[cacheURL]) {
	          jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
	        }
	      }
	      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
	        jqXHR.setRequestHeader("Content-Type", s.contentType);
	      }
	      jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
	      for (i in s.headers) {
	        jqXHR.setRequestHeader(i, s.headers[i]);
	      }
	      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
	        return jqXHR.abort();
	      }
	      strAbort = "abort";
	      for (i in {
	        success: 1,
	        error: 1,
	        complete: 1
	      }) {
	        jqXHR[i](s[i]);
	      }
	      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
	      if (!transport) {
	        done(-1, "No Transport");
	      } else {
	        jqXHR.readyState = 1;
	        if (fireGlobals) {
	          globalEventContext.trigger("ajaxSend", [jqXHR, s]);
	        }
	        if (s.async && s.timeout > 0) {
	          timeoutTimer = setTimeout(function() {
	            jqXHR.abort("timeout");
	          }, s.timeout);
	        }
	        try {
	          state = 1;
	          transport.send(requestHeaders, done);
	        } catch (e) {
	          if (state < 2) {
	            done(-1, e);
	          } else {
	            throw e;
	          }
	        }
	      }
	      function done(status, nativeStatusText, responses, headers) {
	        var isSuccess,
	            success,
	            error,
	            response,
	            modified,
	            statusText = nativeStatusText;
	        if (state === 2) {
	          return;
	        }
	        state = 2;
	        if (timeoutTimer) {
	          clearTimeout(timeoutTimer);
	        }
	        transport = undefined;
	        responseHeadersString = headers || "";
	        jqXHR.readyState = status > 0 ? 4 : 0;
	        isSuccess = status >= 200 && status < 300 || status === 304;
	        if (responses) {
	          response = ajaxHandleResponses(s, jqXHR, responses);
	        }
	        response = ajaxConvert(s, response, jqXHR, isSuccess);
	        if (isSuccess) {
	          if (s.ifModified) {
	            modified = jqXHR.getResponseHeader("Last-Modified");
	            if (modified) {
	              jQuery.lastModified[cacheURL] = modified;
	            }
	            modified = jqXHR.getResponseHeader("etag");
	            if (modified) {
	              jQuery.etag[cacheURL] = modified;
	            }
	          }
	          if (status === 204 || s.type === "HEAD") {
	            statusText = "nocontent";
	          } else if (status === 304) {
	            statusText = "notmodified";
	          } else {
	            statusText = response.state;
	            success = response.data;
	            error = response.error;
	            isSuccess = !error;
	          }
	        } else {
	          error = statusText;
	          if (status || !statusText) {
	            statusText = "error";
	            if (status < 0) {
	              status = 0;
	            }
	          }
	        }
	        jqXHR.status = status;
	        jqXHR.statusText = (nativeStatusText || statusText) + "";
	        if (isSuccess) {
	          deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
	        } else {
	          deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
	        }
	        jqXHR.statusCode(statusCode);
	        statusCode = undefined;
	        if (fireGlobals) {
	          globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
	        }
	        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
	        if (fireGlobals) {
	          globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
	          if (!(--jQuery.active)) {
	            jQuery.event.trigger("ajaxStop");
	          }
	        }
	      }
	      return jqXHR;
	    },
	    getJSON: function(url, data, callback) {
	      return jQuery.get(url, data, callback, "json");
	    },
	    getScript: function(url, callback) {
	      return jQuery.get(url, undefined, callback, "script");
	    }
	  });
	  jQuery.each(["get", "post"], function(i, method) {
	    jQuery[method] = function(url, data, callback, type) {
	      if (jQuery.isFunction(data)) {
	        type = type || callback;
	        callback = data;
	        data = undefined;
	      }
	      return jQuery.ajax({
	        url: url,
	        type: method,
	        dataType: type,
	        data: data,
	        success: callback
	      });
	    };
	  });
	  jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function(i, type) {
	    jQuery.fn[type] = function(fn) {
	      return this.on(type, fn);
	    };
	  });
	  jQuery._evalUrl = function(url) {
	    return jQuery.ajax({
	      url: url,
	      type: "GET",
	      dataType: "script",
	      async: false,
	      global: false,
	      "throws": true
	    });
	  };
	  jQuery.fn.extend({
	    wrapAll: function(html) {
	      var wrap;
	      if (jQuery.isFunction(html)) {
	        return this.each(function(i) {
	          jQuery(this).wrapAll(html.call(this, i));
	        });
	      }
	      if (this[0]) {
	        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
	        if (this[0].parentNode) {
	          wrap.insertBefore(this[0]);
	        }
	        wrap.map(function() {
	          var elem = this;
	          while (elem.firstElementChild) {
	            elem = elem.firstElementChild;
	          }
	          return elem;
	        }).append(this);
	      }
	      return this;
	    },
	    wrapInner: function(html) {
	      if (jQuery.isFunction(html)) {
	        return this.each(function(i) {
	          jQuery(this).wrapInner(html.call(this, i));
	        });
	      }
	      return this.each(function() {
	        var self = jQuery(this),
	            contents = self.contents();
	        if (contents.length) {
	          contents.wrapAll(html);
	        } else {
	          self.append(html);
	        }
	      });
	    },
	    wrap: function(html) {
	      var isFunction = jQuery.isFunction(html);
	      return this.each(function(i) {
	        jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
	      });
	    },
	    unwrap: function() {
	      return this.parent().each(function() {
	        if (!jQuery.nodeName(this, "body")) {
	          jQuery(this).replaceWith(this.childNodes);
	        }
	      }).end();
	    }
	  });
	  jQuery.expr.filters.hidden = function(elem) {
	    return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
	  };
	  jQuery.expr.filters.visible = function(elem) {
	    return !jQuery.expr.filters.hidden(elem);
	  };
	  var r20 = /%20/g,
	      rbracket = /\[\]$/,
	      rCRLF = /\r?\n/g,
	      rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	      rsubmittable = /^(?:input|select|textarea|keygen)/i;
	  function buildParams(prefix, obj, traditional, add) {
	    var name;
	    if (jQuery.isArray(obj)) {
	      jQuery.each(obj, function(i, v) {
	        if (traditional || rbracket.test(prefix)) {
	          add(prefix, v);
	        } else {
	          buildParams(prefix + "[" + (typeof v === "object" ? i : "") + "]", v, traditional, add);
	        }
	      });
	    } else if (!traditional && jQuery.type(obj) === "object") {
	      for (name in obj) {
	        buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
	      }
	    } else {
	      add(prefix, obj);
	    }
	  }
	  jQuery.param = function(a, traditional) {
	    var prefix,
	        s = [],
	        add = function(key, value) {
	          value = jQuery.isFunction(value) ? value() : (value == null ? "" : value);
	          s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
	        };
	    if (traditional === undefined) {
	      traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	    }
	    if (jQuery.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {
	      jQuery.each(a, function() {
	        add(this.name, this.value);
	      });
	    } else {
	      for (prefix in a) {
	        buildParams(prefix, a[prefix], traditional, add);
	      }
	    }
	    return s.join("&").replace(r20, "+");
	  };
	  jQuery.fn.extend({
	    serialize: function() {
	      return jQuery.param(this.serializeArray());
	    },
	    serializeArray: function() {
	      return this.map(function() {
	        var elements = jQuery.prop(this, "elements");
	        return elements ? jQuery.makeArray(elements) : this;
	      }).filter(function() {
	        var type = this.type;
	        return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
	      }).map(function(i, elem) {
	        var val = jQuery(this).val();
	        return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function(val) {
	          return {
	            name: elem.name,
	            value: val.replace(rCRLF, "\r\n")
	          };
	        }) : {
	          name: elem.name,
	          value: val.replace(rCRLF, "\r\n")
	        };
	      }).get();
	    }
	  });
	  jQuery.ajaxSettings.xhr = function() {
	    try {
	      return new XMLHttpRequest();
	    } catch (e) {}
	  };
	  var xhrId = 0,
	      xhrCallbacks = {},
	      xhrSuccessStatus = {
	        0: 200,
	        1223: 204
	      },
	      xhrSupported = jQuery.ajaxSettings.xhr();
	  if (window.ActiveXObject) {
	    jQuery(window).on("unload", function() {
	      for (var key in xhrCallbacks) {
	        xhrCallbacks[key]();
	      }
	    });
	  }
	  support.cors = !!xhrSupported && ("withCredentials" in xhrSupported);
	  support.ajax = xhrSupported = !!xhrSupported;
	  jQuery.ajaxTransport(function(options) {
	    var callback;
	    if (support.cors || xhrSupported && !options.crossDomain) {
	      return {
	        send: function(headers, complete) {
	          var i,
	              xhr = options.xhr(),
	              id = ++xhrId;
	          xhr.open(options.type, options.url, options.async, options.username, options.password);
	          if (options.xhrFields) {
	            for (i in options.xhrFields) {
	              xhr[i] = options.xhrFields[i];
	            }
	          }
	          if (options.mimeType && xhr.overrideMimeType) {
	            xhr.overrideMimeType(options.mimeType);
	          }
	          if (!options.crossDomain && !headers["X-Requested-With"]) {
	            headers["X-Requested-With"] = "XMLHttpRequest";
	          }
	          for (i in headers) {
	            xhr.setRequestHeader(i, headers[i]);
	          }
	          callback = function(type) {
	            return function() {
	              if (callback) {
	                delete xhrCallbacks[id];
	                callback = xhr.onload = xhr.onerror = null;
	                if (type === "abort") {
	                  xhr.abort();
	                } else if (type === "error") {
	                  complete(xhr.status, xhr.statusText);
	                } else {
	                  complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, typeof xhr.responseText === "string" ? {text: xhr.responseText} : undefined, xhr.getAllResponseHeaders());
	                }
	              }
	            };
	          };
	          xhr.onload = callback();
	          xhr.onerror = callback("error");
	          callback = xhrCallbacks[id] = callback("abort");
	          try {
	            xhr.send(options.hasContent && options.data || null);
	          } catch (e) {
	            if (callback) {
	              throw e;
	            }
	          }
	        },
	        abort: function() {
	          if (callback) {
	            callback();
	          }
	        }
	      };
	    }
	  });
	  jQuery.ajaxSetup({
	    accepts: {script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},
	    contents: {script: /(?:java|ecma)script/},
	    converters: {"text script": function(text) {
	        jQuery.globalEval(text);
	        return text;
	      }}
	  });
	  jQuery.ajaxPrefilter("script", function(s) {
	    if (s.cache === undefined) {
	      s.cache = false;
	    }
	    if (s.crossDomain) {
	      s.type = "GET";
	    }
	  });
	  jQuery.ajaxTransport("script", function(s) {
	    if (s.crossDomain) {
	      var script,
	          callback;
	      return {
	        send: function(_, complete) {
	          script = jQuery("<script>").prop({
	            async: true,
	            charset: s.scriptCharset,
	            src: s.url
	          }).on("load error", callback = function(evt) {
	            script.remove();
	            callback = null;
	            if (evt) {
	              complete(evt.type === "error" ? 404 : 200, evt.type);
	            }
	          });
	          document.head.appendChild(script[0]);
	        },
	        abort: function() {
	          if (callback) {
	            callback();
	          }
	        }
	      };
	    }
	  });
	  var oldCallbacks = [],
	      rjsonp = /(=)\?(?=&|$)|\?\?/;
	  jQuery.ajaxSetup({
	    jsonp: "callback",
	    jsonpCallback: function() {
	      var callback = oldCallbacks.pop() || (jQuery.expando + "_" + (nonce++));
	      this[callback] = true;
	      return callback;
	    }
	  });
	  jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
	    var callbackName,
	        overwritten,
	        responseContainer,
	        jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data");
	    if (jsonProp || s.dataTypes[0] === "jsonp") {
	      callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
	      if (jsonProp) {
	        s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
	      } else if (s.jsonp !== false) {
	        s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
	      }
	      s.converters["script json"] = function() {
	        if (!responseContainer) {
	          jQuery.error(callbackName + " was not called");
	        }
	        return responseContainer[0];
	      };
	      s.dataTypes[0] = "json";
	      overwritten = window[callbackName];
	      window[callbackName] = function() {
	        responseContainer = arguments;
	      };
	      jqXHR.always(function() {
	        window[callbackName] = overwritten;
	        if (s[callbackName]) {
	          s.jsonpCallback = originalSettings.jsonpCallback;
	          oldCallbacks.push(callbackName);
	        }
	        if (responseContainer && jQuery.isFunction(overwritten)) {
	          overwritten(responseContainer[0]);
	        }
	        responseContainer = overwritten = undefined;
	      });
	      return "script";
	    }
	  });
	  jQuery.parseHTML = function(data, context, keepScripts) {
	    if (!data || typeof data !== "string") {
	      return null;
	    }
	    if (typeof context === "boolean") {
	      keepScripts = context;
	      context = false;
	    }
	    context = context || document;
	    var parsed = rsingleTag.exec(data),
	        scripts = !keepScripts && [];
	    if (parsed) {
	      return [context.createElement(parsed[1])];
	    }
	    parsed = jQuery.buildFragment([data], context, scripts);
	    if (scripts && scripts.length) {
	      jQuery(scripts).remove();
	    }
	    return jQuery.merge([], parsed.childNodes);
	  };
	  var _load = jQuery.fn.load;
	  jQuery.fn.load = function(url, params, callback) {
	    if (typeof url !== "string" && _load) {
	      return _load.apply(this, arguments);
	    }
	    var selector,
	        type,
	        response,
	        self = this,
	        off = url.indexOf(" ");
	    if (off >= 0) {
	      selector = jQuery.trim(url.slice(off));
	      url = url.slice(0, off);
	    }
	    if (jQuery.isFunction(params)) {
	      callback = params;
	      params = undefined;
	    } else if (params && typeof params === "object") {
	      type = "POST";
	    }
	    if (self.length > 0) {
	      jQuery.ajax({
	        url: url,
	        type: type,
	        dataType: "html",
	        data: params
	      }).done(function(responseText) {
	        response = arguments;
	        self.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : responseText);
	      }).complete(callback && function(jqXHR, status) {
	        self.each(callback, response || [jqXHR.responseText, status, jqXHR]);
	      });
	    }
	    return this;
	  };
	  jQuery.expr.filters.animated = function(elem) {
	    return jQuery.grep(jQuery.timers, function(fn) {
	      return elem === fn.elem;
	    }).length;
	  };
	  var docElem = window.document.documentElement;
	  function getWindow(elem) {
	    return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
	  }
	  jQuery.offset = {setOffset: function(elem, options, i) {
	      var curPosition,
	          curLeft,
	          curCSSTop,
	          curTop,
	          curOffset,
	          curCSSLeft,
	          calculatePosition,
	          position = jQuery.css(elem, "position"),
	          curElem = jQuery(elem),
	          props = {};
	      if (position === "static") {
	        elem.style.position = "relative";
	      }
	      curOffset = curElem.offset();
	      curCSSTop = jQuery.css(elem, "top");
	      curCSSLeft = jQuery.css(elem, "left");
	      calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;
	      if (calculatePosition) {
	        curPosition = curElem.position();
	        curTop = curPosition.top;
	        curLeft = curPosition.left;
	      } else {
	        curTop = parseFloat(curCSSTop) || 0;
	        curLeft = parseFloat(curCSSLeft) || 0;
	      }
	      if (jQuery.isFunction(options)) {
	        options = options.call(elem, i, curOffset);
	      }
	      if (options.top != null) {
	        props.top = (options.top - curOffset.top) + curTop;
	      }
	      if (options.left != null) {
	        props.left = (options.left - curOffset.left) + curLeft;
	      }
	      if ("using" in options) {
	        options.using.call(elem, props);
	      } else {
	        curElem.css(props);
	      }
	    }};
	  jQuery.fn.extend({
	    offset: function(options) {
	      if (arguments.length) {
	        return options === undefined ? this : this.each(function(i) {
	          jQuery.offset.setOffset(this, options, i);
	        });
	      }
	      var docElem,
	          win,
	          elem = this[0],
	          box = {
	            top: 0,
	            left: 0
	          },
	          doc = elem && elem.ownerDocument;
	      if (!doc) {
	        return;
	      }
	      docElem = doc.documentElement;
	      if (!jQuery.contains(docElem, elem)) {
	        return box;
	      }
	      if (typeof elem.getBoundingClientRect !== strundefined) {
	        box = elem.getBoundingClientRect();
	      }
	      win = getWindow(doc);
	      return {
	        top: box.top + win.pageYOffset - docElem.clientTop,
	        left: box.left + win.pageXOffset - docElem.clientLeft
	      };
	    },
	    position: function() {
	      if (!this[0]) {
	        return;
	      }
	      var offsetParent,
	          offset,
	          elem = this[0],
	          parentOffset = {
	            top: 0,
	            left: 0
	          };
	      if (jQuery.css(elem, "position") === "fixed") {
	        offset = elem.getBoundingClientRect();
	      } else {
	        offsetParent = this.offsetParent();
	        offset = this.offset();
	        if (!jQuery.nodeName(offsetParent[0], "html")) {
	          parentOffset = offsetParent.offset();
	        }
	        parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
	        parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
	      }
	      return {
	        top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
	        left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
	      };
	    },
	    offsetParent: function() {
	      return this.map(function() {
	        var offsetParent = this.offsetParent || docElem;
	        while (offsetParent && (!jQuery.nodeName(offsetParent, "html") && jQuery.css(offsetParent, "position") === "static")) {
	          offsetParent = offsetParent.offsetParent;
	        }
	        return offsetParent || docElem;
	      });
	    }
	  });
	  jQuery.each({
	    scrollLeft: "pageXOffset",
	    scrollTop: "pageYOffset"
	  }, function(method, prop) {
	    var top = "pageYOffset" === prop;
	    jQuery.fn[method] = function(val) {
	      return access(this, function(elem, method, val) {
	        var win = getWindow(elem);
	        if (val === undefined) {
	          return win ? win[prop] : elem[method];
	        }
	        if (win) {
	          win.scrollTo(!top ? val : window.pageXOffset, top ? val : window.pageYOffset);
	        } else {
	          elem[method] = val;
	        }
	      }, method, val, arguments.length, null);
	    };
	  });
	  jQuery.each(["top", "left"], function(i, prop) {
	    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function(elem, computed) {
	      if (computed) {
	        computed = curCSS(elem, prop);
	        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
	      }
	    });
	  });
	  jQuery.each({
	    Height: "height",
	    Width: "width"
	  }, function(name, type) {
	    jQuery.each({
	      padding: "inner" + name,
	      content: type,
	      "": "outer" + name
	    }, function(defaultExtra, funcName) {
	      jQuery.fn[funcName] = function(margin, value) {
	        var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
	            extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
	        return access(this, function(elem, type, value) {
	          var doc;
	          if (jQuery.isWindow(elem)) {
	            return elem.document.documentElement["client" + name];
	          }
	          if (elem.nodeType === 9) {
	            doc = elem.documentElement;
	            return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
	          }
	          return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra);
	        }, type, chainable ? margin : undefined, chainable, null);
	      };
	    });
	  });
	  jQuery.fn.size = function() {
	    return this.length;
	  };
	  jQuery.fn.andSelf = jQuery.fn.addBack;
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return jQuery;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  var _jQuery = window.jQuery,
	      _$ = window.$;
	  jQuery.noConflict = function(deep) {
	    if (window.$ === jQuery) {
	      window.$ = _$;
	    }
	    if (deep && window.jQuery === jQuery) {
	      window.jQuery = _jQuery;
	    }
	    return jQuery;
	  };
	  if (typeof noGlobal === strundefined) {
	    window.jQuery = window.$ = jQuery;
	  }
	  return jQuery;
	}));
	
	//# sourceMappingURL=<compileOutput>


/***/ },

/***/ 3:
/***/ function(module, exports, __webpack_require__) {

	var require;var require;/* WEBPACK VAR INJECTION */(function(process) {!function(e) {
	  if (true)
	    module.exports = e();
	  else if ("function" == typeof define && define.amd)
	    define([], e);
	  else {
	    var f;
	    "undefined" != typeof window ? f = window : "undefined" != typeof global ? f = global : "undefined" != typeof self && (f = self), f.Promise = e();
	  }
	}(function() {
	  var define,
	      module,
	      exports;
	  return (function e(t, n, r) {
	    function s(o, u) {
	      if (!n[o]) {
	        if (!t[o]) {
	          var a = typeof require == "function" && require;
	          if (!u && a)
	            return require(o, !0);
	          if (i)
	            return i(o, !0);
	          throw new Error("Cannot find module '" + o + "'");
	        }
	        var f = n[o] = {exports: {}};
	        t[o][0].call(f.exports, function(e) {
	          var n = t[o][1][e];
	          return s(n ? n : e);
	        }, f, f.exports, e, t, n, r);
	      }
	      return n[o].exports;
	    }
	    var i = typeof require == "function" && require;
	    for (var o = 0; o < r.length; o++)
	      s(r[o]);
	    return s;
	  })({
	    1: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise) {
	        var SomePromiseArray = Promise._SomePromiseArray;
	        function Promise$_Any(promises) {
	          var ret = new SomePromiseArray(promises);
	          var promise = ret.promise();
	          if (promise.isRejected()) {
	            return promise;
	          }
	          ret.setHowMany(1);
	          ret.setUnwrap();
	          ret.init();
	          return promise;
	        }
	        Promise.any = function Promise$Any(promises) {
	          return Promise$_Any(promises);
	        };
	        Promise.prototype.any = function Promise$any() {
	          return Promise$_Any(this);
	        };
	      };
	    }, {}],
	    2: [function(_dereq_, module, exports) {
	      "use strict";
	      var schedule = _dereq_("./schedule.js");
	      var Queue = _dereq_("./queue.js");
	      var errorObj = _dereq_("./util.js").errorObj;
	      var tryCatch1 = _dereq_("./util.js").tryCatch1;
	      var _process = typeof process !== "undefined" ? process : void 0;
	      function Async() {
	        this._isTickUsed = false;
	        this._schedule = schedule;
	        this._length = 0;
	        this._lateBuffer = new Queue(16);
	        this._functionBuffer = new Queue(65536);
	        var self = this;
	        this.consumeFunctionBuffer = function Async$consumeFunctionBuffer() {
	          self._consumeFunctionBuffer();
	        };
	      }
	      Async.prototype.haveItemsQueued = function Async$haveItemsQueued() {
	        return this._length > 0;
	      };
	      Async.prototype.invokeLater = function Async$invokeLater(fn, receiver, arg) {
	        if (_process !== void 0 && _process.domain != null && !fn.domain) {
	          fn = _process.domain.bind(fn);
	        }
	        this._lateBuffer.push(fn, receiver, arg);
	        this._queueTick();
	      };
	      Async.prototype.invoke = function Async$invoke(fn, receiver, arg) {
	        if (_process !== void 0 && _process.domain != null && !fn.domain) {
	          fn = _process.domain.bind(fn);
	        }
	        var functionBuffer = this._functionBuffer;
	        functionBuffer.push(fn, receiver, arg);
	        this._length = functionBuffer.length();
	        this._queueTick();
	      };
	      Async.prototype._consumeFunctionBuffer = function Async$_consumeFunctionBuffer() {
	        var functionBuffer = this._functionBuffer;
	        while (functionBuffer.length() > 0) {
	          var fn = functionBuffer.shift();
	          var receiver = functionBuffer.shift();
	          var arg = functionBuffer.shift();
	          fn.call(receiver, arg);
	        }
	        this._reset();
	        this._consumeLateBuffer();
	      };
	      Async.prototype._consumeLateBuffer = function Async$_consumeLateBuffer() {
	        var buffer = this._lateBuffer;
	        while (buffer.length() > 0) {
	          var fn = buffer.shift();
	          var receiver = buffer.shift();
	          var arg = buffer.shift();
	          var res = tryCatch1(fn, receiver, arg);
	          if (res === errorObj) {
	            this._queueTick();
	            if (fn.domain != null) {
	              fn.domain.emit("error", res.e);
	            } else {
	              throw res.e;
	            }
	          }
	        }
	      };
	      Async.prototype._queueTick = function Async$_queue() {
	        if (!this._isTickUsed) {
	          this._schedule(this.consumeFunctionBuffer);
	          this._isTickUsed = true;
	        }
	      };
	      Async.prototype._reset = function Async$_reset() {
	        this._isTickUsed = false;
	        this._length = 0;
	      };
	      module.exports = new Async();
	    }, {
	      "./queue.js": 25,
	      "./schedule.js": 28,
	      "./util.js": 35
	    }],
	    3: [function(_dereq_, module, exports) {
	      "use strict";
	      var Promise = _dereq_("./promise.js")();
	      module.exports = Promise;
	    }, {"./promise.js": 20}],
	    4: [function(_dereq_, module, exports) {
	      "use strict";
	      var cr = Object.create;
	      if (cr) {
	        var callerCache = cr(null);
	        var getterCache = cr(null);
	        callerCache[" size"] = getterCache[" size"] = 0;
	      }
	      module.exports = function(Promise) {
	        var util = _dereq_("./util.js");
	        var canEvaluate = util.canEvaluate;
	        var isIdentifier = util.isIdentifier;
	        function makeMethodCaller(methodName) {
	          return new Function("obj", "                                             \n\
	        'use strict'                                                         \n\
	        var len = this.length;                                               \n\
	        switch(len) {                                                        \n\
	            case 1: return obj.methodName(this[0]);                          \n\
	            case 2: return obj.methodName(this[0], this[1]);                 \n\
	            case 3: return obj.methodName(this[0], this[1], this[2]);        \n\
	            case 0: return obj.methodName();                                 \n\
	            default: return obj.methodName.apply(obj, this);                 \n\
	        }                                                                    \n\
	        ".replace(/methodName/g, methodName));
	        }
	        function makeGetter(propertyName) {
	          return new Function("obj", "                                             \n\
	        'use strict';                                                        \n\
	        return obj.propertyName;                                             \n\
	        ".replace("propertyName", propertyName));
	        }
	        function getCompiled(name, compiler, cache) {
	          var ret = cache[name];
	          if (typeof ret !== "function") {
	            if (!isIdentifier(name)) {
	              return null;
	            }
	            ret = compiler(name);
	            cache[name] = ret;
	            cache[" size"]++;
	            if (cache[" size"] > 512) {
	              var keys = Object.keys(cache);
	              for (var i = 0; i < 256; ++i)
	                delete cache[keys[i]];
	              cache[" size"] = keys.length - 256;
	            }
	          }
	          return ret;
	        }
	        function getMethodCaller(name) {
	          return getCompiled(name, makeMethodCaller, callerCache);
	        }
	        function getGetter(name) {
	          return getCompiled(name, makeGetter, getterCache);
	        }
	        function caller(obj) {
	          return obj[this.pop()].apply(obj, this);
	        }
	        Promise.prototype.call = function Promise$call(methodName) {
	          var $_len = arguments.length;
	          var args = new Array($_len - 1);
	          for (var $_i = 1; $_i < $_len; ++$_i) {
	            args[$_i - 1] = arguments[$_i];
	          }
	          if (canEvaluate) {
	            var maybeCaller = getMethodCaller(methodName);
	            if (maybeCaller !== null) {
	              return this._then(maybeCaller, void 0, void 0, args, void 0);
	            }
	          }
	          args.push(methodName);
	          return this._then(caller, void 0, void 0, args, void 0);
	        };
	        function namedGetter(obj) {
	          return obj[this];
	        }
	        function indexedGetter(obj) {
	          return obj[this];
	        }
	        Promise.prototype.get = function Promise$get(propertyName) {
	          var isIndex = (typeof propertyName === "number");
	          var getter;
	          if (!isIndex) {
	            if (canEvaluate) {
	              var maybeGetter = getGetter(propertyName);
	              getter = maybeGetter !== null ? maybeGetter : namedGetter;
	            } else {
	              getter = namedGetter;
	            }
	          } else {
	            getter = indexedGetter;
	          }
	          return this._then(getter, void 0, void 0, propertyName, void 0);
	        };
	      };
	    }, {"./util.js": 35}],
	    5: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, INTERNAL) {
	        var errors = _dereq_("./errors.js");
	        var canAttach = errors.canAttach;
	        var async = _dereq_("./async.js");
	        var CancellationError = errors.CancellationError;
	        Promise.prototype._cancel = function Promise$_cancel(reason) {
	          if (!this.isCancellable())
	            return this;
	          var parent;
	          var promiseToReject = this;
	          while ((parent = promiseToReject._cancellationParent) !== void 0 && parent.isCancellable()) {
	            promiseToReject = parent;
	          }
	          this._unsetCancellable();
	          promiseToReject._attachExtraTrace(reason);
	          promiseToReject._rejectUnchecked(reason);
	        };
	        Promise.prototype.cancel = function Promise$cancel(reason) {
	          if (!this.isCancellable())
	            return this;
	          reason = reason !== void 0 ? (canAttach(reason) ? reason : new Error(reason + "")) : new CancellationError();
	          async.invokeLater(this._cancel, this, reason);
	          return this;
	        };
	        Promise.prototype.cancellable = function Promise$cancellable() {
	          if (this._cancellable())
	            return this;
	          this._setCancellable();
	          this._cancellationParent = void 0;
	          return this;
	        };
	        Promise.prototype.uncancellable = function Promise$uncancellable() {
	          var ret = new Promise(INTERNAL);
	          ret._propagateFrom(this, 2 | 4);
	          ret._follow(this);
	          ret._unsetCancellable();
	          return ret;
	        };
	        Promise.prototype.fork = function Promise$fork(didFulfill, didReject, didProgress) {
	          var ret = this._then(didFulfill, didReject, didProgress, void 0, void 0);
	          ret._setCancellable();
	          ret._cancellationParent = void 0;
	          return ret;
	        };
	      };
	    }, {
	      "./async.js": 2,
	      "./errors.js": 10
	    }],
	    6: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function() {
	        var inherits = _dereq_("./util.js").inherits;
	        var defineProperty = _dereq_("./es5.js").defineProperty;
	        var rignore = new RegExp("\\b(?:[a-zA-Z0-9.]+\\$_\\w+|" + "tryCatch(?:1|2|3|4|Apply)|new \\w*PromiseArray|" + "\\w*PromiseArray\\.\\w*PromiseArray|" + "setTimeout|CatchFilter\\$_\\w+|makeNodePromisified|processImmediate|" + "process._tickCallback|nextTick|Async\\$\\w+)\\b");
	        var rtraceline = null;
	        var formatStack = null;
	        function formatNonError(obj) {
	          var str;
	          if (typeof obj === "function") {
	            str = "[function " + (obj.name || "anonymous") + "]";
	          } else {
	            str = obj.toString();
	            var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
	            if (ruselessToString.test(str)) {
	              try {
	                var newStr = JSON.stringify(obj);
	                str = newStr;
	              } catch (e) {}
	            }
	            if (str.length === 0) {
	              str = "(empty array)";
	            }
	          }
	          return ("(<" + snip(str) + ">, no stack trace)");
	        }
	        function snip(str) {
	          var maxChars = 41;
	          if (str.length < maxChars) {
	            return str;
	          }
	          return str.substr(0, maxChars - 3) + "...";
	        }
	        function CapturedTrace(ignoreUntil, isTopLevel) {
	          this.captureStackTrace(CapturedTrace, isTopLevel);
	        }
	        inherits(CapturedTrace, Error);
	        CapturedTrace.prototype.captureStackTrace = function CapturedTrace$captureStackTrace(ignoreUntil, isTopLevel) {
	          captureStackTrace(this, ignoreUntil, isTopLevel);
	        };
	        CapturedTrace.possiblyUnhandledRejection = function CapturedTrace$PossiblyUnhandledRejection(reason) {
	          if (typeof console === "object") {
	            var message;
	            if (typeof reason === "object" || typeof reason === "function") {
	              var stack = reason.stack;
	              message = "Possibly unhandled " + formatStack(stack, reason);
	            } else {
	              message = "Possibly unhandled " + String(reason);
	            }
	            if (typeof console.error === "function" || typeof console.error === "object") {
	              console.error(message);
	            } else if (typeof console.log === "function" || typeof console.log === "object") {
	              console.log(message);
	            }
	          }
	        };
	        CapturedTrace.combine = function CapturedTrace$Combine(current, prev) {
	          var currentLastIndex = current.length - 1;
	          var currentLastLine = current[currentLastIndex];
	          var commonRootMeetPoint = -1;
	          for (var i = prev.length - 1; i >= 0; --i) {
	            if (prev[i] === currentLastLine) {
	              commonRootMeetPoint = i;
	              break;
	            }
	          }
	          for (var i = commonRootMeetPoint; i >= 0; --i) {
	            var line = prev[i];
	            if (current[currentLastIndex] === line) {
	              current.pop();
	              currentLastIndex--;
	            } else {
	              break;
	            }
	          }
	          current.push("From previous event:");
	          var lines = current.concat(prev);
	          var ret = [];
	          for (var i = 0,
	              len = lines.length; i < len; ++i) {
	            if (((rignore.test(lines[i]) && rtraceline.test(lines[i])) || (i > 0 && !rtraceline.test(lines[i])) && lines[i] !== "From previous event:")) {
	              continue;
	            }
	            ret.push(lines[i]);
	          }
	          return ret;
	        };
	        CapturedTrace.protectErrorMessageNewlines = function(stack) {
	          for (var i = 0; i < stack.length; ++i) {
	            if (rtraceline.test(stack[i])) {
	              break;
	            }
	          }
	          if (i <= 1)
	            return;
	          var errorMessageLines = [];
	          for (var j = 0; j < i; ++j) {
	            errorMessageLines.push(stack.shift());
	          }
	          stack.unshift(errorMessageLines.join("\u0002\u0000\u0001"));
	        };
	        CapturedTrace.isSupported = function CapturedTrace$IsSupported() {
	          return typeof captureStackTrace === "function";
	        };
	        var captureStackTrace = (function stackDetection() {
	          if (typeof Error.stackTraceLimit === "number" && typeof Error.captureStackTrace === "function") {
	            rtraceline = /^\s*at\s*/;
	            formatStack = function(stack, error) {
	              if (typeof stack === "string")
	                return stack;
	              if (error.name !== void 0 && error.message !== void 0) {
	                return error.name + ". " + error.message;
	              }
	              return formatNonError(error);
	            };
	            var captureStackTrace = Error.captureStackTrace;
	            return function CapturedTrace$_captureStackTrace(receiver, ignoreUntil) {
	              captureStackTrace(receiver, ignoreUntil);
	            };
	          }
	          var err = new Error();
	          if (typeof err.stack === "string" && typeof"".startsWith === "function" && (err.stack.startsWith("stackDetection@")) && stackDetection.name === "stackDetection") {
	            defineProperty(Error, "stackTraceLimit", {
	              writable: true,
	              enumerable: false,
	              configurable: false,
	              value: 25
	            });
	            rtraceline = /@/;
	            var rline = /[@\n]/;
	            formatStack = function(stack, error) {
	              if (typeof stack === "string") {
	                return (error.name + ". " + error.message + "\n" + stack);
	              }
	              if (error.name !== void 0 && error.message !== void 0) {
	                return error.name + ". " + error.message;
	              }
	              return formatNonError(error);
	            };
	            return function captureStackTrace(o) {
	              var stack = new Error().stack;
	              var split = stack.split(rline);
	              var len = split.length;
	              var ret = "";
	              for (var i = 0; i < len; i += 2) {
	                ret += split[i];
	                ret += "@";
	                ret += split[i + 1];
	                ret += "\n";
	              }
	              o.stack = ret;
	            };
	          } else {
	            formatStack = function(stack, error) {
	              if (typeof stack === "string")
	                return stack;
	              if ((typeof error === "object" || typeof error === "function") && error.name !== void 0 && error.message !== void 0) {
	                return error.name + ". " + error.message;
	              }
	              return formatNonError(error);
	            };
	            return null;
	          }
	        })();
	        return CapturedTrace;
	      };
	    }, {
	      "./es5.js": 12,
	      "./util.js": 35
	    }],
	    7: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(NEXT_FILTER) {
	        var util = _dereq_("./util.js");
	        var errors = _dereq_("./errors.js");
	        var tryCatch1 = util.tryCatch1;
	        var errorObj = util.errorObj;
	        var keys = _dereq_("./es5.js").keys;
	        var TypeError = errors.TypeError;
	        function CatchFilter(instances, callback, promise) {
	          this._instances = instances;
	          this._callback = callback;
	          this._promise = promise;
	        }
	        function CatchFilter$_safePredicate(predicate, e) {
	          var safeObject = {};
	          var retfilter = tryCatch1(predicate, safeObject, e);
	          if (retfilter === errorObj)
	            return retfilter;
	          var safeKeys = keys(safeObject);
	          if (safeKeys.length) {
	            errorObj.e = new TypeError("Catch filter must inherit from Error " + "or be a simple predicate function");
	            return errorObj;
	          }
	          return retfilter;
	        }
	        CatchFilter.prototype.doFilter = function CatchFilter$_doFilter(e) {
	          var cb = this._callback;
	          var promise = this._promise;
	          var boundTo = promise._boundTo;
	          for (var i = 0,
	              len = this._instances.length; i < len; ++i) {
	            var item = this._instances[i];
	            var itemIsErrorType = item === Error || (item != null && item.prototype instanceof Error);
	            if (itemIsErrorType && e instanceof item) {
	              var ret = tryCatch1(cb, boundTo, e);
	              if (ret === errorObj) {
	                NEXT_FILTER.e = ret.e;
	                return NEXT_FILTER;
	              }
	              return ret;
	            } else if (typeof item === "function" && !itemIsErrorType) {
	              var shouldHandle = CatchFilter$_safePredicate(item, e);
	              if (shouldHandle === errorObj) {
	                var trace = errors.canAttach(errorObj.e) ? errorObj.e : new Error(errorObj.e + "");
	                this._promise._attachExtraTrace(trace);
	                e = errorObj.e;
	                break;
	              } else if (shouldHandle) {
	                var ret = tryCatch1(cb, boundTo, e);
	                if (ret === errorObj) {
	                  NEXT_FILTER.e = ret.e;
	                  return NEXT_FILTER;
	                }
	                return ret;
	              }
	            }
	          }
	          NEXT_FILTER.e = e;
	          return NEXT_FILTER;
	        };
	        return CatchFilter;
	      };
	    }, {
	      "./errors.js": 10,
	      "./es5.js": 12,
	      "./util.js": 35
	    }],
	    8: [function(_dereq_, module, exports) {
	      "use strict";
	      var util = _dereq_("./util.js");
	      var isPrimitive = util.isPrimitive;
	      var wrapsPrimitiveReceiver = util.wrapsPrimitiveReceiver;
	      module.exports = function(Promise) {
	        var returner = function Promise$_returner() {
	          return this;
	        };
	        var thrower = function Promise$_thrower() {
	          throw this;
	        };
	        var wrapper = function Promise$_wrapper(value, action) {
	          if (action === 1) {
	            return function Promise$_thrower() {
	              throw value;
	            };
	          } else if (action === 2) {
	            return function Promise$_returner() {
	              return value;
	            };
	          }
	        };
	        Promise.prototype["return"] = Promise.prototype.thenReturn = function Promise$thenReturn(value) {
	          if (wrapsPrimitiveReceiver && isPrimitive(value)) {
	            return this._then(wrapper(value, 2), void 0, void 0, void 0, void 0);
	          }
	          return this._then(returner, void 0, void 0, value, void 0);
	        };
	        Promise.prototype["throw"] = Promise.prototype.thenThrow = function Promise$thenThrow(reason) {
	          if (wrapsPrimitiveReceiver && isPrimitive(reason)) {
	            return this._then(wrapper(reason, 1), void 0, void 0, void 0, void 0);
	          }
	          return this._then(thrower, void 0, void 0, reason, void 0);
	        };
	      };
	    }, {"./util.js": 35}],
	    9: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, INTERNAL) {
	        var PromiseReduce = Promise.reduce;
	        Promise.prototype.each = function Promise$each(fn) {
	          return PromiseReduce(this, fn, null, INTERNAL);
	        };
	        Promise.each = function Promise$Each(promises, fn) {
	          return PromiseReduce(promises, fn, null, INTERNAL);
	        };
	      };
	    }, {}],
	    10: [function(_dereq_, module, exports) {
	      "use strict";
	      var Objectfreeze = _dereq_("./es5.js").freeze;
	      var util = _dereq_("./util.js");
	      var inherits = util.inherits;
	      var notEnumerableProp = util.notEnumerableProp;
	      function markAsOriginatingFromRejection(e) {
	        try {
	          notEnumerableProp(e, "isOperational", true);
	        } catch (ignore) {}
	      }
	      function originatesFromRejection(e) {
	        if (e == null)
	          return false;
	        return ((e instanceof OperationalError) || e["isOperational"] === true);
	      }
	      function isError(obj) {
	        return obj instanceof Error;
	      }
	      function canAttach(obj) {
	        return isError(obj);
	      }
	      function subError(nameProperty, defaultMessage) {
	        function SubError(message) {
	          if (!(this instanceof SubError))
	            return new SubError(message);
	          this.message = typeof message === "string" ? message : defaultMessage;
	          this.name = nameProperty;
	          if (Error.captureStackTrace) {
	            Error.captureStackTrace(this, this.constructor);
	          }
	        }
	        inherits(SubError, Error);
	        return SubError;
	      }
	      var _TypeError,
	          _RangeError;
	      var CancellationError = subError("CancellationError", "cancellation error");
	      var TimeoutError = subError("TimeoutError", "timeout error");
	      var AggregateError = subError("AggregateError", "aggregate error");
	      try {
	        _TypeError = TypeError;
	        _RangeError = RangeError;
	      } catch (e) {
	        _TypeError = subError("TypeError", "type error");
	        _RangeError = subError("RangeError", "range error");
	      }
	      var methods = ("join pop push shift unshift slice filter forEach some " + "every map indexOf lastIndexOf reduce reduceRight sort reverse").split(" ");
	      for (var i = 0; i < methods.length; ++i) {
	        if (typeof Array.prototype[methods[i]] === "function") {
	          AggregateError.prototype[methods[i]] = Array.prototype[methods[i]];
	        }
	      }
	      AggregateError.prototype.length = 0;
	      AggregateError.prototype["isOperational"] = true;
	      var level = 0;
	      AggregateError.prototype.toString = function() {
	        var indent = Array(level * 4 + 1).join(" ");
	        var ret = "\n" + indent + "AggregateError of:" + "\n";
	        level++;
	        indent = Array(level * 4 + 1).join(" ");
	        for (var i = 0; i < this.length; ++i) {
	          var str = this[i] === this ? "[Circular AggregateError]" : this[i] + "";
	          var lines = str.split("\n");
	          for (var j = 0; j < lines.length; ++j) {
	            lines[j] = indent + lines[j];
	          }
	          str = lines.join("\n");
	          ret += str + "\n";
	        }
	        level--;
	        return ret;
	      };
	      function OperationalError(message) {
	        this.name = "OperationalError";
	        this.message = message;
	        this.cause = message;
	        this["isOperational"] = true;
	        if (message instanceof Error) {
	          this.message = message.message;
	          this.stack = message.stack;
	        } else if (Error.captureStackTrace) {
	          Error.captureStackTrace(this, this.constructor);
	        }
	      }
	      inherits(OperationalError, Error);
	      var key = "__BluebirdErrorTypes__";
	      var errorTypes = Error[key];
	      if (!errorTypes) {
	        errorTypes = Objectfreeze({
	          CancellationError: CancellationError,
	          TimeoutError: TimeoutError,
	          OperationalError: OperationalError,
	          RejectionError: OperationalError,
	          AggregateError: AggregateError
	        });
	        notEnumerableProp(Error, key, errorTypes);
	      }
	      module.exports = {
	        Error: Error,
	        TypeError: _TypeError,
	        RangeError: _RangeError,
	        CancellationError: errorTypes.CancellationError,
	        OperationalError: errorTypes.OperationalError,
	        TimeoutError: errorTypes.TimeoutError,
	        AggregateError: errorTypes.AggregateError,
	        originatesFromRejection: originatesFromRejection,
	        markAsOriginatingFromRejection: markAsOriginatingFromRejection,
	        canAttach: canAttach
	      };
	    }, {
	      "./es5.js": 12,
	      "./util.js": 35
	    }],
	    11: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise) {
	        var TypeError = _dereq_('./errors.js').TypeError;
	        function apiRejection(msg) {
	          var error = new TypeError(msg);
	          var ret = Promise.rejected(error);
	          var parent = ret._peekContext();
	          if (parent != null) {
	            parent._attachExtraTrace(error);
	          }
	          return ret;
	        }
	        return apiRejection;
	      };
	    }, {"./errors.js": 10}],
	    12: [function(_dereq_, module, exports) {
	      var isES5 = (function() {
	        "use strict";
	        return this === void 0;
	      })();
	      if (isES5) {
	        module.exports = {
	          freeze: Object.freeze,
	          defineProperty: Object.defineProperty,
	          keys: Object.keys,
	          getPrototypeOf: Object.getPrototypeOf,
	          isArray: Array.isArray,
	          isES5: isES5
	        };
	      } else {
	        var has = {}.hasOwnProperty;
	        var str = {}.toString;
	        var proto = {}.constructor.prototype;
	        var ObjectKeys = function ObjectKeys(o) {
	          var ret = [];
	          for (var key in o) {
	            if (has.call(o, key)) {
	              ret.push(key);
	            }
	          }
	          return ret;
	        };
	        var ObjectDefineProperty = function ObjectDefineProperty(o, key, desc) {
	          o[key] = desc.value;
	          return o;
	        };
	        var ObjectFreeze = function ObjectFreeze(obj) {
	          return obj;
	        };
	        var ObjectGetPrototypeOf = function ObjectGetPrototypeOf(obj) {
	          try {
	            return Object(obj).constructor.prototype;
	          } catch (e) {
	            return proto;
	          }
	        };
	        var ArrayIsArray = function ArrayIsArray(obj) {
	          try {
	            return str.call(obj) === "[object Array]";
	          } catch (e) {
	            return false;
	          }
	        };
	        module.exports = {
	          isArray: ArrayIsArray,
	          keys: ObjectKeys,
	          defineProperty: ObjectDefineProperty,
	          freeze: ObjectFreeze,
	          getPrototypeOf: ObjectGetPrototypeOf,
	          isES5: isES5
	        };
	      }
	    }, {}],
	    13: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, INTERNAL) {
	        var PromiseMap = Promise.map;
	        Promise.prototype.filter = function Promise$filter(fn, options) {
	          return PromiseMap(this, fn, options, INTERNAL);
	        };
	        Promise.filter = function Promise$Filter(promises, fn, options) {
	          return PromiseMap(promises, fn, options, INTERNAL);
	        };
	      };
	    }, {}],
	    14: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, NEXT_FILTER, cast) {
	        var util = _dereq_("./util.js");
	        var wrapsPrimitiveReceiver = util.wrapsPrimitiveReceiver;
	        var isPrimitive = util.isPrimitive;
	        var thrower = util.thrower;
	        function returnThis() {
	          return this;
	        }
	        function throwThis() {
	          throw this;
	        }
	        function return$(r) {
	          return function Promise$_returner() {
	            return r;
	          };
	        }
	        function throw$(r) {
	          return function Promise$_thrower() {
	            throw r;
	          };
	        }
	        function promisedFinally(ret, reasonOrValue, isFulfilled) {
	          var then;
	          if (wrapsPrimitiveReceiver && isPrimitive(reasonOrValue)) {
	            then = isFulfilled ? return$(reasonOrValue) : throw$(reasonOrValue);
	          } else {
	            then = isFulfilled ? returnThis : throwThis;
	          }
	          return ret._then(then, thrower, void 0, reasonOrValue, void 0);
	        }
	        function finallyHandler(reasonOrValue) {
	          var promise = this.promise;
	          var handler = this.handler;
	          var ret = promise._isBound() ? handler.call(promise._boundTo) : handler();
	          if (ret !== void 0) {
	            var maybePromise = cast(ret, void 0);
	            if (maybePromise instanceof Promise) {
	              return promisedFinally(maybePromise, reasonOrValue, promise.isFulfilled());
	            }
	          }
	          if (promise.isRejected()) {
	            NEXT_FILTER.e = reasonOrValue;
	            return NEXT_FILTER;
	          } else {
	            return reasonOrValue;
	          }
	        }
	        function tapHandler(value) {
	          var promise = this.promise;
	          var handler = this.handler;
	          var ret = promise._isBound() ? handler.call(promise._boundTo, value) : handler(value);
	          if (ret !== void 0) {
	            var maybePromise = cast(ret, void 0);
	            if (maybePromise instanceof Promise) {
	              return promisedFinally(maybePromise, value, true);
	            }
	          }
	          return value;
	        }
	        Promise.prototype._passThroughHandler = function Promise$_passThroughHandler(handler, isFinally) {
	          if (typeof handler !== "function")
	            return this.then();
	          var promiseAndHandler = {
	            promise: this,
	            handler: handler
	          };
	          return this._then(isFinally ? finallyHandler : tapHandler, isFinally ? finallyHandler : void 0, void 0, promiseAndHandler, void 0);
	        };
	        Promise.prototype.lastly = Promise.prototype["finally"] = function Promise$finally(handler) {
	          return this._passThroughHandler(handler, true);
	        };
	        Promise.prototype.tap = function Promise$tap(handler) {
	          return this._passThroughHandler(handler, false);
	        };
	      };
	    }, {"./util.js": 35}],
	    15: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, apiRejection, INTERNAL, cast) {
	        var errors = _dereq_("./errors.js");
	        var TypeError = errors.TypeError;
	        var deprecated = _dereq_("./util.js").deprecated;
	        var util = _dereq_("./util.js");
	        var errorObj = util.errorObj;
	        var tryCatch1 = util.tryCatch1;
	        var yieldHandlers = [];
	        function promiseFromYieldHandler(value, yieldHandlers) {
	          var _errorObj = errorObj;
	          var _Promise = Promise;
	          var len = yieldHandlers.length;
	          for (var i = 0; i < len; ++i) {
	            var result = tryCatch1(yieldHandlers[i], void 0, value);
	            if (result === _errorObj) {
	              return _Promise.reject(_errorObj.e);
	            }
	            var maybePromise = cast(result, promiseFromYieldHandler);
	            if (maybePromise instanceof _Promise)
	              return maybePromise;
	          }
	          return null;
	        }
	        function PromiseSpawn(generatorFunction, receiver, yieldHandler) {
	          var promise = this._promise = new Promise(INTERNAL);
	          promise._setTrace(void 0);
	          this._generatorFunction = generatorFunction;
	          this._receiver = receiver;
	          this._generator = void 0;
	          this._yieldHandlers = typeof yieldHandler === "function" ? [yieldHandler].concat(yieldHandlers) : yieldHandlers;
	        }
	        PromiseSpawn.prototype.promise = function PromiseSpawn$promise() {
	          return this._promise;
	        };
	        PromiseSpawn.prototype._run = function PromiseSpawn$_run() {
	          this._generator = this._generatorFunction.call(this._receiver);
	          this._receiver = this._generatorFunction = void 0;
	          this._next(void 0);
	        };
	        PromiseSpawn.prototype._continue = function PromiseSpawn$_continue(result) {
	          if (result === errorObj) {
	            this._generator = void 0;
	            var trace = errors.canAttach(result.e) ? result.e : new Error(result.e + "");
	            this._promise._attachExtraTrace(trace);
	            this._promise._reject(result.e, trace);
	            return;
	          }
	          var value = result.value;
	          if (result.done === true) {
	            this._generator = void 0;
	            if (!this._promise._tryFollow(value)) {
	              this._promise._fulfill(value);
	            }
	          } else {
	            var maybePromise = cast(value, void 0);
	            if (!(maybePromise instanceof Promise)) {
	              maybePromise = promiseFromYieldHandler(maybePromise, this._yieldHandlers);
	              if (maybePromise === null) {
	                this._throw(new TypeError("A value was yielded that could not be treated as a promise"));
	                return;
	              }
	            }
	            maybePromise._then(this._next, this._throw, void 0, this, null);
	          }
	        };
	        PromiseSpawn.prototype._throw = function PromiseSpawn$_throw(reason) {
	          if (errors.canAttach(reason))
	            this._promise._attachExtraTrace(reason);
	          this._continue(tryCatch1(this._generator["throw"], this._generator, reason));
	        };
	        PromiseSpawn.prototype._next = function PromiseSpawn$_next(value) {
	          this._continue(tryCatch1(this._generator.next, this._generator, value));
	        };
	        Promise.coroutine = function Promise$Coroutine(generatorFunction, options) {
	          if (typeof generatorFunction !== "function") {
	            throw new TypeError("generatorFunction must be a function");
	          }
	          var yieldHandler = Object(options).yieldHandler;
	          var PromiseSpawn$ = PromiseSpawn;
	          return function() {
	            var generator = generatorFunction.apply(this, arguments);
	            var spawn = new PromiseSpawn$(void 0, void 0, yieldHandler);
	            spawn._generator = generator;
	            spawn._next(void 0);
	            return spawn.promise();
	          };
	        };
	        Promise.coroutine.addYieldHandler = function(fn) {
	          if (typeof fn !== "function")
	            throw new TypeError("fn must be a function");
	          yieldHandlers.push(fn);
	        };
	        Promise.spawn = function Promise$Spawn(generatorFunction) {
	          deprecated("Promise.spawn is deprecated. Use Promise.coroutine instead.");
	          if (typeof generatorFunction !== "function") {
	            return apiRejection("generatorFunction must be a function");
	          }
	          var spawn = new PromiseSpawn(generatorFunction, this);
	          var ret = spawn.promise();
	          spawn._run(Promise.spawn);
	          return ret;
	        };
	      };
	    }, {
	      "./errors.js": 10,
	      "./util.js": 35
	    }],
	    16: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, PromiseArray, cast, INTERNAL) {
	        var util = _dereq_("./util.js");
	        var canEvaluate = util.canEvaluate;
	        var tryCatch1 = util.tryCatch1;
	        var errorObj = util.errorObj;
	        if (canEvaluate) {
	          var thenCallback = function(i) {
	            return new Function("value", "holder", "                             \n\
	            'use strict';                                                    \n\
	            holder.pIndex = value;                                           \n\
	            holder.checkFulfillment(this);                                   \n\
	            ".replace(/Index/g, i));
	          };
	          var caller = function(count) {
	            var values = [];
	            for (var i = 1; i <= count; ++i)
	              values.push("holder.p" + i);
	            return new Function("holder", "                                      \n\
	            'use strict';                                                    \n\
	            var callback = holder.fn;                                        \n\
	            return callback(values);                                         \n\
	            ".replace(/values/g, values.join(", ")));
	          };
	          var thenCallbacks = [];
	          var callers = [void 0];
	          for (var i = 1; i <= 5; ++i) {
	            thenCallbacks.push(thenCallback(i));
	            callers.push(caller(i));
	          }
	          var Holder = function(total, fn) {
	            this.p1 = this.p2 = this.p3 = this.p4 = this.p5 = null;
	            this.fn = fn;
	            this.total = total;
	            this.now = 0;
	          };
	          Holder.prototype.callers = callers;
	          Holder.prototype.checkFulfillment = function(promise) {
	            var now = this.now;
	            now++;
	            var total = this.total;
	            if (now >= total) {
	              var handler = this.callers[total];
	              var ret = tryCatch1(handler, void 0, this);
	              if (ret === errorObj) {
	                promise._rejectUnchecked(ret.e);
	              } else if (!promise._tryFollow(ret)) {
	                promise._fulfillUnchecked(ret);
	              }
	            } else {
	              this.now = now;
	            }
	          };
	        }
	        function reject(reason) {
	          this._reject(reason);
	        }
	        Promise.join = function Promise$Join() {
	          var last = arguments.length - 1;
	          var fn;
	          if (last > 0 && typeof arguments[last] === "function") {
	            fn = arguments[last];
	            if (last < 6 && canEvaluate) {
	              var ret = new Promise(INTERNAL);
	              ret._setTrace(void 0);
	              var holder = new Holder(last, fn);
	              var callbacks = thenCallbacks;
	              for (var i = 0; i < last; ++i) {
	                var maybePromise = cast(arguments[i], void 0);
	                if (maybePromise instanceof Promise) {
	                  if (maybePromise.isPending()) {
	                    maybePromise._then(callbacks[i], reject, void 0, ret, holder);
	                  } else if (maybePromise.isFulfilled()) {
	                    callbacks[i].call(ret, maybePromise._settledValue, holder);
	                  } else {
	                    ret._reject(maybePromise._settledValue);
	                    maybePromise._unsetRejectionIsUnhandled();
	                  }
	                } else {
	                  callbacks[i].call(ret, maybePromise, holder);
	                }
	              }
	              return ret;
	            }
	          }
	          var $_len = arguments.length;
	          var args = new Array($_len);
	          for (var $_i = 0; $_i < $_len; ++$_i) {
	            args[$_i] = arguments[$_i];
	          }
	          var ret = new PromiseArray(args).promise();
	          return fn !== void 0 ? ret.spread(fn) : ret;
	        };
	      };
	    }, {"./util.js": 35}],
	    17: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, PromiseArray, apiRejection, cast, INTERNAL) {
	        var util = _dereq_("./util.js");
	        var tryCatch3 = util.tryCatch3;
	        var errorObj = util.errorObj;
	        var PENDING = {};
	        var EMPTY_ARRAY = [];
	        function MappingPromiseArray(promises, fn, limit, _filter) {
	          this.constructor$(promises);
	          this._callback = fn;
	          this._preservedValues = _filter === INTERNAL ? new Array(this.length()) : null;
	          this._limit = limit;
	          this._inFlight = 0;
	          this._queue = limit >= 1 ? [] : EMPTY_ARRAY;
	          this._init$(void 0, -2);
	        }
	        util.inherits(MappingPromiseArray, PromiseArray);
	        MappingPromiseArray.prototype._init = function MappingPromiseArray$_init() {};
	        MappingPromiseArray.prototype._promiseFulfilled = function MappingPromiseArray$_promiseFulfilled(value, index) {
	          var values = this._values;
	          if (values === null)
	            return;
	          var length = this.length();
	          var preservedValues = this._preservedValues;
	          var limit = this._limit;
	          if (values[index] === PENDING) {
	            values[index] = value;
	            if (limit >= 1) {
	              this._inFlight--;
	              this._drainQueue();
	              if (this._isResolved())
	                return;
	            }
	          } else {
	            if (limit >= 1 && this._inFlight >= limit) {
	              values[index] = value;
	              this._queue.push(index);
	              return;
	            }
	            if (preservedValues !== null)
	              preservedValues[index] = value;
	            var callback = this._callback;
	            var receiver = this._promise._boundTo;
	            var ret = tryCatch3(callback, receiver, value, index, length);
	            if (ret === errorObj)
	              return this._reject(ret.e);
	            var maybePromise = cast(ret, void 0);
	            if (maybePromise instanceof Promise) {
	              if (maybePromise.isPending()) {
	                if (limit >= 1)
	                  this._inFlight++;
	                values[index] = PENDING;
	                return maybePromise._proxyPromiseArray(this, index);
	              } else if (maybePromise.isFulfilled()) {
	                ret = maybePromise.value();
	              } else {
	                maybePromise._unsetRejectionIsUnhandled();
	                return this._reject(maybePromise.reason());
	              }
	            }
	            values[index] = ret;
	          }
	          var totalResolved = ++this._totalResolved;
	          if (totalResolved >= length) {
	            if (preservedValues !== null) {
	              this._filter(values, preservedValues);
	            } else {
	              this._resolve(values);
	            }
	          }
	        };
	        MappingPromiseArray.prototype._drainQueue = function MappingPromiseArray$_drainQueue() {
	          var queue = this._queue;
	          var limit = this._limit;
	          var values = this._values;
	          while (queue.length > 0 && this._inFlight < limit) {
	            var index = queue.pop();
	            this._promiseFulfilled(values[index], index);
	          }
	        };
	        MappingPromiseArray.prototype._filter = function MappingPromiseArray$_filter(booleans, values) {
	          var len = values.length;
	          var ret = new Array(len);
	          var j = 0;
	          for (var i = 0; i < len; ++i) {
	            if (booleans[i])
	              ret[j++] = values[i];
	          }
	          ret.length = j;
	          this._resolve(ret);
	        };
	        MappingPromiseArray.prototype.preservedValues = function MappingPromiseArray$preserveValues() {
	          return this._preservedValues;
	        };
	        function map(promises, fn, options, _filter) {
	          var limit = typeof options === "object" && options !== null ? options.concurrency : 0;
	          limit = typeof limit === "number" && isFinite(limit) && limit >= 1 ? limit : 0;
	          return new MappingPromiseArray(promises, fn, limit, _filter);
	        }
	        Promise.prototype.map = function Promise$map(fn, options) {
	          if (typeof fn !== "function")
	            return apiRejection("fn must be a function");
	          return map(this, fn, options, null).promise();
	        };
	        Promise.map = function Promise$Map(promises, fn, options, _filter) {
	          if (typeof fn !== "function")
	            return apiRejection("fn must be a function");
	          return map(promises, fn, options, _filter).promise();
	        };
	      };
	    }, {"./util.js": 35}],
	    18: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise) {
	        var util = _dereq_("./util.js");
	        var async = _dereq_("./async.js");
	        var tryCatch2 = util.tryCatch2;
	        var tryCatch1 = util.tryCatch1;
	        var errorObj = util.errorObj;
	        function thrower(r) {
	          throw r;
	        }
	        function Promise$_spreadAdapter(val, receiver) {
	          if (!util.isArray(val))
	            return Promise$_successAdapter(val, receiver);
	          var ret = util.tryCatchApply(this, [null].concat(val), receiver);
	          if (ret === errorObj) {
	            async.invokeLater(thrower, void 0, ret.e);
	          }
	        }
	        function Promise$_successAdapter(val, receiver) {
	          var nodeback = this;
	          var ret = val === void 0 ? tryCatch1(nodeback, receiver, null) : tryCatch2(nodeback, receiver, null, val);
	          if (ret === errorObj) {
	            async.invokeLater(thrower, void 0, ret.e);
	          }
	        }
	        function Promise$_errorAdapter(reason, receiver) {
	          var nodeback = this;
	          var ret = tryCatch1(nodeback, receiver, reason);
	          if (ret === errorObj) {
	            async.invokeLater(thrower, void 0, ret.e);
	          }
	        }
	        Promise.prototype.nodeify = function Promise$nodeify(nodeback, options) {
	          if (typeof nodeback == "function") {
	            var adapter = Promise$_successAdapter;
	            if (options !== void 0 && Object(options).spread) {
	              adapter = Promise$_spreadAdapter;
	            }
	            this._then(adapter, Promise$_errorAdapter, void 0, nodeback, this._boundTo);
	          }
	          return this;
	        };
	      };
	    }, {
	      "./async.js": 2,
	      "./util.js": 35
	    }],
	    19: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, PromiseArray) {
	        var util = _dereq_("./util.js");
	        var async = _dereq_("./async.js");
	        var errors = _dereq_("./errors.js");
	        var tryCatch1 = util.tryCatch1;
	        var errorObj = util.errorObj;
	        Promise.prototype.progressed = function Promise$progressed(handler) {
	          return this._then(void 0, void 0, handler, void 0, void 0);
	        };
	        Promise.prototype._progress = function Promise$_progress(progressValue) {
	          if (this._isFollowingOrFulfilledOrRejected())
	            return;
	          this._progressUnchecked(progressValue);
	        };
	        Promise.prototype._clearFirstHandlerData$Base = Promise.prototype._clearFirstHandlerData;
	        Promise.prototype._clearFirstHandlerData = function Promise$_clearFirstHandlerData() {
	          this._clearFirstHandlerData$Base();
	          this._progressHandler0 = void 0;
	        };
	        Promise.prototype._progressHandlerAt = function Promise$_progressHandlerAt(index) {
	          return index === 0 ? this._progressHandler0 : this[(index << 2) + index - 5 + 2];
	        };
	        Promise.prototype._doProgressWith = function Promise$_doProgressWith(progression) {
	          var progressValue = progression.value;
	          var handler = progression.handler;
	          var promise = progression.promise;
	          var receiver = progression.receiver;
	          var ret = tryCatch1(handler, receiver, progressValue);
	          if (ret === errorObj) {
	            if (ret.e != null && ret.e.name !== "StopProgressPropagation") {
	              var trace = errors.canAttach(ret.e) ? ret.e : new Error(ret.e + "");
	              promise._attachExtraTrace(trace);
	              promise._progress(ret.e);
	            }
	          } else if (ret instanceof Promise) {
	            ret._then(promise._progress, null, null, promise, void 0);
	          } else {
	            promise._progress(ret);
	          }
	        };
	        Promise.prototype._progressUnchecked = function Promise$_progressUnchecked(progressValue) {
	          if (!this.isPending())
	            return;
	          var len = this._length();
	          var progress = this._progress;
	          for (var i = 0; i < len; i++) {
	            var handler = this._progressHandlerAt(i);
	            var promise = this._promiseAt(i);
	            if (!(promise instanceof Promise)) {
	              var receiver = this._receiverAt(i);
	              if (typeof handler === "function") {
	                handler.call(receiver, progressValue, promise);
	              } else if (receiver instanceof Promise && receiver._isProxied()) {
	                receiver._progressUnchecked(progressValue);
	              } else if (receiver instanceof PromiseArray) {
	                receiver._promiseProgressed(progressValue, promise);
	              }
	              continue;
	            }
	            if (typeof handler === "function") {
	              async.invoke(this._doProgressWith, this, {
	                handler: handler,
	                promise: promise,
	                receiver: this._receiverAt(i),
	                value: progressValue
	              });
	            } else {
	              async.invoke(progress, promise, progressValue);
	            }
	          }
	        };
	      };
	    }, {
	      "./async.js": 2,
	      "./errors.js": 10,
	      "./util.js": 35
	    }],
	    20: [function(_dereq_, module, exports) {
	      "use strict";
	      var old;
	      if (typeof Promise !== "undefined")
	        old = Promise;
	      function noConflict(bluebird) {
	        try {
	          if (Promise === bluebird)
	            Promise = old;
	        } catch (e) {}
	        return bluebird;
	      }
	      module.exports = function() {
	        var util = _dereq_("./util.js");
	        var async = _dereq_("./async.js");
	        var errors = _dereq_("./errors.js");
	        var INTERNAL = function() {};
	        var APPLY = {};
	        var NEXT_FILTER = {e: null};
	        var cast = _dereq_("./thenables.js")(Promise, INTERNAL);
	        var PromiseArray = _dereq_("./promise_array.js")(Promise, INTERNAL, cast);
	        var CapturedTrace = _dereq_("./captured_trace.js")();
	        var CatchFilter = _dereq_("./catch_filter.js")(NEXT_FILTER);
	        var PromiseResolver = _dereq_("./promise_resolver.js");
	        var isArray = util.isArray;
	        var errorObj = util.errorObj;
	        var tryCatch1 = util.tryCatch1;
	        var tryCatch2 = util.tryCatch2;
	        var tryCatchApply = util.tryCatchApply;
	        var RangeError = errors.RangeError;
	        var TypeError = errors.TypeError;
	        var CancellationError = errors.CancellationError;
	        var TimeoutError = errors.TimeoutError;
	        var OperationalError = errors.OperationalError;
	        var originatesFromRejection = errors.originatesFromRejection;
	        var markAsOriginatingFromRejection = errors.markAsOriginatingFromRejection;
	        var canAttach = errors.canAttach;
	        var thrower = util.thrower;
	        var apiRejection = _dereq_("./errors_api_rejection")(Promise);
	        var makeSelfResolutionError = function Promise$_makeSelfResolutionError() {
	          return new TypeError("circular promise resolution chain");
	        };
	        function Promise(resolver) {
	          if (typeof resolver !== "function") {
	            throw new TypeError("the promise constructor requires a resolver function");
	          }
	          if (this.constructor !== Promise) {
	            throw new TypeError("the promise constructor cannot be invoked directly");
	          }
	          this._bitField = 0;
	          this._fulfillmentHandler0 = void 0;
	          this._rejectionHandler0 = void 0;
	          this._promise0 = void 0;
	          this._receiver0 = void 0;
	          this._settledValue = void 0;
	          this._boundTo = void 0;
	          if (resolver !== INTERNAL)
	            this._resolveFromResolver(resolver);
	        }
	        function returnFirstElement(elements) {
	          return elements[0];
	        }
	        Promise.prototype.bind = function Promise$bind(thisArg) {
	          var maybePromise = cast(thisArg, void 0);
	          var ret = new Promise(INTERNAL);
	          if (maybePromise instanceof Promise) {
	            var binder = maybePromise.then(function(thisArg) {
	              ret._setBoundTo(thisArg);
	            });
	            var p = Promise.all([this, binder]).then(returnFirstElement);
	            ret._follow(p);
	          } else {
	            ret._follow(this);
	            ret._setBoundTo(thisArg);
	          }
	          ret._propagateFrom(this, 2 | 1);
	          return ret;
	        };
	        Promise.prototype.toString = function Promise$toString() {
	          return "[object Promise]";
	        };
	        Promise.prototype.caught = Promise.prototype["catch"] = function Promise$catch(fn) {
	          var len = arguments.length;
	          if (len > 1) {
	            var catchInstances = new Array(len - 1),
	                j = 0,
	                i;
	            for (i = 0; i < len - 1; ++i) {
	              var item = arguments[i];
	              if (typeof item === "function") {
	                catchInstances[j++] = item;
	              } else {
	                var catchFilterTypeError = new TypeError("A catch filter must be an error constructor " + "or a filter function");
	                this._attachExtraTrace(catchFilterTypeError);
	                return Promise.reject(catchFilterTypeError);
	              }
	            }
	            catchInstances.length = j;
	            fn = arguments[i];
	            this._resetTrace();
	            var catchFilter = new CatchFilter(catchInstances, fn, this);
	            return this._then(void 0, catchFilter.doFilter, void 0, catchFilter, void 0);
	          }
	          return this._then(void 0, fn, void 0, void 0, void 0);
	        };
	        function reflect() {
	          return new Promise.PromiseInspection(this);
	        }
	        Promise.prototype.reflect = function Promise$reflect() {
	          return this._then(reflect, reflect, void 0, this, void 0);
	        };
	        Promise.prototype.then = function Promise$then(didFulfill, didReject, didProgress) {
	          return this._then(didFulfill, didReject, didProgress, void 0, void 0);
	        };
	        Promise.prototype.done = function Promise$done(didFulfill, didReject, didProgress) {
	          var promise = this._then(didFulfill, didReject, didProgress, void 0, void 0);
	          promise._setIsFinal();
	        };
	        Promise.prototype.spread = function Promise$spread(didFulfill, didReject) {
	          return this._then(didFulfill, didReject, void 0, APPLY, void 0);
	        };
	        Promise.prototype.isCancellable = function Promise$isCancellable() {
	          return !this.isResolved() && this._cancellable();
	        };
	        Promise.prototype.toJSON = function Promise$toJSON() {
	          var ret = {
	            isFulfilled: false,
	            isRejected: false,
	            fulfillmentValue: void 0,
	            rejectionReason: void 0
	          };
	          if (this.isFulfilled()) {
	            ret.fulfillmentValue = this._settledValue;
	            ret.isFulfilled = true;
	          } else if (this.isRejected()) {
	            ret.rejectionReason = this._settledValue;
	            ret.isRejected = true;
	          }
	          return ret;
	        };
	        Promise.prototype.all = function Promise$all() {
	          return new PromiseArray(this).promise();
	        };
	        Promise.is = function Promise$Is(val) {
	          return val instanceof Promise;
	        };
	        Promise.all = function Promise$All(promises) {
	          return new PromiseArray(promises).promise();
	        };
	        Promise.prototype.error = function Promise$_error(fn) {
	          return this.caught(originatesFromRejection, fn);
	        };
	        Promise.prototype._resolveFromSyncValue = function Promise$_resolveFromSyncValue(value) {
	          if (value === errorObj) {
	            this._cleanValues();
	            this._setRejected();
	            var reason = value.e;
	            this._settledValue = reason;
	            this._tryAttachExtraTrace(reason);
	            this._ensurePossibleRejectionHandled();
	          } else {
	            var maybePromise = cast(value, void 0);
	            if (maybePromise instanceof Promise) {
	              this._follow(maybePromise);
	            } else {
	              this._cleanValues();
	              this._setFulfilled();
	              this._settledValue = value;
	            }
	          }
	        };
	        Promise.method = function Promise$_Method(fn) {
	          if (typeof fn !== "function") {
	            throw new TypeError("fn must be a function");
	          }
	          return function Promise$_method() {
	            var value;
	            switch (arguments.length) {
	              case 0:
	                value = tryCatch1(fn, this, void 0);
	                break;
	              case 1:
	                value = tryCatch1(fn, this, arguments[0]);
	                break;
	              case 2:
	                value = tryCatch2(fn, this, arguments[0], arguments[1]);
	                break;
	              default:
	                var $_len = arguments.length;
	                var args = new Array($_len);
	                for (var $_i = 0; $_i < $_len; ++$_i) {
	                  args[$_i] = arguments[$_i];
	                }
	                value = tryCatchApply(fn, args, this);
	                break;
	            }
	            var ret = new Promise(INTERNAL);
	            ret._setTrace(void 0);
	            ret._resolveFromSyncValue(value);
	            return ret;
	          };
	        };
	        Promise.attempt = Promise["try"] = function Promise$_Try(fn, args, ctx) {
	          if (typeof fn !== "function") {
	            return apiRejection("fn must be a function");
	          }
	          var value = isArray(args) ? tryCatchApply(fn, args, ctx) : tryCatch1(fn, ctx, args);
	          var ret = new Promise(INTERNAL);
	          ret._setTrace(void 0);
	          ret._resolveFromSyncValue(value);
	          return ret;
	        };
	        Promise.defer = Promise.pending = function Promise$Defer() {
	          var promise = new Promise(INTERNAL);
	          promise._setTrace(void 0);
	          return new PromiseResolver(promise);
	        };
	        Promise.bind = function Promise$Bind(thisArg) {
	          var maybePromise = cast(thisArg, void 0);
	          var ret = new Promise(INTERNAL);
	          ret._setTrace(void 0);
	          if (maybePromise instanceof Promise) {
	            var p = maybePromise.then(function(thisArg) {
	              ret._setBoundTo(thisArg);
	            });
	            ret._follow(p);
	          } else {
	            ret._setBoundTo(thisArg);
	            ret._setFulfilled();
	          }
	          return ret;
	        };
	        Promise.cast = function Promise$_Cast(obj) {
	          var ret = cast(obj, void 0);
	          if (!(ret instanceof Promise)) {
	            var val = ret;
	            ret = new Promise(INTERNAL);
	            ret._setTrace(void 0);
	            ret._setFulfilled();
	            ret._cleanValues();
	            ret._settledValue = val;
	          }
	          return ret;
	        };
	        Promise.resolve = Promise.fulfilled = Promise.cast;
	        Promise.reject = Promise.rejected = function Promise$Reject(reason) {
	          var ret = new Promise(INTERNAL);
	          ret._setTrace(void 0);
	          markAsOriginatingFromRejection(reason);
	          ret._cleanValues();
	          ret._setRejected();
	          ret._settledValue = reason;
	          if (!canAttach(reason)) {
	            var trace = new Error(reason + "");
	            ret._setCarriedStackTrace(trace);
	          }
	          ret._ensurePossibleRejectionHandled();
	          return ret;
	        };
	        Promise.onPossiblyUnhandledRejection = function Promise$OnPossiblyUnhandledRejection(fn) {
	          CapturedTrace.possiblyUnhandledRejection = typeof fn === "function" ? fn : void 0;
	        };
	        var unhandledRejectionHandled;
	        Promise.onUnhandledRejectionHandled = function Promise$onUnhandledRejectionHandled(fn) {
	          unhandledRejectionHandled = typeof fn === "function" ? fn : void 0;
	        };
	        var debugging = false || !!(typeof process !== "undefined" && typeof process.execPath === "string" && typeof process.env === "object" && (process.env["BLUEBIRD_DEBUG"] || process.env["NODE_ENV"] === "development"));
	        Promise.longStackTraces = function Promise$LongStackTraces() {
	          if (async.haveItemsQueued() && debugging === false) {
	            throw new Error("cannot enable long stack traces after promises have been created");
	          }
	          debugging = CapturedTrace.isSupported();
	        };
	        Promise.hasLongStackTraces = function Promise$HasLongStackTraces() {
	          return debugging && CapturedTrace.isSupported();
	        };
	        Promise.prototype._then = function Promise$_then(didFulfill, didReject, didProgress, receiver, internalData) {
	          var haveInternalData = internalData !== void 0;
	          var ret = haveInternalData ? internalData : new Promise(INTERNAL);
	          if (!haveInternalData) {
	            if (debugging) {
	              var haveSameContext = this._peekContext() === this._traceParent;
	              ret._traceParent = haveSameContext ? this._traceParent : this;
	            }
	            ret._propagateFrom(this, 7);
	          }
	          var callbackIndex = this._addCallbacks(didFulfill, didReject, didProgress, ret, receiver);
	          if (this.isResolved()) {
	            async.invoke(this._queueSettleAt, this, callbackIndex);
	          }
	          return ret;
	        };
	        Promise.prototype._length = function Promise$_length() {
	          return this._bitField & 262143;
	        };
	        Promise.prototype._isFollowingOrFulfilledOrRejected = function Promise$_isFollowingOrFulfilledOrRejected() {
	          return (this._bitField & 939524096) > 0;
	        };
	        Promise.prototype._isFollowing = function Promise$_isFollowing() {
	          return (this._bitField & 536870912) === 536870912;
	        };
	        Promise.prototype._setLength = function Promise$_setLength(len) {
	          this._bitField = (this._bitField & -262144) | (len & 262143);
	        };
	        Promise.prototype._setFulfilled = function Promise$_setFulfilled() {
	          this._bitField = this._bitField | 268435456;
	        };
	        Promise.prototype._setRejected = function Promise$_setRejected() {
	          this._bitField = this._bitField | 134217728;
	        };
	        Promise.prototype._setFollowing = function Promise$_setFollowing() {
	          this._bitField = this._bitField | 536870912;
	        };
	        Promise.prototype._setIsFinal = function Promise$_setIsFinal() {
	          this._bitField = this._bitField | 33554432;
	        };
	        Promise.prototype._isFinal = function Promise$_isFinal() {
	          return (this._bitField & 33554432) > 0;
	        };
	        Promise.prototype._cancellable = function Promise$_cancellable() {
	          return (this._bitField & 67108864) > 0;
	        };
	        Promise.prototype._setCancellable = function Promise$_setCancellable() {
	          this._bitField = this._bitField | 67108864;
	        };
	        Promise.prototype._unsetCancellable = function Promise$_unsetCancellable() {
	          this._bitField = this._bitField & (~67108864);
	        };
	        Promise.prototype._setRejectionIsUnhandled = function Promise$_setRejectionIsUnhandled() {
	          this._bitField = this._bitField | 2097152;
	        };
	        Promise.prototype._unsetRejectionIsUnhandled = function Promise$_unsetRejectionIsUnhandled() {
	          this._bitField = this._bitField & (~2097152);
	          if (this._isUnhandledRejectionNotified()) {
	            this._unsetUnhandledRejectionIsNotified();
	            this._notifyUnhandledRejectionIsHandled();
	          }
	        };
	        Promise.prototype._isRejectionUnhandled = function Promise$_isRejectionUnhandled() {
	          return (this._bitField & 2097152) > 0;
	        };
	        Promise.prototype._setUnhandledRejectionIsNotified = function Promise$_setUnhandledRejectionIsNotified() {
	          this._bitField = this._bitField | 524288;
	        };
	        Promise.prototype._unsetUnhandledRejectionIsNotified = function Promise$_unsetUnhandledRejectionIsNotified() {
	          this._bitField = this._bitField & (~524288);
	        };
	        Promise.prototype._isUnhandledRejectionNotified = function Promise$_isUnhandledRejectionNotified() {
	          return (this._bitField & 524288) > 0;
	        };
	        Promise.prototype._setCarriedStackTrace = function Promise$_setCarriedStackTrace(capturedTrace) {
	          this._bitField = this._bitField | 1048576;
	          this._fulfillmentHandler0 = capturedTrace;
	        };
	        Promise.prototype._unsetCarriedStackTrace = function Promise$_unsetCarriedStackTrace() {
	          this._bitField = this._bitField & (~1048576);
	          this._fulfillmentHandler0 = void 0;
	        };
	        Promise.prototype._isCarryingStackTrace = function Promise$_isCarryingStackTrace() {
	          return (this._bitField & 1048576) > 0;
	        };
	        Promise.prototype._getCarriedStackTrace = function Promise$_getCarriedStackTrace() {
	          return this._isCarryingStackTrace() ? this._fulfillmentHandler0 : void 0;
	        };
	        Promise.prototype._receiverAt = function Promise$_receiverAt(index) {
	          var ret = index === 0 ? this._receiver0 : this[(index << 2) + index - 5 + 4];
	          if (this._isBound() && ret === void 0) {
	            return this._boundTo;
	          }
	          return ret;
	        };
	        Promise.prototype._promiseAt = function Promise$_promiseAt(index) {
	          return index === 0 ? this._promise0 : this[(index << 2) + index - 5 + 3];
	        };
	        Promise.prototype._fulfillmentHandlerAt = function Promise$_fulfillmentHandlerAt(index) {
	          return index === 0 ? this._fulfillmentHandler0 : this[(index << 2) + index - 5 + 0];
	        };
	        Promise.prototype._rejectionHandlerAt = function Promise$_rejectionHandlerAt(index) {
	          return index === 0 ? this._rejectionHandler0 : this[(index << 2) + index - 5 + 1];
	        };
	        Promise.prototype._addCallbacks = function Promise$_addCallbacks(fulfill, reject, progress, promise, receiver) {
	          var index = this._length();
	          if (index >= 262143 - 5) {
	            index = 0;
	            this._setLength(0);
	          }
	          if (index === 0) {
	            this._promise0 = promise;
	            if (receiver !== void 0)
	              this._receiver0 = receiver;
	            if (typeof fulfill === "function" && !this._isCarryingStackTrace())
	              this._fulfillmentHandler0 = fulfill;
	            if (typeof reject === "function")
	              this._rejectionHandler0 = reject;
	            if (typeof progress === "function")
	              this._progressHandler0 = progress;
	          } else {
	            var base = (index << 2) + index - 5;
	            this[base + 3] = promise;
	            this[base + 4] = receiver;
	            this[base + 0] = typeof fulfill === "function" ? fulfill : void 0;
	            this[base + 1] = typeof reject === "function" ? reject : void 0;
	            this[base + 2] = typeof progress === "function" ? progress : void 0;
	          }
	          this._setLength(index + 1);
	          return index;
	        };
	        Promise.prototype._setProxyHandlers = function Promise$_setProxyHandlers(receiver, promiseSlotValue) {
	          var index = this._length();
	          if (index >= 262143 - 5) {
	            index = 0;
	            this._setLength(0);
	          }
	          if (index === 0) {
	            this._promise0 = promiseSlotValue;
	            this._receiver0 = receiver;
	          } else {
	            var base = (index << 2) + index - 5;
	            this[base + 3] = promiseSlotValue;
	            this[base + 4] = receiver;
	            this[base + 0] = this[base + 1] = this[base + 2] = void 0;
	          }
	          this._setLength(index + 1);
	        };
	        Promise.prototype._proxyPromiseArray = function Promise$_proxyPromiseArray(promiseArray, index) {
	          this._setProxyHandlers(promiseArray, index);
	        };
	        Promise.prototype._proxyPromise = function Promise$_proxyPromise(promise) {
	          promise._setProxied();
	          this._setProxyHandlers(promise, -15);
	        };
	        Promise.prototype._setBoundTo = function Promise$_setBoundTo(obj) {
	          if (obj !== void 0) {
	            this._bitField = this._bitField | 8388608;
	            this._boundTo = obj;
	          } else {
	            this._bitField = this._bitField & (~8388608);
	          }
	        };
	        Promise.prototype._isBound = function Promise$_isBound() {
	          return (this._bitField & 8388608) === 8388608;
	        };
	        Promise.prototype._resolveFromResolver = function Promise$_resolveFromResolver(resolver) {
	          var promise = this;
	          this._setTrace(void 0);
	          this._pushContext();
	          function Promise$_resolver(val) {
	            if (promise._tryFollow(val)) {
	              return;
	            }
	            promise._fulfill(val);
	          }
	          function Promise$_rejecter(val) {
	            var trace = canAttach(val) ? val : new Error(val + "");
	            promise._attachExtraTrace(trace);
	            markAsOriginatingFromRejection(val);
	            promise._reject(val, trace === val ? void 0 : trace);
	          }
	          var r = tryCatch2(resolver, void 0, Promise$_resolver, Promise$_rejecter);
	          this._popContext();
	          if (r !== void 0 && r === errorObj) {
	            var e = r.e;
	            var trace = canAttach(e) ? e : new Error(e + "");
	            promise._reject(e, trace);
	          }
	        };
	        Promise.prototype._spreadSlowCase = function Promise$_spreadSlowCase(targetFn, promise, values, boundTo) {
	          var promiseForAll = new PromiseArray(values).promise();
	          var promise2 = promiseForAll._then(function() {
	            return targetFn.apply(boundTo, arguments);
	          }, void 0, void 0, APPLY, void 0);
	          promise._follow(promise2);
	        };
	        Promise.prototype._callSpread = function Promise$_callSpread(handler, promise, value) {
	          var boundTo = this._boundTo;
	          if (isArray(value)) {
	            for (var i = 0,
	                len = value.length; i < len; ++i) {
	              if (cast(value[i], void 0) instanceof Promise) {
	                this._spreadSlowCase(handler, promise, value, boundTo);
	                return;
	              }
	            }
	          }
	          promise._pushContext();
	          return tryCatchApply(handler, value, boundTo);
	        };
	        Promise.prototype._callHandler = function Promise$_callHandler(handler, receiver, promise, value) {
	          var x;
	          if (receiver === APPLY && !this.isRejected()) {
	            x = this._callSpread(handler, promise, value);
	          } else {
	            promise._pushContext();
	            x = tryCatch1(handler, receiver, value);
	          }
	          promise._popContext();
	          return x;
	        };
	        Promise.prototype._settlePromiseFromHandler = function Promise$_settlePromiseFromHandler(handler, receiver, value, promise) {
	          if (!(promise instanceof Promise)) {
	            handler.call(receiver, value, promise);
	            return;
	          }
	          if (promise.isResolved())
	            return;
	          var x = this._callHandler(handler, receiver, promise, value);
	          if (promise._isFollowing())
	            return;
	          if (x === errorObj || x === promise || x === NEXT_FILTER) {
	            var err = x === promise ? makeSelfResolutionError() : x.e;
	            var trace = canAttach(err) ? err : new Error(err + "");
	            if (x !== NEXT_FILTER)
	              promise._attachExtraTrace(trace);
	            promise._rejectUnchecked(err, trace);
	          } else {
	            var castValue = cast(x, promise);
	            if (castValue instanceof Promise) {
	              if (castValue.isRejected() && !castValue._isCarryingStackTrace() && !canAttach(castValue._settledValue)) {
	                var trace = new Error(castValue._settledValue + "");
	                promise._attachExtraTrace(trace);
	                castValue._setCarriedStackTrace(trace);
	              }
	              promise._follow(castValue);
	              promise._propagateFrom(castValue, 1);
	            } else {
	              promise._fulfillUnchecked(x);
	            }
	          }
	        };
	        Promise.prototype._follow = function Promise$_follow(promise) {
	          this._setFollowing();
	          if (promise.isPending()) {
	            this._propagateFrom(promise, 1);
	            promise._proxyPromise(this);
	          } else if (promise.isFulfilled()) {
	            this._fulfillUnchecked(promise._settledValue);
	          } else {
	            this._rejectUnchecked(promise._settledValue, promise._getCarriedStackTrace());
	          }
	          if (promise._isRejectionUnhandled())
	            promise._unsetRejectionIsUnhandled();
	          if (debugging && promise._traceParent == null) {
	            promise._traceParent = this;
	          }
	        };
	        Promise.prototype._tryFollow = function Promise$_tryFollow(value) {
	          if (this._isFollowingOrFulfilledOrRejected() || value === this) {
	            return false;
	          }
	          var maybePromise = cast(value, void 0);
	          if (!(maybePromise instanceof Promise)) {
	            return false;
	          }
	          this._follow(maybePromise);
	          return true;
	        };
	        Promise.prototype._resetTrace = function Promise$_resetTrace() {
	          if (debugging) {
	            this._trace = new CapturedTrace(this._peekContext() === void 0);
	          }
	        };
	        Promise.prototype._setTrace = function Promise$_setTrace(parent) {
	          if (debugging) {
	            var context = this._peekContext();
	            this._traceParent = context;
	            var isTopLevel = context === void 0;
	            if (parent !== void 0 && parent._traceParent === context) {
	              this._trace = parent._trace;
	            } else {
	              this._trace = new CapturedTrace(isTopLevel);
	            }
	          }
	          return this;
	        };
	        Promise.prototype._tryAttachExtraTrace = function Promise$_tryAttachExtraTrace(error) {
	          if (canAttach(error)) {
	            this._attachExtraTrace(error);
	          }
	        };
	        Promise.prototype._attachExtraTrace = function Promise$_attachExtraTrace(error) {
	          if (debugging) {
	            var promise = this;
	            var stack = error.stack;
	            stack = typeof stack === "string" ? stack.split("\n") : [];
	            CapturedTrace.protectErrorMessageNewlines(stack);
	            var headerLineCount = 1;
	            var combinedTraces = 1;
	            while (promise != null && promise._trace != null) {
	              stack = CapturedTrace.combine(stack, promise._trace.stack.split("\n"));
	              promise = promise._traceParent;
	              combinedTraces++;
	            }
	            var stackTraceLimit = Error.stackTraceLimit || 10;
	            var max = (stackTraceLimit + headerLineCount) * combinedTraces;
	            var len = stack.length;
	            if (len > max) {
	              stack.length = max;
	            }
	            if (len > 0)
	              stack[0] = stack[0].split("\u0002\u0000\u0001").join("\n");
	            if (stack.length <= headerLineCount) {
	              error.stack = "(No stack trace)";
	            } else {
	              error.stack = stack.join("\n");
	            }
	          }
	        };
	        Promise.prototype._cleanValues = function Promise$_cleanValues() {
	          if (this._cancellable()) {
	            this._cancellationParent = void 0;
	          }
	        };
	        Promise.prototype._propagateFrom = function Promise$_propagateFrom(parent, flags) {
	          if ((flags & 1) > 0 && parent._cancellable()) {
	            this._setCancellable();
	            this._cancellationParent = parent;
	          }
	          if ((flags & 4) > 0) {
	            this._setBoundTo(parent._boundTo);
	          }
	          if ((flags & 2) > 0) {
	            this._setTrace(parent);
	          }
	        };
	        Promise.prototype._fulfill = function Promise$_fulfill(value) {
	          if (this._isFollowingOrFulfilledOrRejected())
	            return;
	          this._fulfillUnchecked(value);
	        };
	        Promise.prototype._reject = function Promise$_reject(reason, carriedStackTrace) {
	          if (this._isFollowingOrFulfilledOrRejected())
	            return;
	          this._rejectUnchecked(reason, carriedStackTrace);
	        };
	        Promise.prototype._settlePromiseAt = function Promise$_settlePromiseAt(index) {
	          var handler = this.isFulfilled() ? this._fulfillmentHandlerAt(index) : this._rejectionHandlerAt(index);
	          var value = this._settledValue;
	          var receiver = this._receiverAt(index);
	          var promise = this._promiseAt(index);
	          if (typeof handler === "function") {
	            this._settlePromiseFromHandler(handler, receiver, value, promise);
	          } else {
	            var done = false;
	            var isFulfilled = this.isFulfilled();
	            if (receiver !== void 0) {
	              if (receiver instanceof Promise && receiver._isProxied()) {
	                receiver._unsetProxied();
	                if (isFulfilled)
	                  receiver._fulfillUnchecked(value);
	                else
	                  receiver._rejectUnchecked(value, this._getCarriedStackTrace());
	                done = true;
	              } else if (receiver instanceof PromiseArray) {
	                if (isFulfilled)
	                  receiver._promiseFulfilled(value, promise);
	                else
	                  receiver._promiseRejected(value, promise);
	                done = true;
	              }
	            }
	            if (!done) {
	              if (isFulfilled)
	                promise._fulfill(value);
	              else
	                promise._reject(value, this._getCarriedStackTrace());
	            }
	          }
	          if (index >= 4) {
	            this._queueGC();
	          }
	        };
	        Promise.prototype._isProxied = function Promise$_isProxied() {
	          return (this._bitField & 4194304) === 4194304;
	        };
	        Promise.prototype._setProxied = function Promise$_setProxied() {
	          this._bitField = this._bitField | 4194304;
	        };
	        Promise.prototype._unsetProxied = function Promise$_unsetProxied() {
	          this._bitField = this._bitField & (~4194304);
	        };
	        Promise.prototype._isGcQueued = function Promise$_isGcQueued() {
	          return (this._bitField & -1073741824) === -1073741824;
	        };
	        Promise.prototype._setGcQueued = function Promise$_setGcQueued() {
	          this._bitField = this._bitField | -1073741824;
	        };
	        Promise.prototype._unsetGcQueued = function Promise$_unsetGcQueued() {
	          this._bitField = this._bitField & (~-1073741824);
	        };
	        Promise.prototype._queueGC = function Promise$_queueGC() {
	          if (this._isGcQueued())
	            return;
	          this._setGcQueued();
	          async.invokeLater(this._gc, this, void 0);
	        };
	        Promise.prototype._gc = function Promise$gc() {
	          var len = this._length() * 5 - 5;
	          for (var i = 0; i < len; i++) {
	            delete this[i];
	          }
	          this._clearFirstHandlerData();
	          this._setLength(0);
	          this._unsetGcQueued();
	        };
	        Promise.prototype._clearFirstHandlerData = function Promise$_clearFirstHandlerData() {
	          this._fulfillmentHandler0 = void 0;
	          this._rejectionHandler0 = void 0;
	          this._promise0 = void 0;
	          this._receiver0 = void 0;
	        };
	        Promise.prototype._queueSettleAt = function Promise$_queueSettleAt(index) {
	          if (this._isRejectionUnhandled())
	            this._unsetRejectionIsUnhandled();
	          async.invoke(this._settlePromiseAt, this, index);
	        };
	        Promise.prototype._fulfillUnchecked = function Promise$_fulfillUnchecked(value) {
	          if (!this.isPending())
	            return;
	          if (value === this) {
	            var err = makeSelfResolutionError();
	            this._attachExtraTrace(err);
	            return this._rejectUnchecked(err, void 0);
	          }
	          this._cleanValues();
	          this._setFulfilled();
	          this._settledValue = value;
	          var len = this._length();
	          if (len > 0) {
	            async.invoke(this._settlePromises, this, len);
	          }
	        };
	        Promise.prototype._rejectUncheckedCheckError = function Promise$_rejectUncheckedCheckError(reason) {
	          var trace = canAttach(reason) ? reason : new Error(reason + "");
	          this._rejectUnchecked(reason, trace === reason ? void 0 : trace);
	        };
	        Promise.prototype._rejectUnchecked = function Promise$_rejectUnchecked(reason, trace) {
	          if (!this.isPending())
	            return;
	          if (reason === this) {
	            var err = makeSelfResolutionError();
	            this._attachExtraTrace(err);
	            return this._rejectUnchecked(err);
	          }
	          this._cleanValues();
	          this._setRejected();
	          this._settledValue = reason;
	          if (this._isFinal()) {
	            async.invokeLater(thrower, void 0, trace === void 0 ? reason : trace);
	            return;
	          }
	          var len = this._length();
	          if (trace !== void 0)
	            this._setCarriedStackTrace(trace);
	          if (len > 0) {
	            async.invoke(this._rejectPromises, this, null);
	          } else {
	            this._ensurePossibleRejectionHandled();
	          }
	        };
	        Promise.prototype._rejectPromises = function Promise$_rejectPromises() {
	          this._settlePromises();
	          this._unsetCarriedStackTrace();
	        };
	        Promise.prototype._settlePromises = function Promise$_settlePromises() {
	          var len = this._length();
	          for (var i = 0; i < len; i++) {
	            this._settlePromiseAt(i);
	          }
	        };
	        Promise.prototype._ensurePossibleRejectionHandled = function Promise$_ensurePossibleRejectionHandled() {
	          this._setRejectionIsUnhandled();
	          if (CapturedTrace.possiblyUnhandledRejection !== void 0) {
	            async.invokeLater(this._notifyUnhandledRejection, this, void 0);
	          }
	        };
	        Promise.prototype._notifyUnhandledRejectionIsHandled = function Promise$_notifyUnhandledRejectionIsHandled() {
	          if (typeof unhandledRejectionHandled === "function") {
	            async.invokeLater(unhandledRejectionHandled, void 0, this);
	          }
	        };
	        Promise.prototype._notifyUnhandledRejection = function Promise$_notifyUnhandledRejection() {
	          if (this._isRejectionUnhandled()) {
	            var reason = this._settledValue;
	            var trace = this._getCarriedStackTrace();
	            this._setUnhandledRejectionIsNotified();
	            if (trace !== void 0) {
	              this._unsetCarriedStackTrace();
	              reason = trace;
	            }
	            if (typeof CapturedTrace.possiblyUnhandledRejection === "function") {
	              CapturedTrace.possiblyUnhandledRejection(reason, this);
	            }
	          }
	        };
	        var contextStack = [];
	        Promise.prototype._peekContext = function Promise$_peekContext() {
	          var lastIndex = contextStack.length - 1;
	          if (lastIndex >= 0) {
	            return contextStack[lastIndex];
	          }
	          return void 0;
	        };
	        Promise.prototype._pushContext = function Promise$_pushContext() {
	          if (!debugging)
	            return;
	          contextStack.push(this);
	        };
	        Promise.prototype._popContext = function Promise$_popContext() {
	          if (!debugging)
	            return;
	          contextStack.pop();
	        };
	        Promise.noConflict = function Promise$NoConflict() {
	          return noConflict(Promise);
	        };
	        Promise.setScheduler = function(fn) {
	          if (typeof fn !== "function")
	            throw new TypeError("fn must be a function");
	          async._schedule = fn;
	        };
	        if (!CapturedTrace.isSupported()) {
	          Promise.longStackTraces = function() {};
	          debugging = false;
	        }
	        Promise._makeSelfResolutionError = makeSelfResolutionError;
	        _dereq_("./finally.js")(Promise, NEXT_FILTER, cast);
	        _dereq_("./direct_resolve.js")(Promise);
	        _dereq_("./synchronous_inspection.js")(Promise);
	        _dereq_("./join.js")(Promise, PromiseArray, cast, INTERNAL);
	        Promise.RangeError = RangeError;
	        Promise.CancellationError = CancellationError;
	        Promise.TimeoutError = TimeoutError;
	        Promise.TypeError = TypeError;
	        Promise.OperationalError = OperationalError;
	        Promise.RejectionError = OperationalError;
	        Promise.AggregateError = errors.AggregateError;
	        util.toFastProperties(Promise);
	        util.toFastProperties(Promise.prototype);
	        Promise.Promise = Promise;
	        _dereq_('./timers.js')(Promise, INTERNAL, cast);
	        _dereq_('./race.js')(Promise, INTERNAL, cast);
	        _dereq_('./call_get.js')(Promise);
	        _dereq_('./generators.js')(Promise, apiRejection, INTERNAL, cast);
	        _dereq_('./map.js')(Promise, PromiseArray, apiRejection, cast, INTERNAL);
	        _dereq_('./nodeify.js')(Promise);
	        _dereq_('./promisify.js')(Promise, INTERNAL);
	        _dereq_('./props.js')(Promise, PromiseArray, cast);
	        _dereq_('./reduce.js')(Promise, PromiseArray, apiRejection, cast, INTERNAL);
	        _dereq_('./settle.js')(Promise, PromiseArray);
	        _dereq_('./some.js')(Promise, PromiseArray, apiRejection);
	        _dereq_('./progress.js')(Promise, PromiseArray);
	        _dereq_('./cancel.js')(Promise, INTERNAL);
	        _dereq_('./filter.js')(Promise, INTERNAL);
	        _dereq_('./any.js')(Promise, PromiseArray);
	        _dereq_('./each.js')(Promise, INTERNAL);
	        _dereq_('./using.js')(Promise, apiRejection, cast);
	        Promise.prototype = Promise.prototype;
	        return Promise;
	      };
	    }, {
	      "./any.js": 1,
	      "./async.js": 2,
	      "./call_get.js": 4,
	      "./cancel.js": 5,
	      "./captured_trace.js": 6,
	      "./catch_filter.js": 7,
	      "./direct_resolve.js": 8,
	      "./each.js": 9,
	      "./errors.js": 10,
	      "./errors_api_rejection": 11,
	      "./filter.js": 13,
	      "./finally.js": 14,
	      "./generators.js": 15,
	      "./join.js": 16,
	      "./map.js": 17,
	      "./nodeify.js": 18,
	      "./progress.js": 19,
	      "./promise_array.js": 21,
	      "./promise_resolver.js": 22,
	      "./promisify.js": 23,
	      "./props.js": 24,
	      "./race.js": 26,
	      "./reduce.js": 27,
	      "./settle.js": 29,
	      "./some.js": 30,
	      "./synchronous_inspection.js": 31,
	      "./thenables.js": 32,
	      "./timers.js": 33,
	      "./using.js": 34,
	      "./util.js": 35
	    }],
	    21: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, INTERNAL, cast) {
	        var canAttach = _dereq_("./errors.js").canAttach;
	        var util = _dereq_("./util.js");
	        var isArray = util.isArray;
	        function toResolutionValue(val) {
	          switch (val) {
	            case -1:
	              return void 0;
	            case -2:
	              return [];
	            case -3:
	              return {};
	          }
	        }
	        function PromiseArray(values) {
	          var promise = this._promise = new Promise(INTERNAL);
	          var parent = void 0;
	          if (values instanceof Promise) {
	            parent = values;
	            promise._propagateFrom(parent, 1 | 4);
	          }
	          promise._setTrace(parent);
	          this._values = values;
	          this._length = 0;
	          this._totalResolved = 0;
	          this._init(void 0, -2);
	        }
	        PromiseArray.prototype.length = function PromiseArray$length() {
	          return this._length;
	        };
	        PromiseArray.prototype.promise = function PromiseArray$promise() {
	          return this._promise;
	        };
	        PromiseArray.prototype._init = function PromiseArray$_init(_, resolveValueIfEmpty) {
	          var values = cast(this._values, void 0);
	          if (values instanceof Promise) {
	            this._values = values;
	            values._setBoundTo(this._promise._boundTo);
	            if (values.isFulfilled()) {
	              values = values._settledValue;
	              if (!isArray(values)) {
	                var err = new Promise.TypeError("expecting an array, a promise or a thenable");
	                this.__hardReject__(err);
	                return;
	              }
	            } else if (values.isPending()) {
	              values._then(PromiseArray$_init, this._reject, void 0, this, resolveValueIfEmpty);
	              return;
	            } else {
	              values._unsetRejectionIsUnhandled();
	              this._reject(values._settledValue);
	              return;
	            }
	          } else if (!isArray(values)) {
	            var err = new Promise.TypeError("expecting an array, a promise or a thenable");
	            this.__hardReject__(err);
	            return;
	          }
	          if (values.length === 0) {
	            if (resolveValueIfEmpty === -5) {
	              this._resolveEmptyArray();
	            } else {
	              this._resolve(toResolutionValue(resolveValueIfEmpty));
	            }
	            return;
	          }
	          var len = this.getActualLength(values.length);
	          var newLen = len;
	          var newValues = this.shouldCopyValues() ? new Array(len) : this._values;
	          var isDirectScanNeeded = false;
	          for (var i = 0; i < len; ++i) {
	            var maybePromise = cast(values[i], void 0);
	            if (maybePromise instanceof Promise) {
	              if (maybePromise.isPending()) {
	                maybePromise._proxyPromiseArray(this, i);
	              } else {
	                maybePromise._unsetRejectionIsUnhandled();
	                isDirectScanNeeded = true;
	              }
	            } else {
	              isDirectScanNeeded = true;
	            }
	            newValues[i] = maybePromise;
	          }
	          this._values = newValues;
	          this._length = newLen;
	          if (isDirectScanNeeded) {
	            this._scanDirectValues(len);
	          }
	        };
	        PromiseArray.prototype._settlePromiseAt = function PromiseArray$_settlePromiseAt(index) {
	          var value = this._values[index];
	          if (!(value instanceof Promise)) {
	            this._promiseFulfilled(value, index);
	          } else if (value.isFulfilled()) {
	            this._promiseFulfilled(value._settledValue, index);
	          } else if (value.isRejected()) {
	            this._promiseRejected(value._settledValue, index);
	          }
	        };
	        PromiseArray.prototype._scanDirectValues = function PromiseArray$_scanDirectValues(len) {
	          for (var i = 0; i < len; ++i) {
	            if (this._isResolved()) {
	              break;
	            }
	            this._settlePromiseAt(i);
	          }
	        };
	        PromiseArray.prototype._isResolved = function PromiseArray$_isResolved() {
	          return this._values === null;
	        };
	        PromiseArray.prototype._resolve = function PromiseArray$_resolve(value) {
	          this._values = null;
	          this._promise._fulfill(value);
	        };
	        PromiseArray.prototype.__hardReject__ = PromiseArray.prototype._reject = function PromiseArray$_reject(reason) {
	          this._values = null;
	          var trace = canAttach(reason) ? reason : new Error(reason + "");
	          this._promise._attachExtraTrace(trace);
	          this._promise._reject(reason, trace);
	        };
	        PromiseArray.prototype._promiseProgressed = function PromiseArray$_promiseProgressed(progressValue, index) {
	          if (this._isResolved())
	            return;
	          this._promise._progress({
	            index: index,
	            value: progressValue
	          });
	        };
	        PromiseArray.prototype._promiseFulfilled = function PromiseArray$_promiseFulfilled(value, index) {
	          if (this._isResolved())
	            return;
	          this._values[index] = value;
	          var totalResolved = ++this._totalResolved;
	          if (totalResolved >= this._length) {
	            this._resolve(this._values);
	          }
	        };
	        PromiseArray.prototype._promiseRejected = function PromiseArray$_promiseRejected(reason, index) {
	          if (this._isResolved())
	            return;
	          this._totalResolved++;
	          this._reject(reason);
	        };
	        PromiseArray.prototype.shouldCopyValues = function PromiseArray$_shouldCopyValues() {
	          return true;
	        };
	        PromiseArray.prototype.getActualLength = function PromiseArray$getActualLength(len) {
	          return len;
	        };
	        return PromiseArray;
	      };
	    }, {
	      "./errors.js": 10,
	      "./util.js": 35
	    }],
	    22: [function(_dereq_, module, exports) {
	      "use strict";
	      var util = _dereq_("./util.js");
	      var maybeWrapAsError = util.maybeWrapAsError;
	      var errors = _dereq_("./errors.js");
	      var TimeoutError = errors.TimeoutError;
	      var OperationalError = errors.OperationalError;
	      var async = _dereq_("./async.js");
	      var haveGetters = util.haveGetters;
	      var es5 = _dereq_("./es5.js");
	      function isUntypedError(obj) {
	        return obj instanceof Error && es5.getPrototypeOf(obj) === Error.prototype;
	      }
	      function wrapAsOperationalError(obj) {
	        var ret;
	        if (isUntypedError(obj)) {
	          ret = new OperationalError(obj);
	        } else {
	          ret = obj;
	        }
	        errors.markAsOriginatingFromRejection(ret);
	        return ret;
	      }
	      function nodebackForPromise(promise) {
	        function PromiseResolver$_callback(err, value) {
	          if (promise === null)
	            return;
	          if (err) {
	            var wrapped = wrapAsOperationalError(maybeWrapAsError(err));
	            promise._attachExtraTrace(wrapped);
	            promise._reject(wrapped);
	          } else if (arguments.length > 2) {
	            var $_len = arguments.length;
	            var args = new Array($_len - 1);
	            for (var $_i = 1; $_i < $_len; ++$_i) {
	              args[$_i - 1] = arguments[$_i];
	            }
	            promise._fulfill(args);
	          } else {
	            promise._fulfill(value);
	          }
	          promise = null;
	        }
	        return PromiseResolver$_callback;
	      }
	      var PromiseResolver;
	      if (!haveGetters) {
	        PromiseResolver = function PromiseResolver(promise) {
	          this.promise = promise;
	          this.asCallback = nodebackForPromise(promise);
	          this.callback = this.asCallback;
	        };
	      } else {
	        PromiseResolver = function PromiseResolver(promise) {
	          this.promise = promise;
	        };
	      }
	      if (haveGetters) {
	        var prop = {get: function() {
	            return nodebackForPromise(this.promise);
	          }};
	        es5.defineProperty(PromiseResolver.prototype, "asCallback", prop);
	        es5.defineProperty(PromiseResolver.prototype, "callback", prop);
	      }
	      PromiseResolver._nodebackForPromise = nodebackForPromise;
	      PromiseResolver.prototype.toString = function PromiseResolver$toString() {
	        return "[object PromiseResolver]";
	      };
	      PromiseResolver.prototype.resolve = PromiseResolver.prototype.fulfill = function PromiseResolver$resolve(value) {
	        if (!(this instanceof PromiseResolver)) {
	          throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.");
	        }
	        var promise = this.promise;
	        if (promise._tryFollow(value)) {
	          return;
	        }
	        async.invoke(promise._fulfill, promise, value);
	      };
	      PromiseResolver.prototype.reject = function PromiseResolver$reject(reason) {
	        if (!(this instanceof PromiseResolver)) {
	          throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.");
	        }
	        var promise = this.promise;
	        errors.markAsOriginatingFromRejection(reason);
	        var trace = errors.canAttach(reason) ? reason : new Error(reason + "");
	        promise._attachExtraTrace(trace);
	        async.invoke(promise._reject, promise, reason);
	        if (trace !== reason) {
	          async.invoke(this._setCarriedStackTrace, this, trace);
	        }
	      };
	      PromiseResolver.prototype.progress = function PromiseResolver$progress(value) {
	        if (!(this instanceof PromiseResolver)) {
	          throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.");
	        }
	        async.invoke(this.promise._progress, this.promise, value);
	      };
	      PromiseResolver.prototype.cancel = function PromiseResolver$cancel() {
	        async.invoke(this.promise.cancel, this.promise, void 0);
	      };
	      PromiseResolver.prototype.timeout = function PromiseResolver$timeout() {
	        this.reject(new TimeoutError("timeout"));
	      };
	      PromiseResolver.prototype.isResolved = function PromiseResolver$isResolved() {
	        return this.promise.isResolved();
	      };
	      PromiseResolver.prototype.toJSON = function PromiseResolver$toJSON() {
	        return this.promise.toJSON();
	      };
	      PromiseResolver.prototype._setCarriedStackTrace = function PromiseResolver$_setCarriedStackTrace(trace) {
	        if (this.promise.isRejected()) {
	          this.promise._setCarriedStackTrace(trace);
	        }
	      };
	      module.exports = PromiseResolver;
	    }, {
	      "./async.js": 2,
	      "./errors.js": 10,
	      "./es5.js": 12,
	      "./util.js": 35
	    }],
	    23: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, INTERNAL) {
	        var THIS = {};
	        var util = _dereq_("./util.js");
	        var nodebackForPromise = _dereq_("./promise_resolver.js")._nodebackForPromise;
	        var withAppended = util.withAppended;
	        var maybeWrapAsError = util.maybeWrapAsError;
	        var canEvaluate = util.canEvaluate;
	        var TypeError = _dereq_("./errors").TypeError;
	        var defaultSuffix = "Async";
	        var defaultFilter = function(name, func) {
	          return util.isIdentifier(name) && name.charAt(0) !== "_" && !util.isClass(func);
	        };
	        var defaultPromisified = {__isPromisified__: true};
	        function escapeIdentRegex(str) {
	          return str.replace(/([$])/, "\\$");
	        }
	        function isPromisified(fn) {
	          try {
	            return fn.__isPromisified__ === true;
	          } catch (e) {
	            return false;
	          }
	        }
	        function hasPromisified(obj, key, suffix) {
	          var val = util.getDataPropertyOrDefault(obj, key + suffix, defaultPromisified);
	          return val ? isPromisified(val) : false;
	        }
	        function checkValid(ret, suffix, suffixRegexp) {
	          for (var i = 0; i < ret.length; i += 2) {
	            var key = ret[i];
	            if (suffixRegexp.test(key)) {
	              var keyWithoutAsyncSuffix = key.replace(suffixRegexp, "");
	              for (var j = 0; j < ret.length; j += 2) {
	                if (ret[j] === keyWithoutAsyncSuffix) {
	                  throw new TypeError("Cannot promisify an API " + "that has normal methods with '" + suffix + "'-suffix");
	                }
	              }
	            }
	          }
	        }
	        function promisifiableMethods(obj, suffix, suffixRegexp, filter) {
	          var keys = util.inheritedDataKeys(obj);
	          var ret = [];
	          for (var i = 0; i < keys.length; ++i) {
	            var key = keys[i];
	            var value = obj[key];
	            if (typeof value === "function" && !isPromisified(value) && !hasPromisified(obj, key, suffix) && filter(key, value, obj)) {
	              ret.push(key, value);
	            }
	          }
	          checkValid(ret, suffix, suffixRegexp);
	          return ret;
	        }
	        function switchCaseArgumentOrder(likelyArgumentCount) {
	          var ret = [likelyArgumentCount];
	          var min = Math.max(0, likelyArgumentCount - 1 - 5);
	          for (var i = likelyArgumentCount - 1; i >= min; --i) {
	            if (i === likelyArgumentCount)
	              continue;
	            ret.push(i);
	          }
	          for (var i = likelyArgumentCount + 1; i <= 5; ++i) {
	            ret.push(i);
	          }
	          return ret;
	        }
	        function argumentSequence(argumentCount) {
	          return util.filledRange(argumentCount, "arguments[", "]");
	        }
	        function parameterDeclaration(parameterCount) {
	          return util.filledRange(parameterCount, "_arg", "");
	        }
	        function parameterCount(fn) {
	          if (typeof fn.length === "number") {
	            return Math.max(Math.min(fn.length, 1023 + 1), 0);
	          }
	          return 0;
	        }
	        function generatePropertyAccess(key) {
	          if (util.isIdentifier(key)) {
	            return "." + key;
	          } else
	            return "['" + key.replace(/(['\\])/g, "\\$1") + "']";
	        }
	        function makeNodePromisifiedEval(callback, receiver, originalName, fn, suffix) {
	          var newParameterCount = Math.max(0, parameterCount(fn) - 1);
	          var argumentOrder = switchCaseArgumentOrder(newParameterCount);
	          var callbackName = (typeof originalName === "string" && util.isIdentifier(originalName) ? originalName + suffix : "promisified");
	          function generateCallForArgumentCount(count) {
	            var args = argumentSequence(count).join(", ");
	            var comma = count > 0 ? ", " : "";
	            var ret;
	            if (typeof callback === "string") {
	              ret = "                                                          \n\
	                this.method({{args}}, fn);                                   \n\
	                break;                                                       \n\
	            ".replace(".method", generatePropertyAccess(callback));
	            } else if (receiver === THIS) {
	              ret = "                                                         \n\
	                callback.call(this, {{args}}, fn);                           \n\
	                break;                                                       \n\
	            ";
	            } else if (receiver !== void 0) {
	              ret = "                                                         \n\
	                callback.call(receiver, {{args}}, fn);                       \n\
	                break;                                                       \n\
	            ";
	            } else {
	              ret = "                                                         \n\
	                callback({{args}}, fn);                                      \n\
	                break;                                                       \n\
	            ";
	            }
	            return ret.replace("{{args}}", args).replace(", ", comma);
	          }
	          function generateArgumentSwitchCase() {
	            var ret = "";
	            for (var i = 0; i < argumentOrder.length; ++i) {
	              ret += "case " + argumentOrder[i] + ":" + generateCallForArgumentCount(argumentOrder[i]);
	            }
	            var codeForCall;
	            if (typeof callback === "string") {
	              codeForCall = "                                                  \n\
	                this.property.apply(this, args);                             \n\
	            ".replace(".property", generatePropertyAccess(callback));
	            } else if (receiver === THIS) {
	              codeForCall = "                                                  \n\
	                callback.apply(this, args);                                  \n\
	            ";
	            } else {
	              codeForCall = "                                                  \n\
	                callback.apply(receiver, args);                              \n\
	            ";
	            }
	            ret += "                                                             \n\
	        default:                                                             \n\
	            var args = new Array(len + 1);                                   \n\
	            var i = 0;                                                       \n\
	            for (var i = 0; i < len; ++i) {                                  \n\
	               args[i] = arguments[i];                                       \n\
	            }                                                                \n\
	            args[i] = fn;                                                    \n\
	            [CodeForCall]                                                    \n\
	            break;                                                           \n\
	        ".replace("[CodeForCall]", codeForCall);
	            return ret;
	          }
	          return new Function("Promise", "callback", "receiver", "withAppended", "maybeWrapAsError", "nodebackForPromise", "INTERNAL", "                                         \n\
	        var ret = function FunctionName(Parameters) {                        \n\
	            'use strict';                                                    \n\
	            var len = arguments.length;                                      \n\
	            var promise = new Promise(INTERNAL);                             \n\
	            promise._setTrace(void 0);                                       \n\
	            var fn = nodebackForPromise(promise);                            \n\
	            try {                                                            \n\
	                switch(len) {                                                \n\
	                    [CodeForSwitchCase]                                      \n\
	                }                                                            \n\
	            } catch (e) {                                                    \n\
	                var wrapped = maybeWrapAsError(e);                           \n\
	                promise._attachExtraTrace(wrapped);                          \n\
	                promise._reject(wrapped);                                    \n\
	            }                                                                \n\
	            return promise;                                                  \n\
	        };                                                                   \n\
	        ret.__isPromisified__ = true;                                        \n\
	        return ret;                                                          \n\
	        ".replace("FunctionName", callbackName).replace("Parameters", parameterDeclaration(newParameterCount)).replace("[CodeForSwitchCase]", generateArgumentSwitchCase()))(Promise, callback, receiver, withAppended, maybeWrapAsError, nodebackForPromise, INTERNAL);
	        }
	        function makeNodePromisifiedClosure(callback, receiver) {
	          function promisified() {
	            var _receiver = receiver;
	            if (receiver === THIS)
	              _receiver = this;
	            if (typeof callback === "string") {
	              callback = _receiver[callback];
	            }
	            var promise = new Promise(INTERNAL);
	            promise._setTrace(void 0);
	            var fn = nodebackForPromise(promise);
	            try {
	              callback.apply(_receiver, withAppended(arguments, fn));
	            } catch (e) {
	              var wrapped = maybeWrapAsError(e);
	              promise._attachExtraTrace(wrapped);
	              promise._reject(wrapped);
	            }
	            return promise;
	          }
	          promisified.__isPromisified__ = true;
	          return promisified;
	        }
	        var makeNodePromisified = canEvaluate ? makeNodePromisifiedEval : makeNodePromisifiedClosure;
	        function promisifyAll(obj, suffix, filter, promisifier) {
	          var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + "$");
	          var methods = promisifiableMethods(obj, suffix, suffixRegexp, filter);
	          for (var i = 0,
	              len = methods.length; i < len; i += 2) {
	            var key = methods[i];
	            var fn = methods[i + 1];
	            var promisifiedKey = key + suffix;
	            obj[promisifiedKey] = promisifier === makeNodePromisified ? makeNodePromisified(key, THIS, key, fn, suffix) : promisifier(fn);
	          }
	          util.toFastProperties(obj);
	          return obj;
	        }
	        function promisify(callback, receiver) {
	          return makeNodePromisified(callback, receiver, void 0, callback);
	        }
	        Promise.promisify = function Promise$Promisify(fn, receiver) {
	          if (typeof fn !== "function") {
	            throw new TypeError("fn must be a function");
	          }
	          if (isPromisified(fn)) {
	            return fn;
	          }
	          return promisify(fn, arguments.length < 2 ? THIS : receiver);
	        };
	        Promise.promisifyAll = function Promise$PromisifyAll(target, options) {
	          if (typeof target !== "function" && typeof target !== "object") {
	            throw new TypeError("the target of promisifyAll must be an object or a function");
	          }
	          options = Object(options);
	          var suffix = options.suffix;
	          if (typeof suffix !== "string")
	            suffix = defaultSuffix;
	          var filter = options.filter;
	          if (typeof filter !== "function")
	            filter = defaultFilter;
	          var promisifier = options.promisifier;
	          if (typeof promisifier !== "function")
	            promisifier = makeNodePromisified;
	          if (!util.isIdentifier(suffix)) {
	            throw new RangeError("suffix must be a valid identifier");
	          }
	          var keys = util.inheritedDataKeys(target, {includeHidden: true});
	          for (var i = 0; i < keys.length; ++i) {
	            var value = target[keys[i]];
	            if (keys[i] !== "constructor" && util.isClass(value)) {
	              promisifyAll(value.prototype, suffix, filter, promisifier);
	              promisifyAll(value, suffix, filter, promisifier);
	            }
	          }
	          return promisifyAll(target, suffix, filter, promisifier);
	        };
	      };
	    }, {
	      "./errors": 10,
	      "./promise_resolver.js": 22,
	      "./util.js": 35
	    }],
	    24: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, PromiseArray, cast) {
	        var util = _dereq_("./util.js");
	        var apiRejection = _dereq_("./errors_api_rejection")(Promise);
	        var isObject = util.isObject;
	        var es5 = _dereq_("./es5.js");
	        function PropertiesPromiseArray(obj) {
	          var keys = es5.keys(obj);
	          var len = keys.length;
	          var values = new Array(len * 2);
	          for (var i = 0; i < len; ++i) {
	            var key = keys[i];
	            values[i] = obj[key];
	            values[i + len] = key;
	          }
	          this.constructor$(values);
	        }
	        util.inherits(PropertiesPromiseArray, PromiseArray);
	        PropertiesPromiseArray.prototype._init = function PropertiesPromiseArray$_init() {
	          this._init$(void 0, -3);
	        };
	        PropertiesPromiseArray.prototype._promiseFulfilled = function PropertiesPromiseArray$_promiseFulfilled(value, index) {
	          if (this._isResolved())
	            return;
	          this._values[index] = value;
	          var totalResolved = ++this._totalResolved;
	          if (totalResolved >= this._length) {
	            var val = {};
	            var keyOffset = this.length();
	            for (var i = 0,
	                len = this.length(); i < len; ++i) {
	              val[this._values[i + keyOffset]] = this._values[i];
	            }
	            this._resolve(val);
	          }
	        };
	        PropertiesPromiseArray.prototype._promiseProgressed = function PropertiesPromiseArray$_promiseProgressed(value, index) {
	          if (this._isResolved())
	            return;
	          this._promise._progress({
	            key: this._values[index + this.length()],
	            value: value
	          });
	        };
	        PropertiesPromiseArray.prototype.shouldCopyValues = function PropertiesPromiseArray$_shouldCopyValues() {
	          return false;
	        };
	        PropertiesPromiseArray.prototype.getActualLength = function PropertiesPromiseArray$getActualLength(len) {
	          return len >> 1;
	        };
	        function Promise$_Props(promises) {
	          var ret;
	          var castValue = cast(promises, void 0);
	          if (!isObject(castValue)) {
	            return apiRejection("cannot await properties of a non-object");
	          } else if (castValue instanceof Promise) {
	            ret = castValue._then(Promise.props, void 0, void 0, void 0, void 0);
	          } else {
	            ret = new PropertiesPromiseArray(castValue).promise();
	          }
	          if (castValue instanceof Promise) {
	            ret._propagateFrom(castValue, 4);
	          }
	          return ret;
	        }
	        Promise.prototype.props = function Promise$props() {
	          return Promise$_Props(this);
	        };
	        Promise.props = function Promise$Props(promises) {
	          return Promise$_Props(promises);
	        };
	      };
	    }, {
	      "./errors_api_rejection": 11,
	      "./es5.js": 12,
	      "./util.js": 35
	    }],
	    25: [function(_dereq_, module, exports) {
	      "use strict";
	      function arrayCopy(src, srcIndex, dst, dstIndex, len) {
	        for (var j = 0; j < len; ++j) {
	          dst[j + dstIndex] = src[j + srcIndex];
	        }
	      }
	      function Queue(capacity) {
	        this._capacity = capacity;
	        this._length = 0;
	        this._front = 0;
	        this._makeCapacity();
	      }
	      Queue.prototype._willBeOverCapacity = function Queue$_willBeOverCapacity(size) {
	        return this._capacity < size;
	      };
	      Queue.prototype._pushOne = function Queue$_pushOne(arg) {
	        var length = this.length();
	        this._checkCapacity(length + 1);
	        var i = (this._front + length) & (this._capacity - 1);
	        this[i] = arg;
	        this._length = length + 1;
	      };
	      Queue.prototype.push = function Queue$push(fn, receiver, arg) {
	        var length = this.length() + 3;
	        if (this._willBeOverCapacity(length)) {
	          this._pushOne(fn);
	          this._pushOne(receiver);
	          this._pushOne(arg);
	          return;
	        }
	        var j = this._front + length - 3;
	        this._checkCapacity(length);
	        var wrapMask = this._capacity - 1;
	        this[(j + 0) & wrapMask] = fn;
	        this[(j + 1) & wrapMask] = receiver;
	        this[(j + 2) & wrapMask] = arg;
	        this._length = length;
	      };
	      Queue.prototype.shift = function Queue$shift() {
	        var front = this._front,
	            ret = this[front];
	        this[front] = void 0;
	        this._front = (front + 1) & (this._capacity - 1);
	        this._length--;
	        return ret;
	      };
	      Queue.prototype.length = function Queue$length() {
	        return this._length;
	      };
	      Queue.prototype._makeCapacity = function Queue$_makeCapacity() {
	        var len = this._capacity;
	        for (var i = 0; i < len; ++i) {
	          this[i] = void 0;
	        }
	      };
	      Queue.prototype._checkCapacity = function Queue$_checkCapacity(size) {
	        if (this._capacity < size) {
	          this._resizeTo(this._capacity << 3);
	        }
	      };
	      Queue.prototype._resizeTo = function Queue$_resizeTo(capacity) {
	        var oldFront = this._front;
	        var oldCapacity = this._capacity;
	        var oldQueue = new Array(oldCapacity);
	        var length = this.length();
	        arrayCopy(this, 0, oldQueue, 0, oldCapacity);
	        this._capacity = capacity;
	        this._makeCapacity();
	        this._front = 0;
	        if (oldFront + length <= oldCapacity) {
	          arrayCopy(oldQueue, oldFront, this, 0, length);
	        } else {
	          var lengthBeforeWrapping = length - ((oldFront + length) & (oldCapacity - 1));
	          arrayCopy(oldQueue, oldFront, this, 0, lengthBeforeWrapping);
	          arrayCopy(oldQueue, 0, this, lengthBeforeWrapping, length - lengthBeforeWrapping);
	        }
	      };
	      module.exports = Queue;
	    }, {}],
	    26: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, INTERNAL, cast) {
	        var apiRejection = _dereq_("./errors_api_rejection.js")(Promise);
	        var isArray = _dereq_("./util.js").isArray;
	        var raceLater = function Promise$_raceLater(promise) {
	          return promise.then(function(array) {
	            return Promise$_Race(array, promise);
	          });
	        };
	        var hasOwn = {}.hasOwnProperty;
	        function Promise$_Race(promises, parent) {
	          var maybePromise = cast(promises, void 0);
	          if (maybePromise instanceof Promise) {
	            return raceLater(maybePromise);
	          } else if (!isArray(promises)) {
	            return apiRejection("expecting an array, a promise or a thenable");
	          }
	          var ret = new Promise(INTERNAL);
	          if (parent !== void 0) {
	            ret._propagateFrom(parent, 7);
	          } else {
	            ret._setTrace(void 0);
	          }
	          var fulfill = ret._fulfill;
	          var reject = ret._reject;
	          for (var i = 0,
	              len = promises.length; i < len; ++i) {
	            var val = promises[i];
	            if (val === void 0 && !(hasOwn.call(promises, i))) {
	              continue;
	            }
	            Promise.cast(val)._then(fulfill, reject, void 0, ret, null);
	          }
	          return ret;
	        }
	        Promise.race = function Promise$Race(promises) {
	          return Promise$_Race(promises, void 0);
	        };
	        Promise.prototype.race = function Promise$race() {
	          return Promise$_Race(this, void 0);
	        };
	      };
	    }, {
	      "./errors_api_rejection.js": 11,
	      "./util.js": 35
	    }],
	    27: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, PromiseArray, apiRejection, cast, INTERNAL) {
	        var util = _dereq_("./util.js");
	        var tryCatch4 = util.tryCatch4;
	        var tryCatch3 = util.tryCatch3;
	        var errorObj = util.errorObj;
	        function ReductionPromiseArray(promises, fn, accum, _each) {
	          this.constructor$(promises);
	          this._preservedValues = _each === INTERNAL ? [] : null;
	          this._zerothIsAccum = (accum === void 0);
	          this._gotAccum = false;
	          this._reducingIndex = (this._zerothIsAccum ? 1 : 0);
	          this._valuesPhase = undefined;
	          var maybePromise = cast(accum, void 0);
	          var rejected = false;
	          var isPromise = maybePromise instanceof Promise;
	          if (isPromise) {
	            if (maybePromise.isPending()) {
	              maybePromise._proxyPromiseArray(this, -1);
	            } else if (maybePromise.isFulfilled()) {
	              accum = maybePromise.value();
	              this._gotAccum = true;
	            } else {
	              maybePromise._unsetRejectionIsUnhandled();
	              this._reject(maybePromise.reason());
	              rejected = true;
	            }
	          }
	          if (!(isPromise || this._zerothIsAccum))
	            this._gotAccum = true;
	          this._callback = fn;
	          this._accum = accum;
	          if (!rejected)
	            this._init$(void 0, -5);
	        }
	        util.inherits(ReductionPromiseArray, PromiseArray);
	        ReductionPromiseArray.prototype._init = function ReductionPromiseArray$_init() {};
	        ReductionPromiseArray.prototype._resolveEmptyArray = function ReductionPromiseArray$_resolveEmptyArray() {
	          if (this._gotAccum || this._zerothIsAccum) {
	            this._resolve(this._preservedValues !== null ? [] : this._accum);
	          }
	        };
	        ReductionPromiseArray.prototype._promiseFulfilled = function ReductionPromiseArray$_promiseFulfilled(value, index) {
	          var values = this._values;
	          if (values === null)
	            return;
	          var length = this.length();
	          var preservedValues = this._preservedValues;
	          var isEach = preservedValues !== null;
	          var gotAccum = this._gotAccum;
	          var valuesPhase = this._valuesPhase;
	          var valuesPhaseIndex;
	          if (!valuesPhase) {
	            valuesPhase = this._valuesPhase = Array(length);
	            for (valuesPhaseIndex = 0; valuesPhaseIndex < length; ++valuesPhaseIndex) {
	              valuesPhase[valuesPhaseIndex] = 0;
	            }
	          }
	          valuesPhaseIndex = valuesPhase[index];
	          if (index === 0 && this._zerothIsAccum) {
	            if (!gotAccum) {
	              this._accum = value;
	              this._gotAccum = gotAccum = true;
	            }
	            valuesPhase[index] = ((valuesPhaseIndex === 0) ? 1 : 2);
	          } else if (index === -1) {
	            if (!gotAccum) {
	              this._accum = value;
	              this._gotAccum = gotAccum = true;
	            }
	          } else {
	            if (valuesPhaseIndex === 0) {
	              valuesPhase[index] = 1;
	            } else {
	              valuesPhase[index] = 2;
	              if (gotAccum) {
	                this._accum = value;
	              }
	            }
	          }
	          if (!gotAccum)
	            return;
	          var callback = this._callback;
	          var receiver = this._promise._boundTo;
	          var ret;
	          for (var i = this._reducingIndex; i < length; ++i) {
	            valuesPhaseIndex = valuesPhase[i];
	            if (valuesPhaseIndex === 2) {
	              this._reducingIndex = i + 1;
	              continue;
	            }
	            if (valuesPhaseIndex !== 1)
	              return;
	            value = values[i];
	            if (value instanceof Promise) {
	              if (value.isFulfilled()) {
	                value = value._settledValue;
	              } else if (value.isPending()) {
	                return;
	              } else {
	                value._unsetRejectionIsUnhandled();
	                return this._reject(value.reason());
	              }
	            }
	            if (isEach) {
	              preservedValues.push(value);
	              ret = tryCatch3(callback, receiver, value, i, length);
	            } else {
	              ret = tryCatch4(callback, receiver, this._accum, value, i, length);
	            }
	            if (ret === errorObj)
	              return this._reject(ret.e);
	            var maybePromise = cast(ret, void 0);
	            if (maybePromise instanceof Promise) {
	              if (maybePromise.isPending()) {
	                valuesPhase[i] = 4;
	                return maybePromise._proxyPromiseArray(this, i);
	              } else if (maybePromise.isFulfilled()) {
	                ret = maybePromise.value();
	              } else {
	                maybePromise._unsetRejectionIsUnhandled();
	                return this._reject(maybePromise.reason());
	              }
	            }
	            this._reducingIndex = i + 1;
	            this._accum = ret;
	          }
	          if (this._reducingIndex < length)
	            return;
	          this._resolve(isEach ? preservedValues : this._accum);
	        };
	        function reduce(promises, fn, initialValue, _each) {
	          if (typeof fn !== "function")
	            return apiRejection("fn must be a function");
	          var array = new ReductionPromiseArray(promises, fn, initialValue, _each);
	          return array.promise();
	        }
	        Promise.prototype.reduce = function Promise$reduce(fn, initialValue) {
	          return reduce(this, fn, initialValue, null);
	        };
	        Promise.reduce = function Promise$Reduce(promises, fn, initialValue, _each) {
	          return reduce(promises, fn, initialValue, _each);
	        };
	      };
	    }, {"./util.js": 35}],
	    28: [function(_dereq_, module, exports) {
	      "use strict";
	      var schedule;
	      var _MutationObserver;
	      if (typeof process === "object" && typeof process.version === "string") {
	        schedule = function Promise$_Scheduler(fn) {
	          process.nextTick(fn);
	        };
	      } else if ((typeof MutationObserver !== "undefined" && (_MutationObserver = MutationObserver)) || (typeof WebKitMutationObserver !== "undefined" && (_MutationObserver = WebKitMutationObserver))) {
	        schedule = (function() {
	          var div = document.createElement("div");
	          var queuedFn = void 0;
	          var observer = new _MutationObserver(function Promise$_Scheduler() {
	            var fn = queuedFn;
	            queuedFn = void 0;
	            fn();
	          });
	          observer.observe(div, {attributes: true});
	          return function Promise$_Scheduler(fn) {
	            queuedFn = fn;
	            div.classList.toggle("foo");
	          };
	        })();
	      } else if (typeof setTimeout !== "undefined") {
	        schedule = function Promise$_Scheduler(fn) {
	          setTimeout(fn, 0);
	        };
	      } else
	        throw new Error("no async scheduler available");
	      module.exports = schedule;
	    }, {}],
	    29: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, PromiseArray) {
	        var PromiseInspection = Promise.PromiseInspection;
	        var util = _dereq_("./util.js");
	        function SettledPromiseArray(values) {
	          this.constructor$(values);
	        }
	        util.inherits(SettledPromiseArray, PromiseArray);
	        SettledPromiseArray.prototype._promiseResolved = function SettledPromiseArray$_promiseResolved(index, inspection) {
	          this._values[index] = inspection;
	          var totalResolved = ++this._totalResolved;
	          if (totalResolved >= this._length) {
	            this._resolve(this._values);
	          }
	        };
	        SettledPromiseArray.prototype._promiseFulfilled = function SettledPromiseArray$_promiseFulfilled(value, index) {
	          if (this._isResolved())
	            return;
	          var ret = new PromiseInspection();
	          ret._bitField = 268435456;
	          ret._settledValue = value;
	          this._promiseResolved(index, ret);
	        };
	        SettledPromiseArray.prototype._promiseRejected = function SettledPromiseArray$_promiseRejected(reason, index) {
	          if (this._isResolved())
	            return;
	          var ret = new PromiseInspection();
	          ret._bitField = 134217728;
	          ret._settledValue = reason;
	          this._promiseResolved(index, ret);
	        };
	        Promise.settle = function Promise$Settle(promises) {
	          return new SettledPromiseArray(promises).promise();
	        };
	        Promise.prototype.settle = function Promise$settle() {
	          return new SettledPromiseArray(this).promise();
	        };
	      };
	    }, {"./util.js": 35}],
	    30: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, PromiseArray, apiRejection) {
	        var util = _dereq_("./util.js");
	        var RangeError = _dereq_("./errors.js").RangeError;
	        var AggregateError = _dereq_("./errors.js").AggregateError;
	        var isArray = util.isArray;
	        function SomePromiseArray(values) {
	          this.constructor$(values);
	          this._howMany = 0;
	          this._unwrap = false;
	          this._initialized = false;
	        }
	        util.inherits(SomePromiseArray, PromiseArray);
	        SomePromiseArray.prototype._init = function SomePromiseArray$_init() {
	          if (!this._initialized) {
	            return;
	          }
	          if (this._howMany === 0) {
	            this._resolve([]);
	            return;
	          }
	          this._init$(void 0, -5);
	          var isArrayResolved = isArray(this._values);
	          if (!this._isResolved() && isArrayResolved && this._howMany > this._canPossiblyFulfill()) {
	            this._reject(this._getRangeError(this.length()));
	          }
	        };
	        SomePromiseArray.prototype.init = function SomePromiseArray$init() {
	          this._initialized = true;
	          this._init();
	        };
	        SomePromiseArray.prototype.setUnwrap = function SomePromiseArray$setUnwrap() {
	          this._unwrap = true;
	        };
	        SomePromiseArray.prototype.howMany = function SomePromiseArray$howMany() {
	          return this._howMany;
	        };
	        SomePromiseArray.prototype.setHowMany = function SomePromiseArray$setHowMany(count) {
	          if (this._isResolved())
	            return;
	          this._howMany = count;
	        };
	        SomePromiseArray.prototype._promiseFulfilled = function SomePromiseArray$_promiseFulfilled(value) {
	          if (this._isResolved())
	            return;
	          this._addFulfilled(value);
	          if (this._fulfilled() === this.howMany()) {
	            this._values.length = this.howMany();
	            if (this.howMany() === 1 && this._unwrap) {
	              this._resolve(this._values[0]);
	            } else {
	              this._resolve(this._values);
	            }
	          }
	        };
	        SomePromiseArray.prototype._promiseRejected = function SomePromiseArray$_promiseRejected(reason) {
	          if (this._isResolved())
	            return;
	          this._addRejected(reason);
	          if (this.howMany() > this._canPossiblyFulfill()) {
	            var e = new AggregateError();
	            for (var i = this.length(); i < this._values.length; ++i) {
	              e.push(this._values[i]);
	            }
	            this._reject(e);
	          }
	        };
	        SomePromiseArray.prototype._fulfilled = function SomePromiseArray$_fulfilled() {
	          return this._totalResolved;
	        };
	        SomePromiseArray.prototype._rejected = function SomePromiseArray$_rejected() {
	          return this._values.length - this.length();
	        };
	        SomePromiseArray.prototype._addRejected = function SomePromiseArray$_addRejected(reason) {
	          this._values.push(reason);
	        };
	        SomePromiseArray.prototype._addFulfilled = function SomePromiseArray$_addFulfilled(value) {
	          this._values[this._totalResolved++] = value;
	        };
	        SomePromiseArray.prototype._canPossiblyFulfill = function SomePromiseArray$_canPossiblyFulfill() {
	          return this.length() - this._rejected();
	        };
	        SomePromiseArray.prototype._getRangeError = function SomePromiseArray$_getRangeError(count) {
	          var message = "Input array must contain at least " + this._howMany + " items but contains only " + count + " items";
	          return new RangeError(message);
	        };
	        SomePromiseArray.prototype._resolveEmptyArray = function SomePromiseArray$_resolveEmptyArray() {
	          this._reject(this._getRangeError(0));
	        };
	        function Promise$_Some(promises, howMany) {
	          if ((howMany | 0) !== howMany || howMany < 0) {
	            return apiRejection("expecting a positive integer");
	          }
	          var ret = new SomePromiseArray(promises);
	          var promise = ret.promise();
	          if (promise.isRejected()) {
	            return promise;
	          }
	          ret.setHowMany(howMany);
	          ret.init();
	          return promise;
	        }
	        Promise.some = function Promise$Some(promises, howMany) {
	          return Promise$_Some(promises, howMany);
	        };
	        Promise.prototype.some = function Promise$some(howMany) {
	          return Promise$_Some(this, howMany);
	        };
	        Promise._SomePromiseArray = SomePromiseArray;
	      };
	    }, {
	      "./errors.js": 10,
	      "./util.js": 35
	    }],
	    31: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise) {
	        function PromiseInspection(promise) {
	          if (promise !== void 0) {
	            this._bitField = promise._bitField;
	            this._settledValue = promise.isResolved() ? promise._settledValue : void 0;
	          } else {
	            this._bitField = 0;
	            this._settledValue = void 0;
	          }
	        }
	        PromiseInspection.prototype.isFulfilled = Promise.prototype.isFulfilled = function Promise$isFulfilled() {
	          return (this._bitField & 268435456) > 0;
	        };
	        PromiseInspection.prototype.isRejected = Promise.prototype.isRejected = function Promise$isRejected() {
	          return (this._bitField & 134217728) > 0;
	        };
	        PromiseInspection.prototype.isPending = Promise.prototype.isPending = function Promise$isPending() {
	          return (this._bitField & 402653184) === 0;
	        };
	        PromiseInspection.prototype.value = Promise.prototype.value = function Promise$value() {
	          if (!this.isFulfilled()) {
	            throw new TypeError("cannot get fulfillment value of a non-fulfilled promise");
	          }
	          return this._settledValue;
	        };
	        PromiseInspection.prototype.error = PromiseInspection.prototype.reason = Promise.prototype.reason = function Promise$reason() {
	          if (!this.isRejected()) {
	            throw new TypeError("cannot get rejection reason of a non-rejected promise");
	          }
	          return this._settledValue;
	        };
	        PromiseInspection.prototype.isResolved = Promise.prototype.isResolved = function Promise$isResolved() {
	          return (this._bitField & 402653184) > 0;
	        };
	        Promise.PromiseInspection = PromiseInspection;
	      };
	    }, {}],
	    32: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, INTERNAL) {
	        var util = _dereq_("./util.js");
	        var canAttach = _dereq_("./errors.js").canAttach;
	        var errorObj = util.errorObj;
	        var isObject = util.isObject;
	        function getThen(obj) {
	          try {
	            return obj.then;
	          } catch (e) {
	            errorObj.e = e;
	            return errorObj;
	          }
	        }
	        function Promise$_Cast(obj, originalPromise) {
	          if (isObject(obj)) {
	            if (obj instanceof Promise) {
	              return obj;
	            } else if (isAnyBluebirdPromise(obj)) {
	              var ret = new Promise(INTERNAL);
	              ret._setTrace(void 0);
	              obj._then(ret._fulfillUnchecked, ret._rejectUncheckedCheckError, ret._progressUnchecked, ret, null);
	              ret._setFollowing();
	              return ret;
	            }
	            var then = getThen(obj);
	            if (then === errorObj) {
	              if (originalPromise !== void 0 && canAttach(then.e)) {
	                originalPromise._attachExtraTrace(then.e);
	              }
	              return Promise.reject(then.e);
	            } else if (typeof then === "function") {
	              return Promise$_doThenable(obj, then, originalPromise);
	            }
	          }
	          return obj;
	        }
	        var hasProp = {}.hasOwnProperty;
	        function isAnyBluebirdPromise(obj) {
	          return hasProp.call(obj, "_promise0");
	        }
	        function Promise$_doThenable(x, then, originalPromise) {
	          var resolver = Promise.defer();
	          var called = false;
	          try {
	            then.call(x, Promise$_resolveFromThenable, Promise$_rejectFromThenable, Promise$_progressFromThenable);
	          } catch (e) {
	            if (!called) {
	              called = true;
	              var trace = canAttach(e) ? e : new Error(e + "");
	              if (originalPromise !== void 0) {
	                originalPromise._attachExtraTrace(trace);
	              }
	              resolver.promise._reject(e, trace);
	            }
	          }
	          return resolver.promise;
	          function Promise$_resolveFromThenable(y) {
	            if (called)
	              return;
	            called = true;
	            if (x === y) {
	              var e = Promise._makeSelfResolutionError();
	              if (originalPromise !== void 0) {
	                originalPromise._attachExtraTrace(e);
	              }
	              resolver.promise._reject(e, void 0);
	              return;
	            }
	            resolver.resolve(y);
	          }
	          function Promise$_rejectFromThenable(r) {
	            if (called)
	              return;
	            called = true;
	            var trace = canAttach(r) ? r : new Error(r + "");
	            if (originalPromise !== void 0) {
	              originalPromise._attachExtraTrace(trace);
	            }
	            resolver.promise._reject(r, trace);
	          }
	          function Promise$_progressFromThenable(v) {
	            if (called)
	              return;
	            var promise = resolver.promise;
	            if (typeof promise._progress === "function") {
	              promise._progress(v);
	            }
	          }
	        }
	        return Promise$_Cast;
	      };
	    }, {
	      "./errors.js": 10,
	      "./util.js": 35
	    }],
	    33: [function(_dereq_, module, exports) {
	      "use strict";
	      var _setTimeout = function(fn, ms) {
	        var len = arguments.length;
	        var arg0 = arguments[2];
	        var arg1 = arguments[3];
	        var arg2 = len >= 5 ? arguments[4] : void 0;
	        return setTimeout(function() {
	          fn(arg0, arg1, arg2);
	        }, ms | 0);
	      };
	      module.exports = function(Promise, INTERNAL, cast) {
	        var util = _dereq_("./util.js");
	        var errors = _dereq_("./errors.js");
	        var apiRejection = _dereq_("./errors_api_rejection")(Promise);
	        var TimeoutError = Promise.TimeoutError;
	        var afterTimeout = function Promise$_afterTimeout(promise, message, ms) {
	          if (!promise.isPending())
	            return;
	          if (typeof message !== "string") {
	            message = "operation timed out after" + " " + ms + " ms";
	          }
	          var err = new TimeoutError(message);
	          errors.markAsOriginatingFromRejection(err);
	          promise._attachExtraTrace(err);
	          promise._cancel(err);
	        };
	        var afterDelay = function Promise$_afterDelay(value, promise) {
	          promise._fulfill(value);
	        };
	        var delay = Promise.delay = function Promise$Delay(value, ms) {
	          if (ms === void 0) {
	            ms = value;
	            value = void 0;
	          }
	          ms = +ms;
	          var maybePromise = cast(value, void 0);
	          var promise = new Promise(INTERNAL);
	          if (maybePromise instanceof Promise) {
	            promise._propagateFrom(maybePromise, 7);
	            promise._follow(maybePromise);
	            return promise.then(function(value) {
	              return Promise.delay(value, ms);
	            });
	          } else {
	            promise._setTrace(void 0);
	            _setTimeout(afterDelay, ms, value, promise);
	          }
	          return promise;
	        };
	        Promise.prototype.delay = function Promise$delay(ms) {
	          return delay(this, ms);
	        };
	        function successClear(value) {
	          var handle = this;
	          if (handle instanceof Number)
	            handle = +handle;
	          clearTimeout(handle);
	          return value;
	        }
	        function failureClear(reason) {
	          var handle = this;
	          if (handle instanceof Number)
	            handle = +handle;
	          clearTimeout(handle);
	          throw reason;
	        }
	        Promise.prototype.timeout = function Promise$timeout(ms, message) {
	          ms = +ms;
	          var ret = new Promise(INTERNAL);
	          ret._propagateFrom(this, 7);
	          ret._follow(this);
	          var handle = _setTimeout(afterTimeout, ms, ret, message, ms);
	          return ret.cancellable()._then(successClear, failureClear, void 0, handle, void 0);
	        };
	      };
	    }, {
	      "./errors.js": 10,
	      "./errors_api_rejection": 11,
	      "./util.js": 35
	    }],
	    34: [function(_dereq_, module, exports) {
	      "use strict";
	      module.exports = function(Promise, apiRejection, cast) {
	        var TypeError = _dereq_("./errors.js").TypeError;
	        var inherits = _dereq_("./util.js").inherits;
	        var PromiseInspection = Promise.PromiseInspection;
	        function inspectionMapper(inspections) {
	          var len = inspections.length;
	          for (var i = 0; i < len; ++i) {
	            var inspection = inspections[i];
	            if (inspection.isRejected()) {
	              return Promise.reject(inspection.error());
	            }
	            inspections[i] = inspection.value();
	          }
	          return inspections;
	        }
	        function thrower(e) {
	          setTimeout(function() {
	            throw e;
	          }, 0);
	        }
	        function castPreservingDisposable(thenable) {
	          var maybePromise = cast(thenable, void 0);
	          if (maybePromise !== thenable && typeof thenable._isDisposable === "function" && typeof thenable._getDisposer === "function" && thenable._isDisposable()) {
	            maybePromise._setDisposable(thenable._getDisposer());
	          }
	          return maybePromise;
	        }
	        function dispose(resources, inspection) {
	          var i = 0;
	          var len = resources.length;
	          var ret = Promise.defer();
	          function iterator() {
	            if (i >= len)
	              return ret.resolve();
	            var maybePromise = castPreservingDisposable(resources[i++]);
	            if (maybePromise instanceof Promise && maybePromise._isDisposable()) {
	              try {
	                maybePromise = cast(maybePromise._getDisposer().tryDispose(inspection), void 0);
	              } catch (e) {
	                return thrower(e);
	              }
	              if (maybePromise instanceof Promise) {
	                return maybePromise._then(iterator, thrower, null, null, null);
	              }
	            }
	            iterator();
	          }
	          iterator();
	          return ret.promise;
	        }
	        function disposerSuccess(value) {
	          var inspection = new PromiseInspection();
	          inspection._settledValue = value;
	          inspection._bitField = 268435456;
	          return dispose(this, inspection).thenReturn(value);
	        }
	        function disposerFail(reason) {
	          var inspection = new PromiseInspection();
	          inspection._settledValue = reason;
	          inspection._bitField = 134217728;
	          return dispose(this, inspection).thenThrow(reason);
	        }
	        function Disposer(data, promise) {
	          this._data = data;
	          this._promise = promise;
	        }
	        Disposer.prototype.data = function Disposer$data() {
	          return this._data;
	        };
	        Disposer.prototype.promise = function Disposer$promise() {
	          return this._promise;
	        };
	        Disposer.prototype.resource = function Disposer$resource() {
	          if (this.promise().isFulfilled()) {
	            return this.promise().value();
	          }
	          return null;
	        };
	        Disposer.prototype.tryDispose = function(inspection) {
	          var resource = this.resource();
	          var ret = resource !== null ? this.doDispose(resource, inspection) : null;
	          this._promise._unsetDisposable();
	          this._data = this._promise = null;
	          return ret;
	        };
	        Disposer.isDisposer = function Disposer$isDisposer(d) {
	          return (d != null && typeof d.resource === "function" && typeof d.tryDispose === "function");
	        };
	        function FunctionDisposer(fn, promise) {
	          this.constructor$(fn, promise);
	        }
	        inherits(FunctionDisposer, Disposer);
	        FunctionDisposer.prototype.doDispose = function(resource, inspection) {
	          var fn = this.data();
	          return fn.call(resource, resource, inspection);
	        };
	        Promise.using = function Promise$using() {
	          var len = arguments.length;
	          if (len < 2)
	            return apiRejection("you must pass at least 2 arguments to Promise.using");
	          var fn = arguments[len - 1];
	          if (typeof fn !== "function")
	            return apiRejection("fn must be a function");
	          len--;
	          var resources = new Array(len);
	          for (var i = 0; i < len; ++i) {
	            var resource = arguments[i];
	            if (Disposer.isDisposer(resource)) {
	              var disposer = resource;
	              resource = resource.promise();
	              resource._setDisposable(disposer);
	            }
	            resources[i] = resource;
	          }
	          return Promise.settle(resources).then(inspectionMapper).spread(fn)._then(disposerSuccess, disposerFail, void 0, resources, void 0);
	        };
	        Promise.prototype._setDisposable = function Promise$_setDisposable(disposer) {
	          this._bitField = this._bitField | 262144;
	          this._disposer = disposer;
	        };
	        Promise.prototype._isDisposable = function Promise$_isDisposable() {
	          return (this._bitField & 262144) > 0;
	        };
	        Promise.prototype._getDisposer = function Promise$_getDisposer() {
	          return this._disposer;
	        };
	        Promise.prototype._unsetDisposable = function Promise$_unsetDisposable() {
	          this._bitField = this._bitField & (~262144);
	          this._disposer = void 0;
	        };
	        Promise.prototype.disposer = function Promise$disposer(fn) {
	          if (typeof fn === "function") {
	            return new FunctionDisposer(fn, this);
	          }
	          throw new TypeError();
	        };
	      };
	    }, {
	      "./errors.js": 10,
	      "./util.js": 35
	    }],
	    35: [function(_dereq_, module, exports) {
	      "use strict";
	      var es5 = _dereq_("./es5.js");
	      var haveGetters = (function() {
	        try {
	          var o = {};
	          es5.defineProperty(o, "f", {get: function() {
	              return 3;
	            }});
	          return o.f === 3;
	        } catch (e) {
	          return false;
	        }
	      })();
	      var canEvaluate = typeof navigator == "undefined";
	      var errorObj = {e: {}};
	      function tryCatch1(fn, receiver, arg) {
	        try {
	          return fn.call(receiver, arg);
	        } catch (e) {
	          errorObj.e = e;
	          return errorObj;
	        }
	      }
	      function tryCatch2(fn, receiver, arg, arg2) {
	        try {
	          return fn.call(receiver, arg, arg2);
	        } catch (e) {
	          errorObj.e = e;
	          return errorObj;
	        }
	      }
	      function tryCatch3(fn, receiver, arg, arg2, arg3) {
	        try {
	          return fn.call(receiver, arg, arg2, arg3);
	        } catch (e) {
	          errorObj.e = e;
	          return errorObj;
	        }
	      }
	      function tryCatch4(fn, receiver, arg, arg2, arg3, arg4) {
	        try {
	          return fn.call(receiver, arg, arg2, arg3, arg4);
	        } catch (e) {
	          errorObj.e = e;
	          return errorObj;
	        }
	      }
	      function tryCatchApply(fn, args, receiver) {
	        try {
	          return fn.apply(receiver, args);
	        } catch (e) {
	          errorObj.e = e;
	          return errorObj;
	        }
	      }
	      var inherits = function(Child, Parent) {
	        var hasProp = {}.hasOwnProperty;
	        function T() {
	          this.constructor = Child;
	          this.constructor$ = Parent;
	          for (var propertyName in Parent.prototype) {
	            if (hasProp.call(Parent.prototype, propertyName) && propertyName.charAt(propertyName.length - 1) !== "$") {
	              this[propertyName + "$"] = Parent.prototype[propertyName];
	            }
	          }
	        }
	        T.prototype = Parent.prototype;
	        Child.prototype = new T();
	        return Child.prototype;
	      };
	      function asString(val) {
	        return typeof val === "string" ? val : ("" + val);
	      }
	      function isPrimitive(val) {
	        return val == null || val === true || val === false || typeof val === "string" || typeof val === "number";
	      }
	      function isObject(value) {
	        return !isPrimitive(value);
	      }
	      function maybeWrapAsError(maybeError) {
	        if (!isPrimitive(maybeError))
	          return maybeError;
	        return new Error(asString(maybeError));
	      }
	      function withAppended(target, appendee) {
	        var len = target.length;
	        var ret = new Array(len + 1);
	        var i;
	        for (i = 0; i < len; ++i) {
	          ret[i] = target[i];
	        }
	        ret[i] = appendee;
	        return ret;
	      }
	      function getDataPropertyOrDefault(obj, key, defaultValue) {
	        if (es5.isES5) {
	          var desc = Object.getOwnPropertyDescriptor(obj, key);
	          if (desc != null) {
	            return desc.get == null && desc.set == null ? desc.value : defaultValue;
	          }
	        } else {
	          return {}.hasOwnProperty.call(obj, key) ? obj[key] : void 0;
	        }
	      }
	      function notEnumerableProp(obj, name, value) {
	        if (isPrimitive(obj))
	          return obj;
	        var descriptor = {
	          value: value,
	          configurable: true,
	          enumerable: false,
	          writable: true
	        };
	        es5.defineProperty(obj, name, descriptor);
	        return obj;
	      }
	      var wrapsPrimitiveReceiver = (function() {
	        return this !== "string";
	      }).call("string");
	      function thrower(r) {
	        throw r;
	      }
	      var inheritedDataKeys = (function() {
	        if (es5.isES5) {
	          return function(obj, opts) {
	            var ret = [];
	            var visitedKeys = Object.create(null);
	            var getKeys = Object(opts).includeHidden ? Object.getOwnPropertyNames : Object.keys;
	            while (obj != null) {
	              var keys;
	              try {
	                keys = getKeys(obj);
	              } catch (e) {
	                return ret;
	              }
	              for (var i = 0; i < keys.length; ++i) {
	                var key = keys[i];
	                if (visitedKeys[key])
	                  continue;
	                visitedKeys[key] = true;
	                var desc = Object.getOwnPropertyDescriptor(obj, key);
	                if (desc != null && desc.get == null && desc.set == null) {
	                  ret.push(key);
	                }
	              }
	              obj = es5.getPrototypeOf(obj);
	            }
	            return ret;
	          };
	        } else {
	          return function(obj) {
	            var ret = [];
	            for (var key in obj) {
	              ret.push(key);
	            }
	            return ret;
	          };
	        }
	      })();
	      function isClass(fn) {
	        try {
	          if (typeof fn === "function") {
	            var keys = es5.keys(fn.prototype);
	            return keys.length > 0 && !(keys.length === 1 && keys[0] === "constructor");
	          }
	          return false;
	        } catch (e) {
	          return false;
	        }
	      }
	      function toFastProperties(obj) {
	        function f() {}
	        f.prototype = obj;
	        return f;
	        eval(obj);
	      }
	      var rident = /^[a-z$_][a-z$_0-9]*$/i;
	      function isIdentifier(str) {
	        return rident.test(str);
	      }
	      function filledRange(count, prefix, suffix) {
	        var ret = new Array(count);
	        for (var i = 0; i < count; ++i) {
	          ret[i] = prefix + i + suffix;
	        }
	        return ret;
	      }
	      var ret = {
	        isClass: isClass,
	        isIdentifier: isIdentifier,
	        inheritedDataKeys: inheritedDataKeys,
	        getDataPropertyOrDefault: getDataPropertyOrDefault,
	        thrower: thrower,
	        isArray: es5.isArray,
	        haveGetters: haveGetters,
	        notEnumerableProp: notEnumerableProp,
	        isPrimitive: isPrimitive,
	        isObject: isObject,
	        canEvaluate: canEvaluate,
	        errorObj: errorObj,
	        tryCatch1: tryCatch1,
	        tryCatch2: tryCatch2,
	        tryCatch3: tryCatch3,
	        tryCatch4: tryCatch4,
	        tryCatchApply: tryCatchApply,
	        inherits: inherits,
	        withAppended: withAppended,
	        asString: asString,
	        maybeWrapAsError: maybeWrapAsError,
	        wrapsPrimitiveReceiver: wrapsPrimitiveReceiver,
	        toFastProperties: toFastProperties,
	        filledRange: filledRange
	      };
	      module.exports = ret;
	    }, {"./es5.js": 12}]
	  }, {}, [3])(3);
	});
	;
	if (typeof window !== 'undefined' && window !== null) {
	  window.P = window.Promise;
	} else if (typeof self !== 'undefined' && self !== null) {
	  self.P = self.Promise;
	}

	//# sourceMappingURL=<compileOutput>
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(41)))

/***/ },

/***/ 4:
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(5);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(8)(content, {});
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		module.hot.accept("!!/home/mhelvens/Projects/apinatomy-hba-demo/node_modules/css-loader/index.js!/home/mhelvens/Projects/apinatomy-hba-demo/node_modules/autoprefixer-loader/index.js!/home/mhelvens/Projects/apinatomy-hba-demo/node_modules/sass-loader/index.js!/home/mhelvens/Projects/apinatomy-hba-demo/src/index/index.scss", function() {
			var newContent = require("!!/home/mhelvens/Projects/apinatomy-hba-demo/node_modules/css-loader/index.js!/home/mhelvens/Projects/apinatomy-hba-demo/node_modules/autoprefixer-loader/index.js!/home/mhelvens/Projects/apinatomy-hba-demo/node_modules/sass-loader/index.js!/home/mhelvens/Projects/apinatomy-hba-demo/src/index/index.scss");
			if(typeof newContent === 'string') newContent = [module.id, newContent, ''];
			update(newContent);
		});
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ 5:
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(39)();
	exports.push([module.id, "html,body{position:absolute;width:100%;height:100%;margin:0;padding:0;}body{position:absolute;overflow:hidden;}#circuitboard{position:absolute;top:20px;left:20px;right:20px;bottom:20px;z-index:1;}#three-d-canvas{position:absolute;top:0;left:0;right:0;bottom:0;margin:0;padding:0;z-index:0;}.tile{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;text-align:center;overflow:hidden;border:solid 1px;}.tile>header{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;font-weight:bold;border-width:1px;}.tile.open>header{height:26px;border-style:none none solid none;line-height:26px;font-size:20.8px;white-space:nowrap;overflow:hidden;}.tile:not(.open)>header{border-style:none;}.tile:not(.active){border-style:dotted !important;}.tile>section{-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;}.tile:not(.open)>section{display:none;}.tile.hidden-header>header{display:none !important;}", ""]);

/***/ },

/***/ 8:
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isIE9 = memoize(function() {
			return /msie 9\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0;
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isIE9();
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function createStyleElement() {
		var styleElement = document.createElement("style");
		var head = getHeadElement();
		styleElement.type = "text/css";
		head.appendChild(styleElement);
		return styleElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement());
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else {
			styleElement = createStyleElement();
			update = applyToTag.bind(null, styleElement);
			remove = function () {
				styleElement.parentNode.removeChild(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	function replaceText(source, id, replacement) {
		var boundaries = ["/** >>" + id + " **/", "/** " + id + "<< **/"];
		var start = source.lastIndexOf(boundaries[0]);
		var wrappedReplacement = replacement
			? (boundaries[0] + replacement + boundaries[1])
			: "";
		if (source.lastIndexOf(boundaries[0]) >= 0) {
			var end = source.lastIndexOf(boundaries[1]) + boundaries[1].length;
			return source.slice(0, start) + wrappedReplacement + source.slice(end);
		} else {
			return source + wrappedReplacement;
		}
	}
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(styleElement.styleSheet.cssText, index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap && typeof btoa === "function") {
			try {
				css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(JSON.stringify(sourceMap)) + " */";
				css = "@import url(\"data:stylesheet/css;base64," + btoa(css) + "\")";
			} catch(e) {}
		}
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}


/***/ },

/***/ 11:
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
	  if (true)
	    module.exports = factory(__webpack_require__(2), __webpack_require__(3), __webpack_require__(42));
	  else if (typeof define === 'function' && define.amd)
	    define(["jquery", "bluebird", "delta-js"], factory);
	  else {
	    var a = typeof exports === 'object' ? factory(require("jquery"), require("bluebird"), require("delta-js")) : factory(root["jQuery"], root["P"], root["DeltaModel"]);
	    for (var i in a)
	      (typeof exports === 'object' ? exports : root)[i] = a[i];
	  }
	})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_6__) {
	  return (function(modules) {
	    var installedModules = {};
	    function __webpack_require__(moduleId) {
	      if (installedModules[moduleId])
	        return installedModules[moduleId].exports;
	      var module = installedModules[moduleId] = {
	        exports: {},
	        id: moduleId,
	        loaded: false
	      };
	      modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	      module.loaded = true;
	      return module.exports;
	    }
	    __webpack_require__.m = modules;
	    __webpack_require__.c = installedModules;
	    __webpack_require__.p = "";
	    return __webpack_require__(0);
	  })([function(module, exports, __webpack_require__) {
	    var __WEBPACK_AMD_DEFINE_ARRAY__,
	        __WEBPACK_AMD_DEFINE_RESULT__;
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(2), __webpack_require__(3), __webpack_require__(4), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, P, amyWidget, U, dm) {
	      'use strict';
	      U.extend(U.object($, 'circuitboard'), {plugin: function(pluginOrSelection) {
	          if ($.isPlainObject(pluginOrSelection)) {
	            return new dm.Delta(pluginOrSelection.name, pluginOrSelection);
	          } else {
	            dm.select.apply(dm, pluginOrSelection);
	            defineWidgetClasses();
	          }
	        }});
	      function defineWidgetClasses() {
	        $.circuitboard.Circuitboard = amyWidget('Circuitboard', {
	          cssClass: "circuitboard",
	          filter: (function() {
	            return P.resolve(true);
	          })
	        });
	        $.circuitboard.Tilemap = amyWidget('Tilemap', {cssClass: "tilemap"});
	        $.circuitboard.Tile = amyWidget('Tile', {cssClass: 'tile'});
	      }
	      $.circuitboard.plugin.graph = (function() {
	        return dm.graph();
	      });
	      return $.circuitboard;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }, function(module, exports, __webpack_require__) {
	    module.exports = __WEBPACK_EXTERNAL_MODULE_1__;
	  }, function(module, exports, __webpack_require__) {
	    module.exports = __WEBPACK_EXTERNAL_MODULE_2__;
	  }, function(module, exports, __webpack_require__) {
	    var __WEBPACK_AMD_DEFINE_ARRAY__,
	        __WEBPACK_AMD_DEFINE_RESULT__;
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(2), __webpack_require__(4), __webpack_require__(7)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, P, U, Artefact) {
	      'use strict';
	      function amyWidget(typeName, optionDefaults) {
	        var Widget = Artefact.newSubclass(typeName, function Widget($__1) {
	          var cssClass = $__1.cssClass;
	          var $__0 = this;
	          if (U.isDefined(cssClass)) {
	            this.element.addClass(cssClass);
	          }
	          this.element.one('remove', (function() {
	            $__0.destroy();
	          }));
	          this.constructed = P.resolve();
	          this.beforeConstruction(this.options.beforeConstruction);
	          this.constructed.then((function() {
	            if ($.isFunction($__0.construct)) {
	              $__0.beforeConstruction($__0.construct());
	            }
	          }));
	        }, {
	          get model() {
	            return this.options.model;
	          },
	          get element() {
	            return this.options.element;
	          },
	          beforeConstruction: function(possiblePromise) {
	            this.constructed = this.constructed.return(P.resolve(possiblePromise)).return(this);
	          }
	        }, optionDefaults);
	        var lowercaseName = typeName[0].toLowerCase() + typeName.slice(1);
	        $.fn[lowercaseName] = function(options) {
	          if (options === 'instance') {
	            return this.data(("-amy-" + lowercaseName));
	          }
	          var newWidget = new Widget(U.extend(options, {element: this}));
	          this.data(("-amy-" + lowercaseName), newWidget.constructed);
	          return this;
	        };
	        return Widget;
	      }
	      return amyWidget;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }, function(module, exports, __webpack_require__) {
	    var __WEBPACK_AMD_DEFINE_ARRAY__,
	        __WEBPACK_AMD_DEFINE_RESULT__;
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function(P) {
	      'use strict';
	      var U = {
	        newClass: function(constructor, prototype) {
	          prototype = prototype || {};
	          var cls = function() {
	            for (var args = [],
	                $__1 = 0; $__1 < arguments.length; $__1++)
	              args[$__1] = arguments[$__1];
	            constructor.apply(this, args);
	          };
	          cls.prototype = prototype;
	          cls.prototype.constructor = cls;
	          return cls;
	        },
	        newSubclass: function(SuperClass, constructor) {
	          var prototype = arguments[2] !== (void 0) ? arguments[2] : {};
	          var cls = function() {
	            for (var args = [],
	                $__1 = 0; $__1 < arguments.length; $__1++)
	              args[$__1] = arguments[$__1];
	            constructor.apply(this, [SuperClass.prototype.constructor.bind(this)].concat(args));
	          };
	          cls.prototype = Object.create(SuperClass.prototype);
	          U.extend(cls.prototype, prototype);
	          cls.prototype.constructor = cls;
	          return cls;
	        },
	        extend: function(obj1) {
	          for (var rest = [],
	              $__1 = 1; $__1 < arguments.length; $__1++)
	            rest[$__1 - 1] = arguments[$__1];
	          rest.forEach((function(obj) {
	            for (var key in obj) {
	              if (obj.hasOwnProperty(key)) {
	                Object.defineProperty(obj1, key, Object.getOwnPropertyDescriptor(obj, key));
	              }
	            }
	          }));
	          return obj1;
	        },
	        field: function(name) {
	          return (function(obj) {
	            return obj[name];
	          });
	        },
	        call: function(fn) {
	          for (var args = [],
	              $__2 = 1; $__2 < arguments.length; $__2++)
	            args[$__2 - 1] = arguments[$__2];
	          return fn.apply(undefined, args);
	        },
	        object: function(obj, name) {
	          if (U.isUndefined(obj[name])) {
	            obj[name] = {};
	          }
	          return obj[name];
	        },
	        array: function(obj, name) {
	          if (U.isUndefined(obj[name])) {
	            obj[name] = [];
	          }
	          return obj[name];
	        },
	        pull: function(arr, val) {
	          var i = arr.indexOf(val);
	          if (i !== -1) {
	            arr.splice(i);
	          }
	        },
	        makeEmpty: function(arr) {
	          while (arr.length > 0) {
	            arr.pop();
	          }
	        },
	        bindA: function(fn, ctx, args) {
	          return fn.bind.apply(fn, [ctx].concat(args));
	        },
	        bind: function(obj, m) {
	          for (var args = [],
	              $__3 = 2; $__3 < arguments.length; $__3++)
	            args[$__3 - 2] = arguments[$__3];
	          return U.bindA(obj[m], obj, args);
	        },
	        applyConstructor: function(ConstructorFn, args) {
	          var NewConstructorFn = ConstructorFn.bind.apply(ConstructorFn, [null].concat(args));
	          return new NewConstructorFn();
	        },
	        assert: function(condition, message) {
	          if (!condition) {
	            throw new Error(message || "Assertion failed");
	          }
	        },
	        isUndefined: function(val) {
	          return typeof val === 'undefined';
	        },
	        isDefined: function(val) {
	          return typeof val !== 'undefined';
	        },
	        objValues: function(obj) {
	          return Object.keys(obj).map((function(key) {
	            return obj[key];
	          }));
	        },
	        makePositioned: function(element) {
	          if (element.css('position') === 'static') {
	            element.css('position', 'relative');
	          }
	        },
	        defOr: function() {
	          for (var values = [],
	              $__4 = 0; $__4 < arguments.length; $__4++)
	            values[$__4] = arguments[$__4];
	          for (var i = 0; i < values.length; i += 1) {
	            if (U.isDefined(values[i])) {
	              return values[i];
	            }
	          }
	        },
	        debounce: function(func, wait, context) {
	          var timeout;
	          return function() {
	            for (var args = [],
	                $__5 = 0; $__5 < arguments.length; $__5++)
	              args[$__5] = arguments[$__5];
	            var $__0 = this;
	            var laterFn = (function() {
	              timeout = null;
	              func.apply(context || $__0, args);
	            });
	            clearTimeout(timeout);
	            timeout = setTimeout(laterFn, wait);
	          };
	        },
	        eachAnimationFrame: function(fn, context) {
	          var stop = false;
	          function iterationFn() {
	            fn.apply(context);
	            if (stop) {
	              return;
	            }
	            requestAnimationFrame(iterationFn);
	          }
	          iterationFn();
	          var unsubscribeFn = (function() {
	            if (unsubscribeFn.stillSubscribed) {
	              unsubscribeFn.stillSubscribed = false;
	              delete unsubscribeFn.unsubscribeOn;
	              stop = true;
	            }
	          });
	          unsubscribeFn.stillSubscribed = true;
	          unsubscribeFn.unsubscribeOn = (function(subscriber) {
	            subscriber(unsubscribeFn);
	            return unsubscribeFn;
	          });
	          return unsubscribeFn;
	        },
	        oncePerStack: function(func, context) {
	          var notRunYet = true;
	          var result = function() {
	            for (var args = [],
	                $__5 = 0; $__5 < arguments.length; $__5++)
	              args[$__5] = arguments[$__5];
	            if (notRunYet) {
	              notRunYet = false;
	              setTimeout((function() {
	                notRunYet = true;
	              }), 0);
	              func.apply(context || this, args);
	            }
	          };
	          result.allowAdditionalCall = (function() {
	            notRunYet = true;
	          });
	          return result;
	        },
	        cached: function($__6) {
	          var $__7 = $__6,
	              retrieve = $__7.retrieve,
	              isEqual = $__7.isEqual;
	          isEqual = isEqual || ((function(a, b) {
	            return (a === b);
	          }));
	          var cache;
	          function retrieveValue() {
	            var newValue = retrieve();
	            var oldValue = cache;
	            if (!isEqual(newValue, oldValue)) {
	              cache = newValue;
	              onChange.forEach((function(fn) {
	                return fn(newValue, oldValue);
	              }));
	            }
	          }
	          var oncePerStackSetValue = U.oncePerStack(retrieveValue);
	          var resultFn = (function() {
	            oncePerStackSetValue();
	            return cache;
	          });
	          var onChange = [];
	          resultFn.onChange = (function(cb) {
	            onChange.push(cb);
	            return resultFn;
	          });
	          resultFn.allowAdditionalCall = (function() {
	            oncePerStackSetValue.allowAdditionalCall();
	          });
	          oncePerStackSetValue();
	          return resultFn;
	        },
	        promisify: function(obj, method) {
	          return function() {
	            for (var args = [],
	                $__5 = 0; $__5 < arguments.length; $__5++)
	              args[$__5] = arguments[$__5];
	            return new P((function(resolve, reject) {
	              try {
	                obj[method].apply(obj, args.concat(resolve));
	              } catch (error) {
	                reject(error);
	              }
	            }));
	          };
	        },
	        optionalCurry: function(fn) {
	          return function() {
	            if (fn.length <= arguments.length) {
	              return fn.apply(this, arguments);
	            } else {
	              return U.bindA(fn, this, arguments);
	            }
	          };
	        }
	      };
	      U.Position = U.newClass(function(top, left) {
	        this.top = top;
	        this.left = left;
	      });
	      U.Position.subtract = (function(a, b) {
	        return new U.Position(a.top - b.top, a.left - b.left);
	      });
	      U.Position.equals = (function(a, b) {
	        return U.isDefined(a) && U.isDefined(b) && a.top === b.top && a.left === b.left;
	      });
	      U.Size = U.newClass(function(height, width) {
	        this.height = height;
	        this.width = width;
	      });
	      U.Size.equals = (function(a, b) {
	        return U.isDefined(a) && U.isDefined(b) && a.height === b.height && a.width === b.width;
	      });
	      return U;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }, function(module, exports, __webpack_require__) {
	    var __WEBPACK_AMD_DEFINE_ARRAY__,
	        __WEBPACK_AMD_DEFINE_RESULT__;
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = function(P, DM) {
	      'use strict';
	      if (window.__apinatomy_core_delta_model) {
	        return window.__apinatomy_core_delta_model;
	      }
	      DM.registerPromiseResolver(P.resolve);
	      window.__apinatomy_core_delta_model = new DM();
	      return window.__apinatomy_core_delta_model;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }, function(module, exports, __webpack_require__) {
	    module.exports = __WEBPACK_EXTERNAL_MODULE_6__;
	  }, function(module, exports, __webpack_require__) {
	    var __WEBPACK_AMD_DEFINE_ARRAY__,
	        __WEBPACK_AMD_DEFINE_RESULT__;
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(2), __webpack_require__(4), __webpack_require__(8), __webpack_require__(9), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, P, U, SignalHandler, uniqueID, dm) {
	      'use strict';
	      var Artefact = dm.vp('Artefact', U.newClass(function Artefact(options) {
	        var $__0 = this._options = options,
	            id = $__0.id,
	            type = $__0.type,
	            parent = $__0.parent;
	        this._id = id || uniqueID(type);
	        this._type = type;
	        this._parent = parent;
	        this._children = [];
	        if (parent) {
	          U.array(parent, '_children').push(this);
	        }
	      }, {
	        get options() {
	          return this._options;
	        },
	        get id() {
	          return this._id;
	        },
	        get type() {
	          return this._type;
	        },
	        get parent() {
	          return this._parent;
	        },
	        get children() {
	          return this._children;
	        },
	        closestAncestorByType: function(type) {
	          var result = this;
	          do {
	            result = result.parent;
	          } while (result && result.type && result.type !== type);
	          return result;
	        },
	        closestDescendantsByType: function(type) {
	          var result = [];
	          this.children.forEach((function(child) {
	            if (child.type === type) {
	              result.push(child);
	            } else {
	              result = result.concat(child.closestDescendantsByType(type));
	            }
	          }));
	          return result;
	        },
	        destroy: function() {
	          this.trigger('destroy');
	          this.children.forEach((function(child) {
	            child.destroy();
	          }));
	        }
	      }));
	      U.extend(Artefact.prototype, SignalHandler);
	      Artefact.newSubclass = function newSubClass(name, constructor) {
	        var prototype = arguments[2] !== (void 0) ? arguments[2] : {};
	        var optionDefaults = arguments[3] !== (void 0) ? arguments[3] : {};
	        return dm.vp(name, U.newSubclass(Artefact, function(superFn) {
	          var options = arguments[1] !== (void 0) ? arguments[1] : {};
	          var processedOptions = options;
	          Object.keys(optionDefaults).forEach((function(key) {
	            if (U.isUndefined(processedOptions[key])) {
	              processedOptions[key] = optionDefaults[key];
	            }
	          }));
	          processedOptions.type = name;
	          superFn(U.extend(options, processedOptions));
	          constructor.call(this, processedOptions);
	        }, U.extend({}, prototype, {get circuitboard() {
	            if (!this._circuitboard) {
	              this._circuitboard = this.closestAncestorByType('Circuitboard');
	            }
	            return this._circuitboard;
	          }})));
	      };
	      return Artefact;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }, function(module, exports, __webpack_require__) {
	    var __WEBPACK_AMD_DEFINE_ARRAY__,
	        __WEBPACK_AMD_DEFINE_RESULT__;
	    'use strict';
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, U) {
	      var SignalHandler = {};
	      SignalHandler._getCallbacks = function _getCallbacks(signal) {
	        if (U.isUndefined(this._callbacks)) {
	          this._callbacks = {};
	        }
	        if (U.isUndefined(this._callbacks[signal])) {
	          this._callbacks[signal] = $.Callbacks();
	        }
	        return this._callbacks[signal];
	      };
	      SignalHandler.on = U.optionalCurry(function on(signal, fn) {
	        var $__0 = this;
	        this._getCallbacks(signal).add(fn);
	        var unsubscribeFn = (function() {
	          if (unsubscribeFn.stillSubscribed) {
	            unsubscribeFn.stillSubscribed = false;
	            $__0._getCallbacks(signal).remove(fn);
	          }
	        });
	        unsubscribeFn.stillSubscribed = true;
	        unsubscribeFn.unsubscribeOn = (function(subscriber) {
	          subscriber(unsubscribeFn);
	          return unsubscribeFn;
	        });
	        unsubscribeFn.subscribeWhenever = (function(subscriber) {
	          subscriber((function(val) {
	            $__0._getCallbacks(signal)[val ? 'add' : 'remove'](fn);
	          }));
	          return unsubscribeFn;
	        });
	        return unsubscribeFn;
	      });
	      SignalHandler.onValue = U.optionalCurry(function onValue(signal, anticipatedValue, fn) {
	        return this.on(signal, (function(value) {
	          if (value === anticipatedValue) {
	            fn();
	          }
	        }));
	      });
	      SignalHandler.one = U.optionalCurry(function one(signal, fn) {
	        var unsubscribeFn = this.on(signal, function() {
	          for (var args = [],
	              $__1 = 0; $__1 < arguments.length; $__1++)
	            args[$__1] = arguments[$__1];
	          unsubscribeFn();
	          fn.apply(null, args);
	        });
	        return unsubscribeFn;
	      });
	      SignalHandler.oneValue = U.optionalCurry(function oneValue(signal, anticipatedValue, fn) {
	        var unsubscribeFn = this.on(signal, (function(value) {
	          if (value === anticipatedValue) {
	            unsubscribeFn();
	            fn();
	          }
	        }));
	        return unsubscribeFn;
	      });
	      SignalHandler.once = SignalHandler.one;
	      SignalHandler.trigger = function trigger(signal) {
	        for (var args = [],
	            $__1 = 1; $__1 < arguments.length; $__1++)
	          args[$__1 - 1] = arguments[$__1];
	        var callbacks = this._getCallbacks(signal);
	        if (callbacks) {
	          callbacks.fireWith(this, args);
	        }
	      };
	      SignalHandler.newObservable = function newObservable(name) {
	        var $__2 = arguments[1] !== (void 0) ? arguments[1] : {},
	            initial = $__2.initial,
	            validation = $__2.validation;
	        var cache;
	        Object.defineProperty(this, name, {
	          get: function() {
	            return cache;
	          },
	          set: function(newValue) {
	            var oldValue = cache;
	            if (validation) {
	              newValue = validation(newValue, oldValue);
	            }
	            if (newValue !== oldValue) {
	              cache = newValue;
	              this.trigger(name, newValue, oldValue);
	            }
	          }
	        });
	        this[name] = initial;
	      };
	      SignalHandler.observe = U.optionalCurry(function observe(observable, fn) {
	        var unsubscribeFn = this.on(observable, fn);
	        if (U.isDefined(this[observable])) {
	          fn(this[observable]);
	        }
	        return unsubscribeFn;
	      });
	      SignalHandler.observeValue = U.optionalCurry(function observeValue(signal, anticipatedValue, fn) {
	        return this.observe(signal, (function(value) {
	          if (value === anticipatedValue) {
	            fn();
	          }
	        }));
	      });
	      return SignalHandler;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }, function(module, exports, __webpack_require__) {
	    var __WEBPACK_AMD_DEFINE_ARRAY__,
	        __WEBPACK_AMD_DEFINE_RESULT__;
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      'use strict';
	      var _nextId = 0;
	      return function uniqueId(prefix) {
	        return ((prefix || "unique-id") + "-" + _nextId++);
	      };
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }]);
	});
	
	//# sourceMappingURL=<compileOutput>


/***/ },

/***/ 39:
/***/ function(module, exports, __webpack_require__) {

	module.exports = function() {
	  var list = [];
	  list.toString = function toString() {
	    var result = [];
	    for (var i = 0; i < this.length; i++) {
	      var item = this[i];
	      if (item[2]) {
	        result.push("@media " + item[2] + "{" + item[1] + "}");
	      } else {
	        result.push(item[1]);
	      }
	    }
	    return result.join("");
	  };
	  return list;
	};
	
	//# sourceMappingURL=<compileOutput>


/***/ },

/***/ 41:
/***/ function(module, exports, __webpack_require__) {

	var process = module.exports = {};
	process.nextTick = (function() {
	  var canSetImmediate = typeof window !== 'undefined' && window.setImmediate;
	  var canPost = typeof window !== 'undefined' && window.postMessage && window.addEventListener;
	  ;
	  if (canSetImmediate) {
	    return function(f) {
	      return window.setImmediate(f);
	    };
	  }
	  if (canPost) {
	    var queue = [];
	    window.addEventListener('message', function(ev) {
	      var source = ev.source;
	      if ((source === window || source === null) && ev.data === 'process-tick') {
	        ev.stopPropagation();
	        if (queue.length > 0) {
	          var fn = queue.shift();
	          fn();
	        }
	      }
	    }, true);
	    return function nextTick(fn) {
	      queue.push(fn);
	      window.postMessage('process-tick', '*');
	    };
	  }
	  return function nextTick(fn) {
	    setTimeout(fn, 0);
	  };
	})();
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	function noop() {}
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.binding = function(name) {
	  throw new Error('process.binding is not supported');
	};
	process.cwd = function() {
	  return '/';
	};
	process.chdir = function(dir) {
	  throw new Error('process.chdir is not supported');
	};
	
	//# sourceMappingURL=<compileOutput>


/***/ },

/***/ 42:
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
	  if (true)
	    module.exports = factory(__webpack_require__(44));
	  else if (typeof define === 'function' && define.amd)
	    define(["js-graph"], factory);
	  else if (typeof exports === 'object')
	    exports["DeltaModel"] = factory(require("js-graph"));
	  else
	    root["DeltaModel"] = factory(root["JsGraph"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {
	  return (function(modules) {
	    var installedModules = {};
	    function __webpack_require__(moduleId) {
	      if (installedModules[moduleId])
	        return installedModules[moduleId].exports;
	      var module = installedModules[moduleId] = {
	        exports: {},
	        id: moduleId,
	        loaded: false
	      };
	      modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	      module.loaded = true;
	      return module.exports;
	    }
	    __webpack_require__.m = modules;
	    __webpack_require__.c = installedModules;
	    __webpack_require__.p = "";
	    return __webpack_require__(0);
	  })([function(module, exports, __webpack_require__) {
	    var __WEBPACK_AMD_DEFINE_ARRAY__,
	        __WEBPACK_AMD_DEFINE_RESULT__;
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function(JsGraph, U) {
	      'use strict';
	      var keepFirst = (function() {});
	      var keepSecond = (function(d1, p, d2) {
	        d1.operations[p] = d2;
	      });
	      var applySecondToFirstValue = (function(d1, p, d2) {
	        d2.applyTo(d1.operations[p], 'value');
	      });
	      function assertFunction(val, opType) {
	        U.assert(typeof val === 'function', ("The operation '" + opType + "' expects the property it acts on to be a function."));
	      }
	      function assertDefined(val, opType) {
	        U.assert(U.isDefined(val), ("The operation '" + opType + "' expects the property to be defined."));
	      }
	      function assertUndefined(val, opType) {
	        U.assert(U.isUndefined(val), ("The operation '" + opType + "' expects the property to be undefined."));
	      }
	      var DeltaModel = U.newClass(function() {
	        var $__0 = this;
	        var _opTypes = {};
	        var _composeFns = [];
	        U.extend(this, {
	          _addOperationType: function($__4) {
	            var $__5 = $__4,
	                name = $__5.name,
	                constructor = $__5.constructor,
	                applyTo = $__5.applyTo,
	                prototype = $__5.prototype,
	                method = $__5.method;
	            var objectWithMethod = {};
	            _opTypes[name] = {
	              name: name,
	              Delta: constructor,
	              method: objectWithMethod[name]
	            };
	            U.extend(_opTypes[name].Delta.prototype, prototype, {
	              constructor: constructor,
	              type: name,
	              applyTo: applyTo
	            });
	            _opTypes['modify'].Delta.prototype[name] = U.isDefined(method) ? method : function(property) {
	              for (var values = [],
	                  $__1 = 1; $__1 < arguments.length; $__1++)
	                values[$__1 - 1] = arguments[$__1];
	              this._addOperation(_opTypes[name], property, values);
	              return this;
	            };
	          },
	          _addOperationAlias: function($__4) {
	            var $__5 = $__4,
	                name = $__5.name,
	                target = $__5.target,
	                transform = $__5.transform;
	            var objectWithMethod = {};
	            Object.defineProperty(objectWithMethod, name, {value: function(property) {
	                for (var values = [],
	                    $__1 = 1; $__1 < arguments.length; $__1++)
	                  values[$__1 - 1] = arguments[$__1];
	                this._addOperation(_opTypes[target], property, transform(values));
	                return this;
	              }});
	            _opTypes[name] = {
	              name: name,
	              method: objectWithMethod[name]
	            };
	            _opTypes['modify'].Delta.prototype[name] = _opTypes[name].method;
	          },
	          _addCompositionRule: function(op1Type, op2Type, composeFn) {
	            _composeFns.push({
	              op1Type: op1Type,
	              op2Type: op2Type,
	              composeFn: composeFn
	            });
	          },
	          _newDelta: function(type) {
	            for (var values = [],
	                $__1 = 1; $__1 < arguments.length; $__1++)
	              values[$__1 - 1] = arguments[$__1];
	            return U.applyConstructor(_opTypes[type].Delta, values);
	          }
	        });
	        var thisDM = this;
	        this._addOperationType({
	          name: 'modify',
	          constructor: function Modify() {
	            var deltaDescription = arguments[0] !== (void 0) ? arguments[0] : {};
	            var operations = arguments[1] !== (void 0) ? arguments[1] : {};
	            var $__0 = this;
	            this.operations = operations;
	            Object.keys(deltaDescription).forEach((function(key) {
	              var match = key.match(/^(\w+)\s+([\w\.]+)$/);
	              if (match) {
	                var operation = match[1];
	                var property = match[2];
	                U.assert(operation in _opTypes, ("I don't know the '" + operation + "' operation."));
	                $__0[operation](property, deltaDescription[key]);
	              }
	            }));
	          },
	          applyTo: function(obj, property) {
	            var $__0 = this;
	            if (U.isDefined(property)) {
	              U.assert(U.isDefined(obj[property]), "The 'modify' operation expects the property to be already defined.");
	              Object.keys(this.operations).forEach((function(subProperty) {
	                $__0.operations[subProperty].applyTo(obj[property], subProperty);
	              }));
	            } else {
	              U.assert(U.isDefined(obj), "The 'modify' operation expects the property to be already defined.");
	              Object.keys(this.operations).forEach((function(subProperty) {
	                $__0.operations[subProperty].applyTo(obj, subProperty);
	              }));
	            }
	          },
	          prototype: {
	            selectivelyApplyTo: function(obj, subProperty) {
	              U.assert(U.isDefined(obj), "The 'modify' operation expects the property to be already defined.");
	              if (U.isDefined(this.operations[subProperty])) {
	                this.operations[subProperty].applyTo(obj, subProperty);
	              }
	            },
	            compose: function(property, op2) {
	              var $__0 = this;
	              if (U.isUndefined(op2)) {
	                return this;
	              }
	              var foundComposeFn;
	              _composeFns.some((function($__4) {
	                var $__5 = $__4,
	                    op1Type = $__5.op1Type,
	                    op2Type = $__5.op2Type,
	                    composeFn = $__5.composeFn;
	                if ($__0.operations[property].type === op1Type && op2.type === op2Type) {
	                  foundComposeFn = composeFn;
	                  return true;
	                }
	              }));
	              if (foundComposeFn) {
	                foundComposeFn(this, property, op2);
	              } else {
	                var err = new Error(("You cannot follow a '" + this.operations[property].type + "' operation ") + ("with a '" + op2.type + "' operation on the same property."));
	                err.op1 = this.operations[property].type;
	                err.op2 = op2.type;
	                throw err;
	              }
	            },
	            _addOperation: function(opType, property, values) {
	              var dotIndex = property.indexOf('.');
	              if (dotIndex !== -1) {
	                var actualProperty = property.slice(0, dotIndex);
	                var restOfProperty = property.slice(dotIndex + 1);
	                var newModifyDelta = this._addOperation(_opTypes['modify'], actualProperty);
	                return newModifyDelta[opType.name].apply(newModifyDelta, [restOfProperty].concat(values));
	              } else {
	                var _newDelta = thisDM._newDelta.apply(thisDM, [opType.name].concat(values));
	                if (this.operations.hasOwnProperty(property) && U.isDefined(this.operations[property])) {
	                  this.compose(property, _newDelta);
	                } else {
	                  this.operations[property] = _newDelta;
	                }
	                return this.operations[property];
	              }
	            }
	          },
	          method: function(property, deltaDescription) {
	            return this._addOperation(_opTypes['modify'], property, [deltaDescription]);
	          }
	        });
	        this._addOperationType({
	          name: 'add',
	          constructor: function Add(value) {
	            this.value = value;
	          },
	          applyTo: function(obj, property) {
	            assertUndefined(obj[property], 'add');
	            obj[property] = this.value;
	          }
	        });
	        this._addOperationType({
	          name: 'replace',
	          constructor: function Replace(value) {
	            this.value = value;
	          },
	          applyTo: function(obj, property) {
	            assertDefined(obj[property], 'replace');
	            obj[property] = this.value;
	          }
	        });
	        this._addOperationType({
	          name: 'replaceAround',
	          constructor: function ReplaceAround(value) {
	            this.value = value;
	          },
	          applyTo: function(obj, property) {
	            assertDefined(obj[property], 'replaceAround');
	            obj[property] = this.value(obj[property]);
	          }
	        });
	        this._addOperationType({
	          name: 'remove',
	          constructor: function Remove() {},
	          applyTo: function(obj, property) {
	            assertDefined(obj[property], 'remove');
	            delete obj[property];
	          }
	        });
	        this._addOperationType({
	          name: 'forbid',
	          constructor: function Forbid() {},
	          applyTo: function(obj, property) {
	            assertUndefined(obj[property], 'forbid');
	          }
	        });
	        this._addCompositionRule('add', 'replace', (function(d1, p, d2) {
	          d1.operations[p] = DeltaModel._newDelta('add', d2.value);
	        }));
	        this._addCompositionRule('add', 'modify', applySecondToFirstValue);
	        this._addCompositionRule('add', 'remove', (function(d1, p) {
	          d1.operations[p] = DeltaModel._newDelta('forbid');
	        }));
	        this._addCompositionRule('replace', 'replace', keepSecond);
	        this._addCompositionRule('replace', 'modify', applySecondToFirstValue);
	        this._addCompositionRule('replace', 'remove', keepSecond);
	        this._addCompositionRule('modify', 'replace', keepSecond);
	        this._addCompositionRule('modify', 'modify', (function(d1, p, d2) {
	          Object.keys(d2.operations).forEach((function(prop) {
	            d1.compose(prop, d2.operations[prop]);
	          }));
	        }));
	        this._addCompositionRule('modify', 'remove', keepSecond);
	        this._addCompositionRule('remove', 'add', (function(d1, p, d2) {
	          d1.operations[p] = DeltaModel._newDelta('replace', d2.value);
	        }));
	        this._addCompositionRule('remove', 'forbid', keepFirst);
	        this._addCompositionRule('forbid', 'add', keepSecond);
	        this._addCompositionRule('forbid', 'forbid', keepFirst);
	        this._addOperationType({
	          name: 'alter',
	          constructor: function Alter(value, alias) {
	            this.value = value || [];
	            this.alias = alias || 'alter';
	          },
	          applyTo: function(obj, property) {
	            assertFunction(obj[property], this.alias);
	            this.value.forEach((function(subOp) {
	              var partOne = obj[property];
	              var partTwo = subOp.value;
	              if (subOp.type === 'prepend') {
	                obj[property] = function() {
	                  for (var args = [],
	                      $__2 = 0; $__2 < arguments.length; $__2++)
	                    args[$__2] = arguments[$__2];
	                  partTwo.apply(this, args);
	                  partOne.apply(this, args);
	                };
	              } else {
	                obj[property] = function() {
	                  for (var args = [],
	                      $__3 = 0; $__3 < arguments.length; $__3++)
	                    args[$__3] = arguments[$__3];
	                  partOne.apply(this, args);
	                  partTwo.apply(this, args);
	                };
	              }
	            }));
	          }
	        });
	        this._addCompositionRule('alter', 'alter', (function(d1, p, d2) {
	          [].push.apply(d1.operations[p].value, d2.value);
	        }));
	        this._addCompositionRule('alter', 'replace', keepSecond);
	        this._addCompositionRule('alter', 'remove', (function(d1, p) {
	          d1.operations[p] = DeltaModel._newDelta('forbid');
	        }));
	        this._addCompositionRule('add', 'alter', (function(d1, p, d2) {
	          assertFunction(d1.operations[p].value, d2.alias);
	          applySecondToFirstValue(d1, p, d2);
	        }));
	        this._addCompositionRule('replace', 'alter', (function(d1, p, d2) {
	          assertFunction(d1.operations[p].value, d2.alias);
	          applySecondToFirstValue(d1, p, d2);
	        }));
	        ['prepend', 'insert', 'append'].forEach((function(opType) {
	          $__0._addOperationAlias({
	            name: opType,
	            target: 'alter',
	            transform: (function(args) {
	              return [[{
	                type: opType,
	                value: args[0]
	              }], opType];
	            })
	          });
	        }));
	        this._addOperationType({
	          name: 'after',
	          constructor: function After(value) {
	            U.assert(typeof resolvePromise === 'function', "Before creating an 'after' operation, you must register a promise resolver with delta.js.");
	            this.value = value;
	          },
	          applyTo: function(obj, property) {
	            assertFunction(obj[property], 'after');
	            var partOne = obj[property];
	            var partTwo = this.value;
	            obj[property] = function() {
	              for (var args = [],
	                  $__2 = 0; $__2 < arguments.length; $__2++)
	                args[$__2] = arguments[$__2];
	              return resolvePromise(partOne.apply(this, args)).then(function() {
	                return partTwo.apply(this, args);
	              }.bind(this));
	            };
	          }
	        });
	        this._addCompositionRule('after', 'replace', keepSecond);
	        this._addCompositionRule('after', 'remove', keepSecond);
	        this._addCompositionRule('add', 'after', (function(d1, p, d2) {
	          assertFunction(d1.operations[p].value, 'after');
	          applySecondToFirstValue(d1, p, d2);
	        }));
	        this._addCompositionRule('replace', 'after', (function(d1, p, d2) {
	          assertFunction(d1.operations[p].value, 'after');
	          applySecondToFirstValue(d1, p, d2);
	        }));
	        this._addCompositionRule('insert', 'after', applySecondToFirstValue);
	        this._addCompositionRule('after', 'insert', applySecondToFirstValue);
	        var _graph = new JsGraph();
	        U.extend(this, {graph: function() {
	            return _graph;
	          }});
	        var _deltaConditions = {};
	        var _settledDeltaConditions = {};
	        var _conditionsUnsettled = false;
	        function _registerDisjunct(deltaName, disjunct) {
	          _conditionsUnsettled = true;
	          if (disjunct === true) {
	            _settledDeltaConditions[deltaName] = true;
	          } else if (disjunct === false) {} else if (_deltaConditions[deltaName] !== true) {
	            U.array(_deltaConditions, deltaName).push(disjunct);
	          }
	        }
	        function _settleConditions() {
	          if (_conditionsUnsettled) {
	            _conditionsUnsettled = false;
	            var somethingChanged;
	            do {
	              somethingChanged = false;
	              _graph.eachVertex((function(deltaName) {
	                if (_settledDeltaConditions[deltaName]) {
	                  return;
	                }
	                if (U.isUndefined(_deltaConditions[deltaName])) {
	                  return;
	                }
	                if (_deltaConditions[deltaName].some((function(disjunct) {
	                  return disjunct.every((function(conjunct) {
	                    return _settledDeltaConditions[conjunct];
	                  }));
	                }))) {
	                  _settledDeltaConditions[deltaName] = true;
	                  somethingChanged = true;
	                }
	              }));
	            } while (somethingChanged);
	          }
	        }
	        this.Delta = U.newSubclass(_opTypes['modify'].Delta, function Delta(superFn, deltaName) {
	          var options = arguments[2] !== (void 0) ? arguments[2] : {};
	          superFn.call(this, options);
	          U.assert(options instanceof Object, "A delta should be given as an object.");
	          Object.defineProperties(this, {
	            name: {get: function() {
	                return deltaName;
	              }},
	            manuallySelectable: {get: function() {
	                if (U.isDefined(options['manuallySelectable'])) {
	                  return !!options['manuallySelectable'];
	                } else if (U.isDefined(options['resolves']) && options['resolves'].length > 0) {
	                  return false;
	                } else {
	                  return true;
	                }
	              }},
	            selected: {get: function() {
	                _settleConditions();
	                return !!_settledDeltaConditions[deltaName];
	              }},
	            if: {get: function() {
	                if (options['if'] === true || options['if'] === false) {
	                  return options['if'];
	                } else if (options['if'] || options['iff'] || options['resolves']) {
	                  return [].concat(options['if'] || [], options['iff'] || [], options['resolves'] || []);
	                } else {
	                  return false;
	                }
	              }},
	            onlyIf: {get: function() {
	                if (options['onlyIf'] === true || options['onlyIf'] === false) {
	                  return options['onlyIf'];
	                } else if (options['onlyIf'] || options['iff'] || options['expects'] || options['resolves']) {
	                  return [].concat(options['onlyIf'] || [], options['iff'] || [], options['expects'] || [], options['resolves'] || []);
	                } else {
	                  return true;
	                }
	              }},
	            after: {get: function() {
	                return [].concat(options['after'] || [], options['expects'] || [], options['resolves'] || [], options['requires'] || []);
	              }},
	            selects: {get: function() {
	                return [].concat(options['selects'] || [], options['requires'] || []);
	              }}
	          });
	          _conditionsUnsettled = true;
	          if (U.isDefined(this.if)) {
	            _registerDisjunct(deltaName, this.if);
	          }
	          this.selects.forEach((function(otherDeltaName) {
	            _registerDisjunct(otherDeltaName, [deltaName]);
	          }));
	          _graph.addVertex(deltaName, this);
	          this.after.forEach((function(otherDeltaName) {
	            _graph.createEdge(otherDeltaName, deltaName);
	          }));
	          U.assert(!_graph.hasCycle(), ("The delta " + deltaName + " introduced a cycle in the application order."));
	        });
	        U.extend(this, {
	          select: function() {
	            for (var deltaNames = [],
	                $__2 = 0; $__2 < arguments.length; $__2++)
	              deltaNames[$__2] = arguments[$__2];
	            deltaNames.forEach((function(deltaName) {
	              _registerDisjunct(deltaName, true);
	            }));
	          },
	          vp: function(vpName, val) {
	            var obj = {};
	            obj[vpName] = val;
	            _settleConditions();
	            _graph.eachVertex((function(name, delta) {
	              U.assert(!delta.selected || delta.onlyIf === true || delta.onlyIf.every((function(d) {
	                return _graph.vertexValue(d).selected;
	              })), ("The 'onlyIf' condition of delta '" + delta.name + "' was violated."));
	            }));
	            _graph.topologically((function(name, delta) {
	              if (delta.selected) {
	                delta.selectivelyApplyTo(obj, vpName);
	              }
	            }));
	            return obj[vpName];
	          }
	        });
	      });
	      var resolvePromise = null;
	      U.extend(DeltaModel, {registerPromiseResolver: function(promiseResolverFn) {
	          resolvePromise = promiseResolverFn;
	        }});
	      return DeltaModel;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }, function(module, exports, __webpack_require__) {
	    module.exports = __WEBPACK_EXTERNAL_MODULE_1__;
	  }, function(module, exports, __webpack_require__) {
	    var __WEBPACK_AMD_DEFINE_RESULT__;
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      'use strict';
	      var U = {
	        newClass: function(constructor, prototype) {
	          prototype = prototype || {};
	          var cls = function() {
	            for (var args = [],
	                $__0 = 0; $__0 < arguments.length; $__0++)
	              args[$__0] = arguments[$__0];
	            constructor.apply(this, args);
	          };
	          cls.prototype = prototype;
	          cls.prototype.constructor = cls;
	          return cls;
	        },
	        newSubclass: function(superClass, constructor, prototype) {
	          prototype = prototype || {};
	          var cls = function() {
	            for (var args = [],
	                $__0 = 0; $__0 < arguments.length; $__0++)
	              args[$__0] = arguments[$__0];
	            constructor.apply(this, [superClass.prototype.constructor].concat(args));
	          };
	          cls.prototype = Object.create(superClass.prototype, prototype);
	          cls.prototype.constructor = cls;
	          return cls;
	        },
	        extend: function(obj1) {
	          for (var rest = [],
	              $__0 = 1; $__0 < arguments.length; $__0++)
	            rest[$__0 - 1] = arguments[$__0];
	          rest.forEach((function(obj) {
	            for (var key in obj) {
	              if (obj.hasOwnProperty(key)) {
	                obj1[key] = obj[key];
	              }
	            }
	          }));
	          return obj1;
	        },
	        array: function(obj, name) {
	          if (U.isUndefined(obj[name])) {
	            obj[name] = [];
	          }
	          return obj[name];
	        },
	        bindA: function(fn, ctx, args) {
	          return fn.bind.apply(fn, [ctx].concat(args));
	        },
	        bind: function(obj, m) {
	          for (var args = [],
	              $__1 = 2; $__1 < arguments.length; $__1++)
	            args[$__1 - 2] = arguments[$__1];
	          return U.bindA(obj[m], obj, args);
	        },
	        applyConstructor: function(ConstructorFn, args) {
	          var NewConstructorFn = ConstructorFn.bind.apply(ConstructorFn, [null].concat(args));
	          return new NewConstructorFn();
	        },
	        assert: function(condition, message) {
	          if (!condition) {
	            throw new Error(message || "Assertion failed");
	          }
	        },
	        isUndefined: function(val) {
	          return typeof val === 'undefined';
	        },
	        isDefined: function(val) {
	          return typeof val !== 'undefined';
	        }
	      };
	      return U;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }]);
	});
	
	//# sourceMappingURL=<compileOutput>


/***/ },

/***/ 44:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	(function(root, name, factory) {
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports === 'object') {
	    module.exports = factory();
	  } else {
	    root[name] = factory();
	  }
	}(this, 'JsGraph', function() {
	  function JsGraph() {
	    var that = this;
	    var _vertices = {};
	    var _edges = {};
	    var _reverseEdges = {};
	    var _vertexCount = 0;
	    var _edgeCount = 0;
	    var _addVertexCallbacks = new Callbacks();
	    var _removeVertexCallbacks = new Callbacks();
	    that.onAddVertex = _addVertexCallbacks.add;
	    that.onRemoveVertex = _removeVertexCallbacks.add;
	    that.addNewVertex = function(key, value) {
	      if (that.hasVertex(key)) {
	        throw new JsGraph.VertexExistsError(key, _vertices[key]);
	      }
	      _vertices[key] = value;
	      _edges[key] = {};
	      _reverseEdges[key] = {};
	      _vertexCount += 1;
	      _addVertexCallbacks.fire(key, value);
	    };
	    that.setVertex = function(key, value) {
	      if (!that.hasVertex(key)) {
	        throw new JsGraph.VertexNotExistsError(key);
	      }
	      _vertices[key] = value;
	    };
	    that.ensureVertex = function(key, value) {
	      if (!that.hasVertex(key)) {
	        that.addNewVertex(key, value);
	      }
	    };
	    that.addVertex = function(key, value) {
	      if (that.hasVertex(key)) {
	        that.setVertex(key, value);
	      } else {
	        that.addNewVertex(key, value);
	      }
	    };
	    that.removeExistingVertex = function(key) {
	      if (!that.hasVertex(key)) {
	        throw new JsGraph.VertexNotExistsError(key);
	      }
	      if (Object.keys(_edges[key]).length) {
	        throw new JsGraph.HasConnectedEdgesError(key);
	      }
	      if (Object.keys(_reverseEdges[key]).length) {
	        throw new JsGraph.HasConnectedEdgesError(key);
	      }
	      var valueOfRemovedVertex = _vertices[key];
	      delete _vertices[key];
	      _vertexCount -= 1;
	      _removeVertexCallbacks.fire(key, valueOfRemovedVertex);
	    };
	    that.destroyExistingVertex = function(key) {
	      if (!that.hasVertex(key)) {
	        throw new JsGraph.VertexNotExistsError(key);
	      }
	      that.eachVertexFrom(key, function(to) {
	        that.removeEdge(key, to);
	      });
	      that.eachVertexTo(key, function(from) {
	        that.removeEdge(from, key);
	      });
	      that.removeExistingVertex(key);
	    };
	    that.removeVertex = function(key) {
	      if (that.hasVertex(key)) {
	        that.removeExistingVertex(key);
	      }
	    };
	    that.destroyVertex = function(key) {
	      if (that.hasVertex(key)) {
	        that.destroyExistingVertex(key);
	      }
	    };
	    var _addEdgeCallbacks = new Callbacks();
	    var _removeEdgeCallbacks = new Callbacks();
	    that.onAddEdge = _addEdgeCallbacks.add;
	    that.onRemoveEdge = _removeEdgeCallbacks.add;
	    that.addNewEdge = function(from, to, value) {
	      if (that.hasEdge(from, to)) {
	        throw new JsGraph.EdgeExistsError(from, to, that.edgeValue(from, to));
	      }
	      if (!that.hasVertex(from)) {
	        if (that.hasVertex(to)) {
	          throw new JsGraph.VertexNotExistsError(from);
	        } else {
	          throw new JsGraph.VertexNotExistsError(from).v(to);
	        }
	      } else if (!that.hasVertex(to)) {
	        throw new JsGraph.VertexNotExistsError(to);
	      }
	      _edges[from][to] = value;
	      _reverseEdges[to][from] = null;
	      _edgeCount += 1;
	      _addEdgeCallbacks.fire(from, to, value);
	    };
	    that.createNewEdge = function(from, to, value) {
	      if (that.hasEdge(from, to)) {
	        throw new JsGraph.EdgeExistsError(from, to, that.edgeValue(from, to));
	      }
	      that.ensureVertex(from);
	      that.ensureVertex(to);
	      that.addNewEdge(from, to, value);
	    };
	    that.setEdge = function(from, to, value) {
	      if (!that.hasEdge(from, to)) {
	        throw new JsGraph.EdgeNotExistsError(from, to);
	      }
	      _edges[from][to] = value;
	    };
	    that.spanEdge = function(from, to, value) {
	      if (!that.hasVertex(from)) {
	        if (that.hasVertex(to)) {
	          throw new JsGraph.VertexNotExistsError(from);
	        } else {
	          throw new JsGraph.VertexNotExistsError(from).v(to);
	        }
	      } else if (!that.hasVertex(to)) {
	        throw new JsGraph.VertexNotExistsError(to);
	      }
	      if (!that.hasEdge(from, to)) {
	        that.addNewEdge(from, to, value);
	      }
	    };
	    that.addEdge = function(from, to, value) {
	      if (that.hasEdge(from, to)) {
	        that.setEdge(from, to, value);
	      } else {
	        that.addNewEdge(from, to, value);
	      }
	    };
	    that.ensureEdge = function(from, to, value) {
	      if (!that.hasEdge(from, to)) {
	        that.createNewEdge(from, to, value);
	      }
	    };
	    that.createEdge = function(from, to, value) {
	      if (that.hasEdge(from, to)) {
	        that.setEdge(from, to, value);
	      } else {
	        that.createNewEdge(from, to, value);
	      }
	    };
	    that.removeExistingEdge = function(from, to) {
	      if (!that.hasEdge(from, to)) {
	        throw new JsGraph.EdgeNotExistsError(from, to);
	      }
	      var valueOfRemovedEdge = _edges[from][to];
	      delete _edges[from][to];
	      delete _reverseEdges[to][from];
	      _edgeCount -= 1;
	      _removeEdgeCallbacks.fire(from, to, valueOfRemovedEdge);
	    };
	    that.removeEdge = function(from, to) {
	      if (that.hasEdge(from, to)) {
	        that.removeExistingEdge(from, to);
	      }
	    };
	    that.vertexCount = function() {
	      return _vertexCount;
	    };
	    that.hasVertex = function(key) {
	      return key in _vertices;
	    };
	    that.vertexValue = function(key) {
	      return _vertices[key];
	    };
	    that.edgeCount = function() {
	      return _edgeCount;
	    };
	    that.hasEdge = function(from, to) {
	      return that.hasVertex(from) && that.hasVertex(to) && from in _edges && to in _edges[from];
	    };
	    that.edgeValue = function(from, to) {
	      return that.hasEdge(from, to) ? _edges[from][to] : undefined;
	    };
	    that.successors = function(from) {
	      if (!that.hasVertex(from)) {
	        throw new JsGraph.VertexNotExistsError(from);
	      }
	      return Object.keys(_edges[from]);
	    };
	    that.predecessors = function(to) {
	      if (!that.hasVertex(to)) {
	        throw new JsGraph.VertexNotExistsError(to);
	      }
	      return Object.keys(_reverseEdges[to]);
	    };
	    that.eachVertex = function(handler) {
	      Object.keys(_vertices).every(function(key) {
	        var r = handler(key, _vertices[key]);
	        return (r !== false);
	      });
	    };
	    that.eachVertexFrom = function(from, handler) {
	      if (!that.hasVertex(from)) {
	        throw new JsGraph.VertexNotExistsError(from);
	      }
	      Object.keys(_edges[from]).every(function(to) {
	        var r = handler(to, that.vertexValue(to), that.edgeValue(from, to));
	        return (r !== false);
	      });
	    };
	    that.eachVertexTo = function(to, handler) {
	      if (!that.hasVertex(to)) {
	        throw new JsGraph.VertexNotExistsError(to);
	      }
	      Object.keys(_reverseEdges[to]).every(function(from) {
	        var r = handler(from, that.vertexValue(from), that.edgeValue(from, to));
	        return (r !== false);
	      });
	    };
	    that.eachEdge = function(handler) {
	      Object.keys(_edges).every(function(from) {
	        return Object.keys(_edges[from]).every(function(to) {
	          var r = handler(from, to, _edges[from][to]);
	          return (r !== false);
	        });
	      });
	    };
	    that.clearEdges = function() {
	      that.eachEdge(that.removeEdge);
	    };
	    that.clear = function() {
	      that.eachVertex(that.destroyVertex);
	    };
	    that.hasCycle = function() {
	      var visited = {};
	      var handled = {};
	      var cycleFound = false;
	      function visit(a) {
	        if (visited[a]) {
	          cycleFound = true;
	          return;
	        }
	        if (handled[a]) {
	          return;
	        }
	        handled[a] = true;
	        visited[a] = true;
	        that.eachVertexFrom(a, function(b) {
	          visit(b);
	          if (cycleFound) {
	            return false;
	          }
	        });
	        visited[a] = false;
	      }
	      that.eachVertex(function(a) {
	        visit(a);
	        if (cycleFound) {
	          return false;
	        }
	      });
	      return cycleFound;
	    };
	    that.hasPath = function(from, to) {
	      if (!that.hasVertex(from) || !that.hasVertex(to)) {
	        return false;
	      }
	      var visited = {};
	      function hasPathAux(current) {
	        if (that.hasEdge(current, to)) {
	          return true;
	        }
	        visited[current] = true;
	        var found = false;
	        that.eachVertexFrom(current, function(next) {
	          if (!found && !visited[next] && hasPathAux(next)) {
	            found = true;
	          }
	        });
	        delete visited[current];
	        return found;
	      }
	      return hasPathAux(from);
	    };
	    that.topologically = function(handler) {
	      var visited = [];
	      var handled = {};
	      function visit(a) {
	        visited.push(a);
	        var i = visited.indexOf(a);
	        if (i !== visited.length - 1) {
	          var cycle = visited.slice(i + 1).reverse();
	          throw new JsGraph.CycleError(cycle);
	        }
	        if (!handled[a]) {
	          that.eachVertexTo(a, visit);
	          handled[a] = {returned: handler(a, that.vertexValue(a))};
	        }
	        visited.pop();
	      }
	      that.eachVertex(function(a) {
	        if (!handled[a]) {
	          visit(a);
	        }
	      });
	    };
	    that.transitiveReduction = function() {
	      var result = new JsGraph();
	      that.eachVertex(function(key, val) {
	        result.addVertex(key, val);
	      });
	      that.eachEdge(function(from, to, val) {
	        result.addEdge(from, to, val);
	      });
	      result.eachVertex(function(x) {
	        result.eachVertex(function(y) {
	          if (result.hasEdge(x, y)) {
	            result.eachVertex(function(z) {
	              if (result.hasPath(y, z)) {
	                result.removeEdge(x, z);
	              }
	            });
	          }
	        });
	      });
	      return result;
	    };
	  }
	  function set2dObj(A, one, two, val) {
	    if (typeof A[one] === 'undefined') {
	      A[one] = {};
	    }
	    A[one][two] = val;
	  }
	  function Callbacks() {
	    var callbacks = [];
	    this.add = function(fn) {
	      if (callbacks.indexOf(fn) === -1) {
	        callbacks.push(fn);
	      }
	      return function removeCallback() {
	        var index = callbacks.indexOf(fn);
	        if (index !== -1) {
	          callbacks.splice(index, 1);
	        }
	      };
	    };
	    this.fire = function() {
	      var args = arguments;
	      callbacks.forEach(function(fn) {
	        fn.apply(null, args);
	      });
	    };
	  }
	  function newError(name, constructor) {
	    constructor.prototype.__proto__ = Error.prototype;
	    constructor.prototype.constructor = constructor;
	    constructor.prototype.name = name;
	    return constructor;
	  }
	  JsGraph.VertexExistsError = newError("VertexExistsError", function(key, value) {
	    var that = this;
	    function refreshMessage() {
	      that.message = "This graph has " + (that.vertices === 1 ? "a vertex" : "vertices") + " '" + Object.keys(that.vertices).join("', '") + "'";
	    }
	    that.v = function(key, value) {
	      that.vertices[key] = value;
	      refreshMessage();
	      return that;
	    };
	    that.vertices = {};
	    that.v(key, value);
	    refreshMessage();
	  });
	  JsGraph.VertexNotExistsError = newError("VertexNotExistError", function(key) {
	    var that = this;
	    function refreshMessage() {
	      that.message = "This graph does not have " + (that.vertices === 1 ? "a vertex" : "vertices") + " '" + Object.keys(that.vertices).join("', '") + "'";
	    }
	    that.v = function(key) {
	      that.vertices[key] = undefined;
	      refreshMessage();
	      return that;
	    };
	    that.vertices = {};
	    that.v(key);
	    refreshMessage();
	  });
	  JsGraph.EdgeExistsError = newError("EdgeExistsError", function(from, to, value) {
	    var that = this;
	    function refreshMessage() {
	      var edges = [];
	      Object.keys(that.edges).forEach(function(from) {
	        Object.keys(that.edges[from]).forEach(function(to) {
	          edges.push("('" + from + "', '" + to + "')");
	        });
	      });
	      that.message = "This graph has " + (edges.length === 1 ? "an edge " : "edges ") + edges.join(", ");
	    }
	    that.e = function(from, to, value) {
	      set2dObj(that.edges, from, to, value);
	      refreshMessage();
	      return that;
	    };
	    that.edges = {};
	    that.e(from, to, value);
	    refreshMessage();
	  });
	  JsGraph.EdgeNotExistsError = newError("EdgeNotExistError", function(from, to) {
	    var that = this;
	    function refreshMessage() {
	      var edges = [];
	      Object.keys(that.edges).forEach(function(from) {
	        Object.keys(that.edges[from]).forEach(function(to) {
	          edges.push("('" + from + "', '" + to + "')");
	        });
	      });
	      that.message = "This graph does not have " + (edges.length === 1 ? "an edge " : "edges ") + edges.join(", ");
	    }
	    that.e = function(from, to) {
	      set2dObj(that.edges, from, to, undefined);
	      refreshMessage();
	      return that;
	    };
	    that.edges = {};
	    that.e(from, to);
	    refreshMessage();
	  });
	  JsGraph.HasConnectedEdgesError = newError("HasConnectedEdgesError", function(key) {
	    this.message = "The '" + key + "' vertex has connected edges";
	    this.key = key;
	  });
	  JsGraph.CycleError = newError("CycleError", function(cycle) {
	    this.message = "This graph contains a cycle: " + cycle;
	    this.cycle = cycle;
	  });
	  return JsGraph;
	}));
	
	//# sourceMappingURL=<compileOutput>


/***/ }

/******/ })
//# sourceMappingURL=data:application/json;base64,